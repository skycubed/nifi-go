// Code generated by go-swagger; DO NOT EDIT.

package extension_repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GetExtensionRepoVersionExtensionsReader is a Reader for the GetExtensionRepoVersionExtensions structure.
type GetExtensionRepoVersionExtensionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionRepoVersionExtensionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExtensionRepoVersionExtensionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExtensionRepoVersionExtensionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetExtensionRepoVersionExtensionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExtensionRepoVersionExtensionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExtensionRepoVersionExtensionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetExtensionRepoVersionExtensionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExtensionRepoVersionExtensionsOK creates a GetExtensionRepoVersionExtensionsOK with default headers values
func NewGetExtensionRepoVersionExtensionsOK() *GetExtensionRepoVersionExtensionsOK {
	return &GetExtensionRepoVersionExtensionsOK{}
}

/* GetExtensionRepoVersionExtensionsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetExtensionRepoVersionExtensionsOK struct {
	Payload []*models.ExtensionMetadata
}

func (o *GetExtensionRepoVersionExtensionsOK) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions][%d] getExtensionRepoVersionExtensionsOK  %+v", 200, o.Payload)
}
func (o *GetExtensionRepoVersionExtensionsOK) GetPayload() []*models.ExtensionMetadata {
	return o.Payload
}

func (o *GetExtensionRepoVersionExtensionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionRepoVersionExtensionsBadRequest creates a GetExtensionRepoVersionExtensionsBadRequest with default headers values
func NewGetExtensionRepoVersionExtensionsBadRequest() *GetExtensionRepoVersionExtensionsBadRequest {
	return &GetExtensionRepoVersionExtensionsBadRequest{}
}

/* GetExtensionRepoVersionExtensionsBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetExtensionRepoVersionExtensionsBadRequest struct {
}

func (o *GetExtensionRepoVersionExtensionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions][%d] getExtensionRepoVersionExtensionsBadRequest ", 400)
}

func (o *GetExtensionRepoVersionExtensionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionExtensionsUnauthorized creates a GetExtensionRepoVersionExtensionsUnauthorized with default headers values
func NewGetExtensionRepoVersionExtensionsUnauthorized() *GetExtensionRepoVersionExtensionsUnauthorized {
	return &GetExtensionRepoVersionExtensionsUnauthorized{}
}

/* GetExtensionRepoVersionExtensionsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetExtensionRepoVersionExtensionsUnauthorized struct {
}

func (o *GetExtensionRepoVersionExtensionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions][%d] getExtensionRepoVersionExtensionsUnauthorized ", 401)
}

func (o *GetExtensionRepoVersionExtensionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionExtensionsForbidden creates a GetExtensionRepoVersionExtensionsForbidden with default headers values
func NewGetExtensionRepoVersionExtensionsForbidden() *GetExtensionRepoVersionExtensionsForbidden {
	return &GetExtensionRepoVersionExtensionsForbidden{}
}

/* GetExtensionRepoVersionExtensionsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetExtensionRepoVersionExtensionsForbidden struct {
}

func (o *GetExtensionRepoVersionExtensionsForbidden) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions][%d] getExtensionRepoVersionExtensionsForbidden ", 403)
}

func (o *GetExtensionRepoVersionExtensionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionExtensionsNotFound creates a GetExtensionRepoVersionExtensionsNotFound with default headers values
func NewGetExtensionRepoVersionExtensionsNotFound() *GetExtensionRepoVersionExtensionsNotFound {
	return &GetExtensionRepoVersionExtensionsNotFound{}
}

/* GetExtensionRepoVersionExtensionsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetExtensionRepoVersionExtensionsNotFound struct {
}

func (o *GetExtensionRepoVersionExtensionsNotFound) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions][%d] getExtensionRepoVersionExtensionsNotFound ", 404)
}

func (o *GetExtensionRepoVersionExtensionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionExtensionsConflict creates a GetExtensionRepoVersionExtensionsConflict with default headers values
func NewGetExtensionRepoVersionExtensionsConflict() *GetExtensionRepoVersionExtensionsConflict {
	return &GetExtensionRepoVersionExtensionsConflict{}
}

/* GetExtensionRepoVersionExtensionsConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetExtensionRepoVersionExtensionsConflict struct {
}

func (o *GetExtensionRepoVersionExtensionsConflict) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions][%d] getExtensionRepoVersionExtensionsConflict ", 409)
}

func (o *GetExtensionRepoVersionExtensionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

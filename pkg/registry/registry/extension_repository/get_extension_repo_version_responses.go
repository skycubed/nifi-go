// Code generated by go-swagger; DO NOT EDIT.

package extension_repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GetExtensionRepoVersionReader is a Reader for the GetExtensionRepoVersion structure.
type GetExtensionRepoVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionRepoVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExtensionRepoVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExtensionRepoVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetExtensionRepoVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExtensionRepoVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExtensionRepoVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetExtensionRepoVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExtensionRepoVersionOK creates a GetExtensionRepoVersionOK with default headers values
func NewGetExtensionRepoVersionOK() *GetExtensionRepoVersionOK {
	return &GetExtensionRepoVersionOK{}
}

/* GetExtensionRepoVersionOK describes a response with status code 200, with default header values.

successful operation
*/
type GetExtensionRepoVersionOK struct {
	Payload *models.ExtensionRepoVersion
}

func (o *GetExtensionRepoVersionOK) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}][%d] getExtensionRepoVersionOK  %+v", 200, o.Payload)
}
func (o *GetExtensionRepoVersionOK) GetPayload() *models.ExtensionRepoVersion {
	return o.Payload
}

func (o *GetExtensionRepoVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExtensionRepoVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionRepoVersionBadRequest creates a GetExtensionRepoVersionBadRequest with default headers values
func NewGetExtensionRepoVersionBadRequest() *GetExtensionRepoVersionBadRequest {
	return &GetExtensionRepoVersionBadRequest{}
}

/* GetExtensionRepoVersionBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetExtensionRepoVersionBadRequest struct {
}

func (o *GetExtensionRepoVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}][%d] getExtensionRepoVersionBadRequest ", 400)
}

func (o *GetExtensionRepoVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionUnauthorized creates a GetExtensionRepoVersionUnauthorized with default headers values
func NewGetExtensionRepoVersionUnauthorized() *GetExtensionRepoVersionUnauthorized {
	return &GetExtensionRepoVersionUnauthorized{}
}

/* GetExtensionRepoVersionUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetExtensionRepoVersionUnauthorized struct {
}

func (o *GetExtensionRepoVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}][%d] getExtensionRepoVersionUnauthorized ", 401)
}

func (o *GetExtensionRepoVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionForbidden creates a GetExtensionRepoVersionForbidden with default headers values
func NewGetExtensionRepoVersionForbidden() *GetExtensionRepoVersionForbidden {
	return &GetExtensionRepoVersionForbidden{}
}

/* GetExtensionRepoVersionForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetExtensionRepoVersionForbidden struct {
}

func (o *GetExtensionRepoVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}][%d] getExtensionRepoVersionForbidden ", 403)
}

func (o *GetExtensionRepoVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionNotFound creates a GetExtensionRepoVersionNotFound with default headers values
func NewGetExtensionRepoVersionNotFound() *GetExtensionRepoVersionNotFound {
	return &GetExtensionRepoVersionNotFound{}
}

/* GetExtensionRepoVersionNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetExtensionRepoVersionNotFound struct {
}

func (o *GetExtensionRepoVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}][%d] getExtensionRepoVersionNotFound ", 404)
}

func (o *GetExtensionRepoVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionConflict creates a GetExtensionRepoVersionConflict with default headers values
func NewGetExtensionRepoVersionConflict() *GetExtensionRepoVersionConflict {
	return &GetExtensionRepoVersionConflict{}
}

/* GetExtensionRepoVersionConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetExtensionRepoVersionConflict struct {
}

func (o *GetExtensionRepoVersionConflict) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}][%d] getExtensionRepoVersionConflict ", 409)
}

func (o *GetExtensionRepoVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

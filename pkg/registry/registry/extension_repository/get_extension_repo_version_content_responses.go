// Code generated by go-swagger; DO NOT EDIT.

package extension_repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetExtensionRepoVersionContentReader is a Reader for the GetExtensionRepoVersionContent structure.
type GetExtensionRepoVersionContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionRepoVersionContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExtensionRepoVersionContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExtensionRepoVersionContentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetExtensionRepoVersionContentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExtensionRepoVersionContentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExtensionRepoVersionContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetExtensionRepoVersionContentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExtensionRepoVersionContentOK creates a GetExtensionRepoVersionContentOK with default headers values
func NewGetExtensionRepoVersionContentOK() *GetExtensionRepoVersionContentOK {
	return &GetExtensionRepoVersionContentOK{}
}

/*
GetExtensionRepoVersionContentOK describes a response with status code 200, with default header values.

successful operation
*/
type GetExtensionRepoVersionContentOK struct {
	Payload []strfmt.Base64
}

// IsSuccess returns true when this get extension repo version content o k response has a 2xx status code
func (o *GetExtensionRepoVersionContentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get extension repo version content o k response has a 3xx status code
func (o *GetExtensionRepoVersionContentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get extension repo version content o k response has a 4xx status code
func (o *GetExtensionRepoVersionContentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get extension repo version content o k response has a 5xx status code
func (o *GetExtensionRepoVersionContentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get extension repo version content o k response a status code equal to that given
func (o *GetExtensionRepoVersionContentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetExtensionRepoVersionContentOK) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentOK  %+v", 200, o.Payload)
}

func (o *GetExtensionRepoVersionContentOK) String() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentOK  %+v", 200, o.Payload)
}

func (o *GetExtensionRepoVersionContentOK) GetPayload() []strfmt.Base64 {
	return o.Payload
}

func (o *GetExtensionRepoVersionContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionRepoVersionContentBadRequest creates a GetExtensionRepoVersionContentBadRequest with default headers values
func NewGetExtensionRepoVersionContentBadRequest() *GetExtensionRepoVersionContentBadRequest {
	return &GetExtensionRepoVersionContentBadRequest{}
}

/*
GetExtensionRepoVersionContentBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetExtensionRepoVersionContentBadRequest struct {
}

// IsSuccess returns true when this get extension repo version content bad request response has a 2xx status code
func (o *GetExtensionRepoVersionContentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get extension repo version content bad request response has a 3xx status code
func (o *GetExtensionRepoVersionContentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get extension repo version content bad request response has a 4xx status code
func (o *GetExtensionRepoVersionContentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get extension repo version content bad request response has a 5xx status code
func (o *GetExtensionRepoVersionContentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get extension repo version content bad request response a status code equal to that given
func (o *GetExtensionRepoVersionContentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetExtensionRepoVersionContentBadRequest) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentBadRequest ", 400)
}

func (o *GetExtensionRepoVersionContentBadRequest) String() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentBadRequest ", 400)
}

func (o *GetExtensionRepoVersionContentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionContentUnauthorized creates a GetExtensionRepoVersionContentUnauthorized with default headers values
func NewGetExtensionRepoVersionContentUnauthorized() *GetExtensionRepoVersionContentUnauthorized {
	return &GetExtensionRepoVersionContentUnauthorized{}
}

/*
GetExtensionRepoVersionContentUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetExtensionRepoVersionContentUnauthorized struct {
}

// IsSuccess returns true when this get extension repo version content unauthorized response has a 2xx status code
func (o *GetExtensionRepoVersionContentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get extension repo version content unauthorized response has a 3xx status code
func (o *GetExtensionRepoVersionContentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get extension repo version content unauthorized response has a 4xx status code
func (o *GetExtensionRepoVersionContentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get extension repo version content unauthorized response has a 5xx status code
func (o *GetExtensionRepoVersionContentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get extension repo version content unauthorized response a status code equal to that given
func (o *GetExtensionRepoVersionContentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetExtensionRepoVersionContentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentUnauthorized ", 401)
}

func (o *GetExtensionRepoVersionContentUnauthorized) String() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentUnauthorized ", 401)
}

func (o *GetExtensionRepoVersionContentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionContentForbidden creates a GetExtensionRepoVersionContentForbidden with default headers values
func NewGetExtensionRepoVersionContentForbidden() *GetExtensionRepoVersionContentForbidden {
	return &GetExtensionRepoVersionContentForbidden{}
}

/*
GetExtensionRepoVersionContentForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetExtensionRepoVersionContentForbidden struct {
}

// IsSuccess returns true when this get extension repo version content forbidden response has a 2xx status code
func (o *GetExtensionRepoVersionContentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get extension repo version content forbidden response has a 3xx status code
func (o *GetExtensionRepoVersionContentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get extension repo version content forbidden response has a 4xx status code
func (o *GetExtensionRepoVersionContentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get extension repo version content forbidden response has a 5xx status code
func (o *GetExtensionRepoVersionContentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get extension repo version content forbidden response a status code equal to that given
func (o *GetExtensionRepoVersionContentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetExtensionRepoVersionContentForbidden) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentForbidden ", 403)
}

func (o *GetExtensionRepoVersionContentForbidden) String() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentForbidden ", 403)
}

func (o *GetExtensionRepoVersionContentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionContentNotFound creates a GetExtensionRepoVersionContentNotFound with default headers values
func NewGetExtensionRepoVersionContentNotFound() *GetExtensionRepoVersionContentNotFound {
	return &GetExtensionRepoVersionContentNotFound{}
}

/*
GetExtensionRepoVersionContentNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetExtensionRepoVersionContentNotFound struct {
}

// IsSuccess returns true when this get extension repo version content not found response has a 2xx status code
func (o *GetExtensionRepoVersionContentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get extension repo version content not found response has a 3xx status code
func (o *GetExtensionRepoVersionContentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get extension repo version content not found response has a 4xx status code
func (o *GetExtensionRepoVersionContentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get extension repo version content not found response has a 5xx status code
func (o *GetExtensionRepoVersionContentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get extension repo version content not found response a status code equal to that given
func (o *GetExtensionRepoVersionContentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetExtensionRepoVersionContentNotFound) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentNotFound ", 404)
}

func (o *GetExtensionRepoVersionContentNotFound) String() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentNotFound ", 404)
}

func (o *GetExtensionRepoVersionContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionRepoVersionContentConflict creates a GetExtensionRepoVersionContentConflict with default headers values
func NewGetExtensionRepoVersionContentConflict() *GetExtensionRepoVersionContentConflict {
	return &GetExtensionRepoVersionContentConflict{}
}

/*
GetExtensionRepoVersionContentConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetExtensionRepoVersionContentConflict struct {
}

// IsSuccess returns true when this get extension repo version content conflict response has a 2xx status code
func (o *GetExtensionRepoVersionContentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get extension repo version content conflict response has a 3xx status code
func (o *GetExtensionRepoVersionContentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get extension repo version content conflict response has a 4xx status code
func (o *GetExtensionRepoVersionContentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get extension repo version content conflict response has a 5xx status code
func (o *GetExtensionRepoVersionContentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get extension repo version content conflict response a status code equal to that given
func (o *GetExtensionRepoVersionContentConflict) IsCode(code int) bool {
	return code == 409
}

func (o *GetExtensionRepoVersionContentConflict) Error() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentConflict ", 409)
}

func (o *GetExtensionRepoVersionContentConflict) String() string {
	return fmt.Sprintf("[GET /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content][%d] getExtensionRepoVersionContentConflict ", 409)
}

func (o *GetExtensionRepoVersionContentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

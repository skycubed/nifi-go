// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GetAccessPoliciesReader is a Reader for the GetAccessPolicies structure.
type GetAccessPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccessPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccessPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAccessPoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccessPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetAccessPoliciesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policies] getAccessPolicies", response, response.Code())
	}
}

// NewGetAccessPoliciesOK creates a GetAccessPoliciesOK with default headers values
func NewGetAccessPoliciesOK() *GetAccessPoliciesOK {
	return &GetAccessPoliciesOK{}
}

/*
GetAccessPoliciesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetAccessPoliciesOK struct {
	Payload []*models.AccessPolicy
}

// IsSuccess returns true when this get access policies o k response has a 2xx status code
func (o *GetAccessPoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get access policies o k response has a 3xx status code
func (o *GetAccessPoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access policies o k response has a 4xx status code
func (o *GetAccessPoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access policies o k response has a 5xx status code
func (o *GetAccessPoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get access policies o k response a status code equal to that given
func (o *GetAccessPoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get access policies o k response
func (o *GetAccessPoliciesOK) Code() int {
	return 200
}

func (o *GetAccessPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetAccessPoliciesOK) String() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetAccessPoliciesOK) GetPayload() []*models.AccessPolicy {
	return o.Payload
}

func (o *GetAccessPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPoliciesUnauthorized creates a GetAccessPoliciesUnauthorized with default headers values
func NewGetAccessPoliciesUnauthorized() *GetAccessPoliciesUnauthorized {
	return &GetAccessPoliciesUnauthorized{}
}

/*
GetAccessPoliciesUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetAccessPoliciesUnauthorized struct {
}

// IsSuccess returns true when this get access policies unauthorized response has a 2xx status code
func (o *GetAccessPoliciesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access policies unauthorized response has a 3xx status code
func (o *GetAccessPoliciesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access policies unauthorized response has a 4xx status code
func (o *GetAccessPoliciesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access policies unauthorized response has a 5xx status code
func (o *GetAccessPoliciesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get access policies unauthorized response a status code equal to that given
func (o *GetAccessPoliciesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get access policies unauthorized response
func (o *GetAccessPoliciesUnauthorized) Code() int {
	return 401
}

func (o *GetAccessPoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesUnauthorized ", 401)
}

func (o *GetAccessPoliciesUnauthorized) String() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesUnauthorized ", 401)
}

func (o *GetAccessPoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessPoliciesForbidden creates a GetAccessPoliciesForbidden with default headers values
func NewGetAccessPoliciesForbidden() *GetAccessPoliciesForbidden {
	return &GetAccessPoliciesForbidden{}
}

/*
GetAccessPoliciesForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetAccessPoliciesForbidden struct {
}

// IsSuccess returns true when this get access policies forbidden response has a 2xx status code
func (o *GetAccessPoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access policies forbidden response has a 3xx status code
func (o *GetAccessPoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access policies forbidden response has a 4xx status code
func (o *GetAccessPoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access policies forbidden response has a 5xx status code
func (o *GetAccessPoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get access policies forbidden response a status code equal to that given
func (o *GetAccessPoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get access policies forbidden response
func (o *GetAccessPoliciesForbidden) Code() int {
	return 403
}

func (o *GetAccessPoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesForbidden ", 403)
}

func (o *GetAccessPoliciesForbidden) String() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesForbidden ", 403)
}

func (o *GetAccessPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessPoliciesConflict creates a GetAccessPoliciesConflict with default headers values
func NewGetAccessPoliciesConflict() *GetAccessPoliciesConflict {
	return &GetAccessPoliciesConflict{}
}

/*
GetAccessPoliciesConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetAccessPoliciesConflict struct {
}

// IsSuccess returns true when this get access policies conflict response has a 2xx status code
func (o *GetAccessPoliciesConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access policies conflict response has a 3xx status code
func (o *GetAccessPoliciesConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access policies conflict response has a 4xx status code
func (o *GetAccessPoliciesConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access policies conflict response has a 5xx status code
func (o *GetAccessPoliciesConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get access policies conflict response a status code equal to that given
func (o *GetAccessPoliciesConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get access policies conflict response
func (o *GetAccessPoliciesConflict) Code() int {
	return 409
}

func (o *GetAccessPoliciesConflict) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesConflict ", 409)
}

func (o *GetAccessPoliciesConflict) String() string {
	return fmt.Sprintf("[GET /policies][%d] getAccessPoliciesConflict ", 409)
}

func (o *GetAccessPoliciesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

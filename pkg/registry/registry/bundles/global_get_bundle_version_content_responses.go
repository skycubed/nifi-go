// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GlobalGetBundleVersionContentReader is a Reader for the GlobalGetBundleVersionContent structure.
type GlobalGetBundleVersionContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalGetBundleVersionContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalGetBundleVersionContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalGetBundleVersionContentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGlobalGetBundleVersionContentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGlobalGetBundleVersionContentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGlobalGetBundleVersionContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGlobalGetBundleVersionContentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /bundles/{bundleId}/versions/{version}/content] globalGetBundleVersionContent", response, response.Code())
	}
}

// NewGlobalGetBundleVersionContentOK creates a GlobalGetBundleVersionContentOK with default headers values
func NewGlobalGetBundleVersionContentOK() *GlobalGetBundleVersionContentOK {
	return &GlobalGetBundleVersionContentOK{}
}

/*
GlobalGetBundleVersionContentOK describes a response with status code 200, with default header values.

successful operation
*/
type GlobalGetBundleVersionContentOK struct {
	Payload []strfmt.Base64
}

// IsSuccess returns true when this global get bundle version content o k response has a 2xx status code
func (o *GlobalGetBundleVersionContentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this global get bundle version content o k response has a 3xx status code
func (o *GlobalGetBundleVersionContentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global get bundle version content o k response has a 4xx status code
func (o *GlobalGetBundleVersionContentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this global get bundle version content o k response has a 5xx status code
func (o *GlobalGetBundleVersionContentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this global get bundle version content o k response a status code equal to that given
func (o *GlobalGetBundleVersionContentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the global get bundle version content o k response
func (o *GlobalGetBundleVersionContentOK) Code() int {
	return 200
}

func (o *GlobalGetBundleVersionContentOK) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentOK  %+v", 200, o.Payload)
}

func (o *GlobalGetBundleVersionContentOK) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentOK  %+v", 200, o.Payload)
}

func (o *GlobalGetBundleVersionContentOK) GetPayload() []strfmt.Base64 {
	return o.Payload
}

func (o *GlobalGetBundleVersionContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGlobalGetBundleVersionContentBadRequest creates a GlobalGetBundleVersionContentBadRequest with default headers values
func NewGlobalGetBundleVersionContentBadRequest() *GlobalGetBundleVersionContentBadRequest {
	return &GlobalGetBundleVersionContentBadRequest{}
}

/*
GlobalGetBundleVersionContentBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GlobalGetBundleVersionContentBadRequest struct {
}

// IsSuccess returns true when this global get bundle version content bad request response has a 2xx status code
func (o *GlobalGetBundleVersionContentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global get bundle version content bad request response has a 3xx status code
func (o *GlobalGetBundleVersionContentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global get bundle version content bad request response has a 4xx status code
func (o *GlobalGetBundleVersionContentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this global get bundle version content bad request response has a 5xx status code
func (o *GlobalGetBundleVersionContentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this global get bundle version content bad request response a status code equal to that given
func (o *GlobalGetBundleVersionContentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the global get bundle version content bad request response
func (o *GlobalGetBundleVersionContentBadRequest) Code() int {
	return 400
}

func (o *GlobalGetBundleVersionContentBadRequest) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentBadRequest ", 400)
}

func (o *GlobalGetBundleVersionContentBadRequest) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentBadRequest ", 400)
}

func (o *GlobalGetBundleVersionContentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionContentUnauthorized creates a GlobalGetBundleVersionContentUnauthorized with default headers values
func NewGlobalGetBundleVersionContentUnauthorized() *GlobalGetBundleVersionContentUnauthorized {
	return &GlobalGetBundleVersionContentUnauthorized{}
}

/*
GlobalGetBundleVersionContentUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GlobalGetBundleVersionContentUnauthorized struct {
}

// IsSuccess returns true when this global get bundle version content unauthorized response has a 2xx status code
func (o *GlobalGetBundleVersionContentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global get bundle version content unauthorized response has a 3xx status code
func (o *GlobalGetBundleVersionContentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global get bundle version content unauthorized response has a 4xx status code
func (o *GlobalGetBundleVersionContentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this global get bundle version content unauthorized response has a 5xx status code
func (o *GlobalGetBundleVersionContentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this global get bundle version content unauthorized response a status code equal to that given
func (o *GlobalGetBundleVersionContentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the global get bundle version content unauthorized response
func (o *GlobalGetBundleVersionContentUnauthorized) Code() int {
	return 401
}

func (o *GlobalGetBundleVersionContentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentUnauthorized ", 401)
}

func (o *GlobalGetBundleVersionContentUnauthorized) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentUnauthorized ", 401)
}

func (o *GlobalGetBundleVersionContentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionContentForbidden creates a GlobalGetBundleVersionContentForbidden with default headers values
func NewGlobalGetBundleVersionContentForbidden() *GlobalGetBundleVersionContentForbidden {
	return &GlobalGetBundleVersionContentForbidden{}
}

/*
GlobalGetBundleVersionContentForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GlobalGetBundleVersionContentForbidden struct {
}

// IsSuccess returns true when this global get bundle version content forbidden response has a 2xx status code
func (o *GlobalGetBundleVersionContentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global get bundle version content forbidden response has a 3xx status code
func (o *GlobalGetBundleVersionContentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global get bundle version content forbidden response has a 4xx status code
func (o *GlobalGetBundleVersionContentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this global get bundle version content forbidden response has a 5xx status code
func (o *GlobalGetBundleVersionContentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this global get bundle version content forbidden response a status code equal to that given
func (o *GlobalGetBundleVersionContentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the global get bundle version content forbidden response
func (o *GlobalGetBundleVersionContentForbidden) Code() int {
	return 403
}

func (o *GlobalGetBundleVersionContentForbidden) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentForbidden ", 403)
}

func (o *GlobalGetBundleVersionContentForbidden) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentForbidden ", 403)
}

func (o *GlobalGetBundleVersionContentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionContentNotFound creates a GlobalGetBundleVersionContentNotFound with default headers values
func NewGlobalGetBundleVersionContentNotFound() *GlobalGetBundleVersionContentNotFound {
	return &GlobalGetBundleVersionContentNotFound{}
}

/*
GlobalGetBundleVersionContentNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GlobalGetBundleVersionContentNotFound struct {
}

// IsSuccess returns true when this global get bundle version content not found response has a 2xx status code
func (o *GlobalGetBundleVersionContentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global get bundle version content not found response has a 3xx status code
func (o *GlobalGetBundleVersionContentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global get bundle version content not found response has a 4xx status code
func (o *GlobalGetBundleVersionContentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this global get bundle version content not found response has a 5xx status code
func (o *GlobalGetBundleVersionContentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this global get bundle version content not found response a status code equal to that given
func (o *GlobalGetBundleVersionContentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the global get bundle version content not found response
func (o *GlobalGetBundleVersionContentNotFound) Code() int {
	return 404
}

func (o *GlobalGetBundleVersionContentNotFound) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentNotFound ", 404)
}

func (o *GlobalGetBundleVersionContentNotFound) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentNotFound ", 404)
}

func (o *GlobalGetBundleVersionContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionContentConflict creates a GlobalGetBundleVersionContentConflict with default headers values
func NewGlobalGetBundleVersionContentConflict() *GlobalGetBundleVersionContentConflict {
	return &GlobalGetBundleVersionContentConflict{}
}

/*
GlobalGetBundleVersionContentConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GlobalGetBundleVersionContentConflict struct {
}

// IsSuccess returns true when this global get bundle version content conflict response has a 2xx status code
func (o *GlobalGetBundleVersionContentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global get bundle version content conflict response has a 3xx status code
func (o *GlobalGetBundleVersionContentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global get bundle version content conflict response has a 4xx status code
func (o *GlobalGetBundleVersionContentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this global get bundle version content conflict response has a 5xx status code
func (o *GlobalGetBundleVersionContentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this global get bundle version content conflict response a status code equal to that given
func (o *GlobalGetBundleVersionContentConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the global get bundle version content conflict response
func (o *GlobalGetBundleVersionContentConflict) Code() int {
	return 409
}

func (o *GlobalGetBundleVersionContentConflict) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentConflict ", 409)
}

func (o *GlobalGetBundleVersionContentConflict) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/content][%d] globalGetBundleVersionContentConflict ", 409)
}

func (o *GlobalGetBundleVersionContentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

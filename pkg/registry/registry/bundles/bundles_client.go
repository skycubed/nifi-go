// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bundles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bundles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBundleVersionExtensionAdditionalDetailsDocs(params *GetBundleVersionExtensionAdditionalDetailsDocsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleVersionExtensionAdditionalDetailsDocsOK, error)

	GetBundleVersionExtensionDocs(params *GetBundleVersionExtensionDocsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleVersionExtensionDocsOK, error)

	GetBundleVersions(params *GetBundleVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleVersionsOK, error)

	GetBundles(params *GetBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundlesOK, error)

	GlobalDeleteBundleVersion(params *GlobalDeleteBundleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalDeleteBundleVersionOK, error)

	GlobalDeleteExtensionBundle(params *GlobalDeleteExtensionBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalDeleteExtensionBundleOK, error)

	GlobalGetBundleVersion(params *GlobalGetBundleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionOK, error)

	GlobalGetBundleVersionContent(params *GlobalGetBundleVersionContentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionContentOK, error)

	GlobalGetBundleVersionExtension(params *GlobalGetBundleVersionExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionExtensionOK, error)

	GlobalGetBundleVersionExtensions(params *GlobalGetBundleVersionExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionExtensionsOK, error)

	GlobalGetBundleVersions(params *GlobalGetBundleVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionsOK, error)

	GlobalGetExtensionBundle(params *GlobalGetExtensionBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetExtensionBundleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBundleVersionExtensionAdditionalDetailsDocs gets bundle version extension docs details

  Gets the additional details documentation for the given extension in the given extension bundle version.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GetBundleVersionExtensionAdditionalDetailsDocs(params *GetBundleVersionExtensionAdditionalDetailsDocsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleVersionExtensionAdditionalDetailsDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleVersionExtensionAdditionalDetailsDocsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleVersionExtensionAdditionalDetailsDocs",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions/{version}/extensions/{name}/docs/additional-details",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBundleVersionExtensionAdditionalDetailsDocsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleVersionExtensionAdditionalDetailsDocsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleVersionExtensionAdditionalDetailsDocs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBundleVersionExtensionDocs gets bundle version extension docs

  Gets the documentation for the given extension in the given extension bundle version.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GetBundleVersionExtensionDocs(params *GetBundleVersionExtensionDocsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleVersionExtensionDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleVersionExtensionDocsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleVersionExtensionDocs",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions/{version}/extensions/{name}/docs",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBundleVersionExtensionDocsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleVersionExtensionDocsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleVersionExtensionDocs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBundleVersions gets all bundle versions

  Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GetBundleVersions(params *GetBundleVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleVersions",
		Method:             "GET",
		PathPattern:        "/bundles/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBundleVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBundles gets all bundles

  Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GetBundles(params *GetBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundles",
		Method:             "GET",
		PathPattern:        "/bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBundlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalDeleteBundleVersion deletes bundle version

  Deletes the given extension bundle version and it's associated binary content.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalDeleteBundleVersion(params *GlobalDeleteBundleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalDeleteBundleVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalDeleteBundleVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalDeleteBundleVersion",
		Method:             "DELETE",
		PathPattern:        "/bundles/{bundleId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalDeleteBundleVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalDeleteBundleVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalDeleteBundleVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalDeleteExtensionBundle deletes bundle

  Deletes the given extension bundle and all of it's versions.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalDeleteExtensionBundle(params *GlobalDeleteExtensionBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalDeleteExtensionBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalDeleteExtensionBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalDeleteExtensionBundle",
		Method:             "DELETE",
		PathPattern:        "/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalDeleteExtensionBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalDeleteExtensionBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalDeleteExtensionBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalGetBundleVersion gets bundle version

  Gets the descriptor for the given version of the given extension bundle.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalGetBundleVersion(params *GlobalGetBundleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalGetBundleVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalGetBundleVersion",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalGetBundleVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalGetBundleVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalGetBundleVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalGetBundleVersionContent gets bundle version content

  Gets the binary content for the given version of the given extension bundle.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalGetBundleVersionContent(params *GlobalGetBundleVersionContentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalGetBundleVersionContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalGetBundleVersionContent",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions/{version}/content",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalGetBundleVersionContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalGetBundleVersionContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalGetBundleVersionContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalGetBundleVersionExtension gets bundle version extension

  Gets the metadata about the extension with the given name in the given extension bundle version.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalGetBundleVersionExtension(params *GlobalGetBundleVersionExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalGetBundleVersionExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalGetBundleVersionExtension",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions/{version}/extensions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalGetBundleVersionExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalGetBundleVersionExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalGetBundleVersionExtension: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalGetBundleVersionExtensions gets bundle version extensions

  Gets the metadata about the extensions in the given extension bundle version.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalGetBundleVersionExtensions(params *GlobalGetBundleVersionExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalGetBundleVersionExtensionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalGetBundleVersionExtensions",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions/{version}/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalGetBundleVersionExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalGetBundleVersionExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalGetBundleVersionExtensions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalGetBundleVersions gets bundle versions

  Gets the metadata for the versions of the given extension bundle.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalGetBundleVersions(params *GlobalGetBundleVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetBundleVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalGetBundleVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalGetBundleVersions",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalGetBundleVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalGetBundleVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalGetBundleVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GlobalGetExtensionBundle gets bundle

  Gets the metadata about an extension bundle.

NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
*/
func (a *Client) GlobalGetExtensionBundle(params *GlobalGetExtensionBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalGetExtensionBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalGetExtensionBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalGetExtensionBundle",
		Method:             "GET",
		PathPattern:        "/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalGetExtensionBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalGetExtensionBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalGetExtensionBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

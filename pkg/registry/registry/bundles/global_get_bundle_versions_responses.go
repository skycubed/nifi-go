// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GlobalGetBundleVersionsReader is a Reader for the GlobalGetBundleVersions structure.
type GlobalGetBundleVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalGetBundleVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalGetBundleVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalGetBundleVersionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGlobalGetBundleVersionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGlobalGetBundleVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGlobalGetBundleVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGlobalGetBundleVersionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGlobalGetBundleVersionsOK creates a GlobalGetBundleVersionsOK with default headers values
func NewGlobalGetBundleVersionsOK() *GlobalGetBundleVersionsOK {
	return &GlobalGetBundleVersionsOK{}
}

/* GlobalGetBundleVersionsOK describes a response with status code 200, with default header values.

successful operation
*/
type GlobalGetBundleVersionsOK struct {
	Payload []*models.BundleVersionMetadata
}

func (o *GlobalGetBundleVersionsOK) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions][%d] globalGetBundleVersionsOK  %+v", 200, o.Payload)
}
func (o *GlobalGetBundleVersionsOK) GetPayload() []*models.BundleVersionMetadata {
	return o.Payload
}

func (o *GlobalGetBundleVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGlobalGetBundleVersionsBadRequest creates a GlobalGetBundleVersionsBadRequest with default headers values
func NewGlobalGetBundleVersionsBadRequest() *GlobalGetBundleVersionsBadRequest {
	return &GlobalGetBundleVersionsBadRequest{}
}

/* GlobalGetBundleVersionsBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GlobalGetBundleVersionsBadRequest struct {
}

func (o *GlobalGetBundleVersionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions][%d] globalGetBundleVersionsBadRequest ", 400)
}

func (o *GlobalGetBundleVersionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionsUnauthorized creates a GlobalGetBundleVersionsUnauthorized with default headers values
func NewGlobalGetBundleVersionsUnauthorized() *GlobalGetBundleVersionsUnauthorized {
	return &GlobalGetBundleVersionsUnauthorized{}
}

/* GlobalGetBundleVersionsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GlobalGetBundleVersionsUnauthorized struct {
}

func (o *GlobalGetBundleVersionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions][%d] globalGetBundleVersionsUnauthorized ", 401)
}

func (o *GlobalGetBundleVersionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionsForbidden creates a GlobalGetBundleVersionsForbidden with default headers values
func NewGlobalGetBundleVersionsForbidden() *GlobalGetBundleVersionsForbidden {
	return &GlobalGetBundleVersionsForbidden{}
}

/* GlobalGetBundleVersionsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GlobalGetBundleVersionsForbidden struct {
}

func (o *GlobalGetBundleVersionsForbidden) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions][%d] globalGetBundleVersionsForbidden ", 403)
}

func (o *GlobalGetBundleVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionsNotFound creates a GlobalGetBundleVersionsNotFound with default headers values
func NewGlobalGetBundleVersionsNotFound() *GlobalGetBundleVersionsNotFound {
	return &GlobalGetBundleVersionsNotFound{}
}

/* GlobalGetBundleVersionsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GlobalGetBundleVersionsNotFound struct {
}

func (o *GlobalGetBundleVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions][%d] globalGetBundleVersionsNotFound ", 404)
}

func (o *GlobalGetBundleVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionsConflict creates a GlobalGetBundleVersionsConflict with default headers values
func NewGlobalGetBundleVersionsConflict() *GlobalGetBundleVersionsConflict {
	return &GlobalGetBundleVersionsConflict{}
}

/* GlobalGetBundleVersionsConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GlobalGetBundleVersionsConflict struct {
}

func (o *GlobalGetBundleVersionsConflict) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions][%d] globalGetBundleVersionsConflict ", 409)
}

func (o *GlobalGetBundleVersionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

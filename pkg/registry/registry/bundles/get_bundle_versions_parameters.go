// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBundleVersionsParams creates a new GetBundleVersionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBundleVersionsParams() *GetBundleVersionsParams {
	return &GetBundleVersionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBundleVersionsParamsWithTimeout creates a new GetBundleVersionsParams object
// with the ability to set a timeout on a request.
func NewGetBundleVersionsParamsWithTimeout(timeout time.Duration) *GetBundleVersionsParams {
	return &GetBundleVersionsParams{
		timeout: timeout,
	}
}

// NewGetBundleVersionsParamsWithContext creates a new GetBundleVersionsParams object
// with the ability to set a context for a request.
func NewGetBundleVersionsParamsWithContext(ctx context.Context) *GetBundleVersionsParams {
	return &GetBundleVersionsParams{
		Context: ctx,
	}
}

// NewGetBundleVersionsParamsWithHTTPClient creates a new GetBundleVersionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBundleVersionsParamsWithHTTPClient(client *http.Client) *GetBundleVersionsParams {
	return &GetBundleVersionsParams{
		HTTPClient: client,
	}
}

/* GetBundleVersionsParams contains all the parameters to send to the API endpoint
   for the get bundle versions operation.

   Typically these are written to a http.Request.
*/
type GetBundleVersionsParams struct {

	/* ArtifactID.

	   Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundle versions where the artifactId starts with 'nifi-'.
	*/
	ArtifactID *string

	/* GroupID.

	   Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundle versions where the groupId starts with 'com.'.
	*/
	GroupID *string

	/* Version.

	   Optional version to filter results. The value maye be an exact match, or a wildcard, such as '1.0.%' to select all bundle versions where the version starts with '1.0.'.
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get bundle versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBundleVersionsParams) WithDefaults() *GetBundleVersionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get bundle versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBundleVersionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get bundle versions params
func (o *GetBundleVersionsParams) WithTimeout(timeout time.Duration) *GetBundleVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get bundle versions params
func (o *GetBundleVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get bundle versions params
func (o *GetBundleVersionsParams) WithContext(ctx context.Context) *GetBundleVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get bundle versions params
func (o *GetBundleVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get bundle versions params
func (o *GetBundleVersionsParams) WithHTTPClient(client *http.Client) *GetBundleVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get bundle versions params
func (o *GetBundleVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactID adds the artifactID to the get bundle versions params
func (o *GetBundleVersionsParams) WithArtifactID(artifactID *string) *GetBundleVersionsParams {
	o.SetArtifactID(artifactID)
	return o
}

// SetArtifactID adds the artifactId to the get bundle versions params
func (o *GetBundleVersionsParams) SetArtifactID(artifactID *string) {
	o.ArtifactID = artifactID
}

// WithGroupID adds the groupID to the get bundle versions params
func (o *GetBundleVersionsParams) WithGroupID(groupID *string) *GetBundleVersionsParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get bundle versions params
func (o *GetBundleVersionsParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WithVersion adds the version to the get bundle versions params
func (o *GetBundleVersionsParams) WithVersion(version *string) *GetBundleVersionsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get bundle versions params
func (o *GetBundleVersionsParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetBundleVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArtifactID != nil {

		// query param artifactId
		var qrArtifactID string

		if o.ArtifactID != nil {
			qrArtifactID = *o.ArtifactID
		}
		qArtifactID := qrArtifactID
		if qArtifactID != "" {

			if err := r.SetQueryParam("artifactId", qArtifactID); err != nil {
				return err
			}
		}
	}

	if o.GroupID != nil {

		// query param groupId
		var qrGroupID string

		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := qrGroupID
		if qGroupID != "" {

			if err := r.SetQueryParam("groupId", qGroupID); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

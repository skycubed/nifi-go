// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetBundleVersionExtensionDocsReader is a Reader for the GetBundleVersionExtensionDocs structure.
type GetBundleVersionExtensionDocsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBundleVersionExtensionDocsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBundleVersionExtensionDocsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBundleVersionExtensionDocsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBundleVersionExtensionDocsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBundleVersionExtensionDocsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBundleVersionExtensionDocsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetBundleVersionExtensionDocsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs] getBundleVersionExtensionDocs", response, response.Code())
	}
}

// NewGetBundleVersionExtensionDocsOK creates a GetBundleVersionExtensionDocsOK with default headers values
func NewGetBundleVersionExtensionDocsOK() *GetBundleVersionExtensionDocsOK {
	return &GetBundleVersionExtensionDocsOK{}
}

/*
GetBundleVersionExtensionDocsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetBundleVersionExtensionDocsOK struct {
	Payload string
}

// IsSuccess returns true when this get bundle version extension docs o k response has a 2xx status code
func (o *GetBundleVersionExtensionDocsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bundle version extension docs o k response has a 3xx status code
func (o *GetBundleVersionExtensionDocsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundle version extension docs o k response has a 4xx status code
func (o *GetBundleVersionExtensionDocsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bundle version extension docs o k response has a 5xx status code
func (o *GetBundleVersionExtensionDocsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundle version extension docs o k response a status code equal to that given
func (o *GetBundleVersionExtensionDocsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bundle version extension docs o k response
func (o *GetBundleVersionExtensionDocsOK) Code() int {
	return 200
}

func (o *GetBundleVersionExtensionDocsOK) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsOK  %+v", 200, o.Payload)
}

func (o *GetBundleVersionExtensionDocsOK) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsOK  %+v", 200, o.Payload)
}

func (o *GetBundleVersionExtensionDocsOK) GetPayload() string {
	return o.Payload
}

func (o *GetBundleVersionExtensionDocsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBundleVersionExtensionDocsBadRequest creates a GetBundleVersionExtensionDocsBadRequest with default headers values
func NewGetBundleVersionExtensionDocsBadRequest() *GetBundleVersionExtensionDocsBadRequest {
	return &GetBundleVersionExtensionDocsBadRequest{}
}

/*
GetBundleVersionExtensionDocsBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetBundleVersionExtensionDocsBadRequest struct {
}

// IsSuccess returns true when this get bundle version extension docs bad request response has a 2xx status code
func (o *GetBundleVersionExtensionDocsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundle version extension docs bad request response has a 3xx status code
func (o *GetBundleVersionExtensionDocsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundle version extension docs bad request response has a 4xx status code
func (o *GetBundleVersionExtensionDocsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bundle version extension docs bad request response has a 5xx status code
func (o *GetBundleVersionExtensionDocsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundle version extension docs bad request response a status code equal to that given
func (o *GetBundleVersionExtensionDocsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get bundle version extension docs bad request response
func (o *GetBundleVersionExtensionDocsBadRequest) Code() int {
	return 400
}

func (o *GetBundleVersionExtensionDocsBadRequest) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsBadRequest ", 400)
}

func (o *GetBundleVersionExtensionDocsBadRequest) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsBadRequest ", 400)
}

func (o *GetBundleVersionExtensionDocsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsUnauthorized creates a GetBundleVersionExtensionDocsUnauthorized with default headers values
func NewGetBundleVersionExtensionDocsUnauthorized() *GetBundleVersionExtensionDocsUnauthorized {
	return &GetBundleVersionExtensionDocsUnauthorized{}
}

/*
GetBundleVersionExtensionDocsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetBundleVersionExtensionDocsUnauthorized struct {
}

// IsSuccess returns true when this get bundle version extension docs unauthorized response has a 2xx status code
func (o *GetBundleVersionExtensionDocsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundle version extension docs unauthorized response has a 3xx status code
func (o *GetBundleVersionExtensionDocsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundle version extension docs unauthorized response has a 4xx status code
func (o *GetBundleVersionExtensionDocsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bundle version extension docs unauthorized response has a 5xx status code
func (o *GetBundleVersionExtensionDocsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundle version extension docs unauthorized response a status code equal to that given
func (o *GetBundleVersionExtensionDocsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get bundle version extension docs unauthorized response
func (o *GetBundleVersionExtensionDocsUnauthorized) Code() int {
	return 401
}

func (o *GetBundleVersionExtensionDocsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsUnauthorized ", 401)
}

func (o *GetBundleVersionExtensionDocsUnauthorized) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsUnauthorized ", 401)
}

func (o *GetBundleVersionExtensionDocsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsForbidden creates a GetBundleVersionExtensionDocsForbidden with default headers values
func NewGetBundleVersionExtensionDocsForbidden() *GetBundleVersionExtensionDocsForbidden {
	return &GetBundleVersionExtensionDocsForbidden{}
}

/*
GetBundleVersionExtensionDocsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetBundleVersionExtensionDocsForbidden struct {
}

// IsSuccess returns true when this get bundle version extension docs forbidden response has a 2xx status code
func (o *GetBundleVersionExtensionDocsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundle version extension docs forbidden response has a 3xx status code
func (o *GetBundleVersionExtensionDocsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundle version extension docs forbidden response has a 4xx status code
func (o *GetBundleVersionExtensionDocsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bundle version extension docs forbidden response has a 5xx status code
func (o *GetBundleVersionExtensionDocsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundle version extension docs forbidden response a status code equal to that given
func (o *GetBundleVersionExtensionDocsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get bundle version extension docs forbidden response
func (o *GetBundleVersionExtensionDocsForbidden) Code() int {
	return 403
}

func (o *GetBundleVersionExtensionDocsForbidden) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsForbidden ", 403)
}

func (o *GetBundleVersionExtensionDocsForbidden) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsForbidden ", 403)
}

func (o *GetBundleVersionExtensionDocsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsNotFound creates a GetBundleVersionExtensionDocsNotFound with default headers values
func NewGetBundleVersionExtensionDocsNotFound() *GetBundleVersionExtensionDocsNotFound {
	return &GetBundleVersionExtensionDocsNotFound{}
}

/*
GetBundleVersionExtensionDocsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetBundleVersionExtensionDocsNotFound struct {
}

// IsSuccess returns true when this get bundle version extension docs not found response has a 2xx status code
func (o *GetBundleVersionExtensionDocsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundle version extension docs not found response has a 3xx status code
func (o *GetBundleVersionExtensionDocsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundle version extension docs not found response has a 4xx status code
func (o *GetBundleVersionExtensionDocsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bundle version extension docs not found response has a 5xx status code
func (o *GetBundleVersionExtensionDocsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundle version extension docs not found response a status code equal to that given
func (o *GetBundleVersionExtensionDocsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get bundle version extension docs not found response
func (o *GetBundleVersionExtensionDocsNotFound) Code() int {
	return 404
}

func (o *GetBundleVersionExtensionDocsNotFound) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsNotFound ", 404)
}

func (o *GetBundleVersionExtensionDocsNotFound) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsNotFound ", 404)
}

func (o *GetBundleVersionExtensionDocsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsConflict creates a GetBundleVersionExtensionDocsConflict with default headers values
func NewGetBundleVersionExtensionDocsConflict() *GetBundleVersionExtensionDocsConflict {
	return &GetBundleVersionExtensionDocsConflict{}
}

/*
GetBundleVersionExtensionDocsConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetBundleVersionExtensionDocsConflict struct {
}

// IsSuccess returns true when this get bundle version extension docs conflict response has a 2xx status code
func (o *GetBundleVersionExtensionDocsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bundle version extension docs conflict response has a 3xx status code
func (o *GetBundleVersionExtensionDocsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bundle version extension docs conflict response has a 4xx status code
func (o *GetBundleVersionExtensionDocsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bundle version extension docs conflict response has a 5xx status code
func (o *GetBundleVersionExtensionDocsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get bundle version extension docs conflict response a status code equal to that given
func (o *GetBundleVersionExtensionDocsConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get bundle version extension docs conflict response
func (o *GetBundleVersionExtensionDocsConflict) Code() int {
	return 409
}

func (o *GetBundleVersionExtensionDocsConflict) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsConflict ", 409)
}

func (o *GetBundleVersionExtensionDocsConflict) String() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsConflict ", 409)
}

func (o *GetBundleVersionExtensionDocsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

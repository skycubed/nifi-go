// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetBundleVersionExtensionDocsReader is a Reader for the GetBundleVersionExtensionDocs structure.
type GetBundleVersionExtensionDocsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBundleVersionExtensionDocsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBundleVersionExtensionDocsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBundleVersionExtensionDocsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBundleVersionExtensionDocsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBundleVersionExtensionDocsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBundleVersionExtensionDocsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetBundleVersionExtensionDocsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBundleVersionExtensionDocsOK creates a GetBundleVersionExtensionDocsOK with default headers values
func NewGetBundleVersionExtensionDocsOK() *GetBundleVersionExtensionDocsOK {
	return &GetBundleVersionExtensionDocsOK{}
}

/* GetBundleVersionExtensionDocsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetBundleVersionExtensionDocsOK struct {
	Payload string
}

func (o *GetBundleVersionExtensionDocsOK) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsOK  %+v", 200, o.Payload)
}
func (o *GetBundleVersionExtensionDocsOK) GetPayload() string {
	return o.Payload
}

func (o *GetBundleVersionExtensionDocsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBundleVersionExtensionDocsBadRequest creates a GetBundleVersionExtensionDocsBadRequest with default headers values
func NewGetBundleVersionExtensionDocsBadRequest() *GetBundleVersionExtensionDocsBadRequest {
	return &GetBundleVersionExtensionDocsBadRequest{}
}

/* GetBundleVersionExtensionDocsBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetBundleVersionExtensionDocsBadRequest struct {
}

func (o *GetBundleVersionExtensionDocsBadRequest) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsBadRequest ", 400)
}

func (o *GetBundleVersionExtensionDocsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsUnauthorized creates a GetBundleVersionExtensionDocsUnauthorized with default headers values
func NewGetBundleVersionExtensionDocsUnauthorized() *GetBundleVersionExtensionDocsUnauthorized {
	return &GetBundleVersionExtensionDocsUnauthorized{}
}

/* GetBundleVersionExtensionDocsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetBundleVersionExtensionDocsUnauthorized struct {
}

func (o *GetBundleVersionExtensionDocsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsUnauthorized ", 401)
}

func (o *GetBundleVersionExtensionDocsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsForbidden creates a GetBundleVersionExtensionDocsForbidden with default headers values
func NewGetBundleVersionExtensionDocsForbidden() *GetBundleVersionExtensionDocsForbidden {
	return &GetBundleVersionExtensionDocsForbidden{}
}

/* GetBundleVersionExtensionDocsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetBundleVersionExtensionDocsForbidden struct {
}

func (o *GetBundleVersionExtensionDocsForbidden) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsForbidden ", 403)
}

func (o *GetBundleVersionExtensionDocsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsNotFound creates a GetBundleVersionExtensionDocsNotFound with default headers values
func NewGetBundleVersionExtensionDocsNotFound() *GetBundleVersionExtensionDocsNotFound {
	return &GetBundleVersionExtensionDocsNotFound{}
}

/* GetBundleVersionExtensionDocsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetBundleVersionExtensionDocsNotFound struct {
}

func (o *GetBundleVersionExtensionDocsNotFound) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsNotFound ", 404)
}

func (o *GetBundleVersionExtensionDocsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBundleVersionExtensionDocsConflict creates a GetBundleVersionExtensionDocsConflict with default headers values
func NewGetBundleVersionExtensionDocsConflict() *GetBundleVersionExtensionDocsConflict {
	return &GetBundleVersionExtensionDocsConflict{}
}

/* GetBundleVersionExtensionDocsConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetBundleVersionExtensionDocsConflict struct {
}

func (o *GetBundleVersionExtensionDocsConflict) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}/extensions/{name}/docs][%d] getBundleVersionExtensionDocsConflict ", 409)
}

func (o *GetBundleVersionExtensionDocsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

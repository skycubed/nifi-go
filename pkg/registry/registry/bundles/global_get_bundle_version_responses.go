// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GlobalGetBundleVersionReader is a Reader for the GlobalGetBundleVersion structure.
type GlobalGetBundleVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalGetBundleVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalGetBundleVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalGetBundleVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGlobalGetBundleVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGlobalGetBundleVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGlobalGetBundleVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGlobalGetBundleVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGlobalGetBundleVersionOK creates a GlobalGetBundleVersionOK with default headers values
func NewGlobalGetBundleVersionOK() *GlobalGetBundleVersionOK {
	return &GlobalGetBundleVersionOK{}
}

/* GlobalGetBundleVersionOK describes a response with status code 200, with default header values.

successful operation
*/
type GlobalGetBundleVersionOK struct {
	Payload *models.BundleVersion
}

func (o *GlobalGetBundleVersionOK) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}][%d] globalGetBundleVersionOK  %+v", 200, o.Payload)
}
func (o *GlobalGetBundleVersionOK) GetPayload() *models.BundleVersion {
	return o.Payload
}

func (o *GlobalGetBundleVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BundleVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGlobalGetBundleVersionBadRequest creates a GlobalGetBundleVersionBadRequest with default headers values
func NewGlobalGetBundleVersionBadRequest() *GlobalGetBundleVersionBadRequest {
	return &GlobalGetBundleVersionBadRequest{}
}

/* GlobalGetBundleVersionBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GlobalGetBundleVersionBadRequest struct {
}

func (o *GlobalGetBundleVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}][%d] globalGetBundleVersionBadRequest ", 400)
}

func (o *GlobalGetBundleVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionUnauthorized creates a GlobalGetBundleVersionUnauthorized with default headers values
func NewGlobalGetBundleVersionUnauthorized() *GlobalGetBundleVersionUnauthorized {
	return &GlobalGetBundleVersionUnauthorized{}
}

/* GlobalGetBundleVersionUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GlobalGetBundleVersionUnauthorized struct {
}

func (o *GlobalGetBundleVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}][%d] globalGetBundleVersionUnauthorized ", 401)
}

func (o *GlobalGetBundleVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionForbidden creates a GlobalGetBundleVersionForbidden with default headers values
func NewGlobalGetBundleVersionForbidden() *GlobalGetBundleVersionForbidden {
	return &GlobalGetBundleVersionForbidden{}
}

/* GlobalGetBundleVersionForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GlobalGetBundleVersionForbidden struct {
}

func (o *GlobalGetBundleVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}][%d] globalGetBundleVersionForbidden ", 403)
}

func (o *GlobalGetBundleVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionNotFound creates a GlobalGetBundleVersionNotFound with default headers values
func NewGlobalGetBundleVersionNotFound() *GlobalGetBundleVersionNotFound {
	return &GlobalGetBundleVersionNotFound{}
}

/* GlobalGetBundleVersionNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GlobalGetBundleVersionNotFound struct {
}

func (o *GlobalGetBundleVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}][%d] globalGetBundleVersionNotFound ", 404)
}

func (o *GlobalGetBundleVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetBundleVersionConflict creates a GlobalGetBundleVersionConflict with default headers values
func NewGlobalGetBundleVersionConflict() *GlobalGetBundleVersionConflict {
	return &GlobalGetBundleVersionConflict{}
}

/* GlobalGetBundleVersionConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GlobalGetBundleVersionConflict struct {
}

func (o *GlobalGetBundleVersionConflict) Error() string {
	return fmt.Sprintf("[GET /bundles/{bundleId}/versions/{version}][%d] globalGetBundleVersionConflict ", 409)
}

func (o *GlobalGetBundleVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

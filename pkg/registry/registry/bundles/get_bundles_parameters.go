// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBundlesParams creates a new GetBundlesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBundlesParams() *GetBundlesParams {
	return &GetBundlesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBundlesParamsWithTimeout creates a new GetBundlesParams object
// with the ability to set a timeout on a request.
func NewGetBundlesParamsWithTimeout(timeout time.Duration) *GetBundlesParams {
	return &GetBundlesParams{
		timeout: timeout,
	}
}

// NewGetBundlesParamsWithContext creates a new GetBundlesParams object
// with the ability to set a context for a request.
func NewGetBundlesParamsWithContext(ctx context.Context) *GetBundlesParams {
	return &GetBundlesParams{
		Context: ctx,
	}
}

// NewGetBundlesParamsWithHTTPClient creates a new GetBundlesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBundlesParamsWithHTTPClient(client *http.Client) *GetBundlesParams {
	return &GetBundlesParams{
		HTTPClient: client,
	}
}

/* GetBundlesParams contains all the parameters to send to the API endpoint
   for the get bundles operation.

   Typically these are written to a http.Request.
*/
type GetBundlesParams struct {

	/* ArtifactID.

	   Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundles where the artifactId starts with 'nifi-'.
	*/
	ArtifactID *string

	/* BucketName.

	   Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as 'My Bucket%' to select all bundles where the bucket name starts with 'My Bucket'.
	*/
	BucketName *string

	/* GroupID.

	   Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundles where the groupId starts with 'com.'.
	*/
	GroupID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get bundles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBundlesParams) WithDefaults() *GetBundlesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get bundles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBundlesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get bundles params
func (o *GetBundlesParams) WithTimeout(timeout time.Duration) *GetBundlesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get bundles params
func (o *GetBundlesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get bundles params
func (o *GetBundlesParams) WithContext(ctx context.Context) *GetBundlesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get bundles params
func (o *GetBundlesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get bundles params
func (o *GetBundlesParams) WithHTTPClient(client *http.Client) *GetBundlesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get bundles params
func (o *GetBundlesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactID adds the artifactID to the get bundles params
func (o *GetBundlesParams) WithArtifactID(artifactID *string) *GetBundlesParams {
	o.SetArtifactID(artifactID)
	return o
}

// SetArtifactID adds the artifactId to the get bundles params
func (o *GetBundlesParams) SetArtifactID(artifactID *string) {
	o.ArtifactID = artifactID
}

// WithBucketName adds the bucketName to the get bundles params
func (o *GetBundlesParams) WithBucketName(bucketName *string) *GetBundlesParams {
	o.SetBucketName(bucketName)
	return o
}

// SetBucketName adds the bucketName to the get bundles params
func (o *GetBundlesParams) SetBucketName(bucketName *string) {
	o.BucketName = bucketName
}

// WithGroupID adds the groupID to the get bundles params
func (o *GetBundlesParams) WithGroupID(groupID *string) *GetBundlesParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get bundles params
func (o *GetBundlesParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WriteToRequest writes these params to a swagger request
func (o *GetBundlesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArtifactID != nil {

		// query param artifactId
		var qrArtifactID string

		if o.ArtifactID != nil {
			qrArtifactID = *o.ArtifactID
		}
		qArtifactID := qrArtifactID
		if qArtifactID != "" {

			if err := r.SetQueryParam("artifactId", qArtifactID); err != nil {
				return err
			}
		}
	}

	if o.BucketName != nil {

		// query param bucketName
		var qrBucketName string

		if o.BucketName != nil {
			qrBucketName = *o.BucketName
		}
		qBucketName := qrBucketName
		if qBucketName != "" {

			if err := r.SetQueryParam("bucketName", qBucketName); err != nil {
				return err
			}
		}
	}

	if o.GroupID != nil {

		// query param groupId
		var qrGroupID string

		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := qrGroupID
		if qGroupID != "" {

			if err := r.SetQueryParam("groupId", qGroupID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

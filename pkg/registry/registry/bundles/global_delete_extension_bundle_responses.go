// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GlobalDeleteExtensionBundleReader is a Reader for the GlobalDeleteExtensionBundle structure.
type GlobalDeleteExtensionBundleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalDeleteExtensionBundleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalDeleteExtensionBundleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalDeleteExtensionBundleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGlobalDeleteExtensionBundleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGlobalDeleteExtensionBundleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGlobalDeleteExtensionBundleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGlobalDeleteExtensionBundleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGlobalDeleteExtensionBundleOK creates a GlobalDeleteExtensionBundleOK with default headers values
func NewGlobalDeleteExtensionBundleOK() *GlobalDeleteExtensionBundleOK {
	return &GlobalDeleteExtensionBundleOK{}
}

/*
GlobalDeleteExtensionBundleOK describes a response with status code 200, with default header values.

successful operation
*/
type GlobalDeleteExtensionBundleOK struct {
	Payload *models.ExtensionBundle
}

// IsSuccess returns true when this global delete extension bundle o k response has a 2xx status code
func (o *GlobalDeleteExtensionBundleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this global delete extension bundle o k response has a 3xx status code
func (o *GlobalDeleteExtensionBundleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete extension bundle o k response has a 4xx status code
func (o *GlobalDeleteExtensionBundleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this global delete extension bundle o k response has a 5xx status code
func (o *GlobalDeleteExtensionBundleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete extension bundle o k response a status code equal to that given
func (o *GlobalDeleteExtensionBundleOK) IsCode(code int) bool {
	return code == 200
}

func (o *GlobalDeleteExtensionBundleOK) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleOK  %+v", 200, o.Payload)
}

func (o *GlobalDeleteExtensionBundleOK) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleOK  %+v", 200, o.Payload)
}

func (o *GlobalDeleteExtensionBundleOK) GetPayload() *models.ExtensionBundle {
	return o.Payload
}

func (o *GlobalDeleteExtensionBundleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExtensionBundle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGlobalDeleteExtensionBundleBadRequest creates a GlobalDeleteExtensionBundleBadRequest with default headers values
func NewGlobalDeleteExtensionBundleBadRequest() *GlobalDeleteExtensionBundleBadRequest {
	return &GlobalDeleteExtensionBundleBadRequest{}
}

/*
GlobalDeleteExtensionBundleBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GlobalDeleteExtensionBundleBadRequest struct {
}

// IsSuccess returns true when this global delete extension bundle bad request response has a 2xx status code
func (o *GlobalDeleteExtensionBundleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete extension bundle bad request response has a 3xx status code
func (o *GlobalDeleteExtensionBundleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete extension bundle bad request response has a 4xx status code
func (o *GlobalDeleteExtensionBundleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete extension bundle bad request response has a 5xx status code
func (o *GlobalDeleteExtensionBundleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete extension bundle bad request response a status code equal to that given
func (o *GlobalDeleteExtensionBundleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GlobalDeleteExtensionBundleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleBadRequest ", 400)
}

func (o *GlobalDeleteExtensionBundleBadRequest) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleBadRequest ", 400)
}

func (o *GlobalDeleteExtensionBundleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteExtensionBundleUnauthorized creates a GlobalDeleteExtensionBundleUnauthorized with default headers values
func NewGlobalDeleteExtensionBundleUnauthorized() *GlobalDeleteExtensionBundleUnauthorized {
	return &GlobalDeleteExtensionBundleUnauthorized{}
}

/*
GlobalDeleteExtensionBundleUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GlobalDeleteExtensionBundleUnauthorized struct {
}

// IsSuccess returns true when this global delete extension bundle unauthorized response has a 2xx status code
func (o *GlobalDeleteExtensionBundleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete extension bundle unauthorized response has a 3xx status code
func (o *GlobalDeleteExtensionBundleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete extension bundle unauthorized response has a 4xx status code
func (o *GlobalDeleteExtensionBundleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete extension bundle unauthorized response has a 5xx status code
func (o *GlobalDeleteExtensionBundleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete extension bundle unauthorized response a status code equal to that given
func (o *GlobalDeleteExtensionBundleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GlobalDeleteExtensionBundleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleUnauthorized ", 401)
}

func (o *GlobalDeleteExtensionBundleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleUnauthorized ", 401)
}

func (o *GlobalDeleteExtensionBundleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteExtensionBundleForbidden creates a GlobalDeleteExtensionBundleForbidden with default headers values
func NewGlobalDeleteExtensionBundleForbidden() *GlobalDeleteExtensionBundleForbidden {
	return &GlobalDeleteExtensionBundleForbidden{}
}

/*
GlobalDeleteExtensionBundleForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GlobalDeleteExtensionBundleForbidden struct {
}

// IsSuccess returns true when this global delete extension bundle forbidden response has a 2xx status code
func (o *GlobalDeleteExtensionBundleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete extension bundle forbidden response has a 3xx status code
func (o *GlobalDeleteExtensionBundleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete extension bundle forbidden response has a 4xx status code
func (o *GlobalDeleteExtensionBundleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete extension bundle forbidden response has a 5xx status code
func (o *GlobalDeleteExtensionBundleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete extension bundle forbidden response a status code equal to that given
func (o *GlobalDeleteExtensionBundleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GlobalDeleteExtensionBundleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleForbidden ", 403)
}

func (o *GlobalDeleteExtensionBundleForbidden) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleForbidden ", 403)
}

func (o *GlobalDeleteExtensionBundleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteExtensionBundleNotFound creates a GlobalDeleteExtensionBundleNotFound with default headers values
func NewGlobalDeleteExtensionBundleNotFound() *GlobalDeleteExtensionBundleNotFound {
	return &GlobalDeleteExtensionBundleNotFound{}
}

/*
GlobalDeleteExtensionBundleNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GlobalDeleteExtensionBundleNotFound struct {
}

// IsSuccess returns true when this global delete extension bundle not found response has a 2xx status code
func (o *GlobalDeleteExtensionBundleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete extension bundle not found response has a 3xx status code
func (o *GlobalDeleteExtensionBundleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete extension bundle not found response has a 4xx status code
func (o *GlobalDeleteExtensionBundleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete extension bundle not found response has a 5xx status code
func (o *GlobalDeleteExtensionBundleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete extension bundle not found response a status code equal to that given
func (o *GlobalDeleteExtensionBundleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GlobalDeleteExtensionBundleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleNotFound ", 404)
}

func (o *GlobalDeleteExtensionBundleNotFound) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleNotFound ", 404)
}

func (o *GlobalDeleteExtensionBundleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteExtensionBundleConflict creates a GlobalDeleteExtensionBundleConflict with default headers values
func NewGlobalDeleteExtensionBundleConflict() *GlobalDeleteExtensionBundleConflict {
	return &GlobalDeleteExtensionBundleConflict{}
}

/*
GlobalDeleteExtensionBundleConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GlobalDeleteExtensionBundleConflict struct {
}

// IsSuccess returns true when this global delete extension bundle conflict response has a 2xx status code
func (o *GlobalDeleteExtensionBundleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete extension bundle conflict response has a 3xx status code
func (o *GlobalDeleteExtensionBundleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete extension bundle conflict response has a 4xx status code
func (o *GlobalDeleteExtensionBundleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete extension bundle conflict response has a 5xx status code
func (o *GlobalDeleteExtensionBundleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete extension bundle conflict response a status code equal to that given
func (o *GlobalDeleteExtensionBundleConflict) IsCode(code int) bool {
	return code == 409
}

func (o *GlobalDeleteExtensionBundleConflict) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleConflict ", 409)
}

func (o *GlobalDeleteExtensionBundleConflict) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}][%d] globalDeleteExtensionBundleConflict ", 409)
}

func (o *GlobalDeleteExtensionBundleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

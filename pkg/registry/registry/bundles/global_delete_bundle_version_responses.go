// Code generated by go-swagger; DO NOT EDIT.

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GlobalDeleteBundleVersionReader is a Reader for the GlobalDeleteBundleVersion structure.
type GlobalDeleteBundleVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalDeleteBundleVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalDeleteBundleVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalDeleteBundleVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGlobalDeleteBundleVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGlobalDeleteBundleVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGlobalDeleteBundleVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGlobalDeleteBundleVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGlobalDeleteBundleVersionOK creates a GlobalDeleteBundleVersionOK with default headers values
func NewGlobalDeleteBundleVersionOK() *GlobalDeleteBundleVersionOK {
	return &GlobalDeleteBundleVersionOK{}
}

/*
GlobalDeleteBundleVersionOK describes a response with status code 200, with default header values.

successful operation
*/
type GlobalDeleteBundleVersionOK struct {
	Payload *models.BundleVersion
}

// IsSuccess returns true when this global delete bundle version o k response has a 2xx status code
func (o *GlobalDeleteBundleVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this global delete bundle version o k response has a 3xx status code
func (o *GlobalDeleteBundleVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete bundle version o k response has a 4xx status code
func (o *GlobalDeleteBundleVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this global delete bundle version o k response has a 5xx status code
func (o *GlobalDeleteBundleVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete bundle version o k response a status code equal to that given
func (o *GlobalDeleteBundleVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GlobalDeleteBundleVersionOK) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionOK  %+v", 200, o.Payload)
}

func (o *GlobalDeleteBundleVersionOK) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionOK  %+v", 200, o.Payload)
}

func (o *GlobalDeleteBundleVersionOK) GetPayload() *models.BundleVersion {
	return o.Payload
}

func (o *GlobalDeleteBundleVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BundleVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGlobalDeleteBundleVersionBadRequest creates a GlobalDeleteBundleVersionBadRequest with default headers values
func NewGlobalDeleteBundleVersionBadRequest() *GlobalDeleteBundleVersionBadRequest {
	return &GlobalDeleteBundleVersionBadRequest{}
}

/*
GlobalDeleteBundleVersionBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GlobalDeleteBundleVersionBadRequest struct {
}

// IsSuccess returns true when this global delete bundle version bad request response has a 2xx status code
func (o *GlobalDeleteBundleVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete bundle version bad request response has a 3xx status code
func (o *GlobalDeleteBundleVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete bundle version bad request response has a 4xx status code
func (o *GlobalDeleteBundleVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete bundle version bad request response has a 5xx status code
func (o *GlobalDeleteBundleVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete bundle version bad request response a status code equal to that given
func (o *GlobalDeleteBundleVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GlobalDeleteBundleVersionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionBadRequest ", 400)
}

func (o *GlobalDeleteBundleVersionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionBadRequest ", 400)
}

func (o *GlobalDeleteBundleVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteBundleVersionUnauthorized creates a GlobalDeleteBundleVersionUnauthorized with default headers values
func NewGlobalDeleteBundleVersionUnauthorized() *GlobalDeleteBundleVersionUnauthorized {
	return &GlobalDeleteBundleVersionUnauthorized{}
}

/*
GlobalDeleteBundleVersionUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GlobalDeleteBundleVersionUnauthorized struct {
}

// IsSuccess returns true when this global delete bundle version unauthorized response has a 2xx status code
func (o *GlobalDeleteBundleVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete bundle version unauthorized response has a 3xx status code
func (o *GlobalDeleteBundleVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete bundle version unauthorized response has a 4xx status code
func (o *GlobalDeleteBundleVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete bundle version unauthorized response has a 5xx status code
func (o *GlobalDeleteBundleVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete bundle version unauthorized response a status code equal to that given
func (o *GlobalDeleteBundleVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GlobalDeleteBundleVersionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionUnauthorized ", 401)
}

func (o *GlobalDeleteBundleVersionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionUnauthorized ", 401)
}

func (o *GlobalDeleteBundleVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteBundleVersionForbidden creates a GlobalDeleteBundleVersionForbidden with default headers values
func NewGlobalDeleteBundleVersionForbidden() *GlobalDeleteBundleVersionForbidden {
	return &GlobalDeleteBundleVersionForbidden{}
}

/*
GlobalDeleteBundleVersionForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GlobalDeleteBundleVersionForbidden struct {
}

// IsSuccess returns true when this global delete bundle version forbidden response has a 2xx status code
func (o *GlobalDeleteBundleVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete bundle version forbidden response has a 3xx status code
func (o *GlobalDeleteBundleVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete bundle version forbidden response has a 4xx status code
func (o *GlobalDeleteBundleVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete bundle version forbidden response has a 5xx status code
func (o *GlobalDeleteBundleVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete bundle version forbidden response a status code equal to that given
func (o *GlobalDeleteBundleVersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GlobalDeleteBundleVersionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionForbidden ", 403)
}

func (o *GlobalDeleteBundleVersionForbidden) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionForbidden ", 403)
}

func (o *GlobalDeleteBundleVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteBundleVersionNotFound creates a GlobalDeleteBundleVersionNotFound with default headers values
func NewGlobalDeleteBundleVersionNotFound() *GlobalDeleteBundleVersionNotFound {
	return &GlobalDeleteBundleVersionNotFound{}
}

/*
GlobalDeleteBundleVersionNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GlobalDeleteBundleVersionNotFound struct {
}

// IsSuccess returns true when this global delete bundle version not found response has a 2xx status code
func (o *GlobalDeleteBundleVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete bundle version not found response has a 3xx status code
func (o *GlobalDeleteBundleVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete bundle version not found response has a 4xx status code
func (o *GlobalDeleteBundleVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete bundle version not found response has a 5xx status code
func (o *GlobalDeleteBundleVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete bundle version not found response a status code equal to that given
func (o *GlobalDeleteBundleVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GlobalDeleteBundleVersionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionNotFound ", 404)
}

func (o *GlobalDeleteBundleVersionNotFound) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionNotFound ", 404)
}

func (o *GlobalDeleteBundleVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalDeleteBundleVersionConflict creates a GlobalDeleteBundleVersionConflict with default headers values
func NewGlobalDeleteBundleVersionConflict() *GlobalDeleteBundleVersionConflict {
	return &GlobalDeleteBundleVersionConflict{}
}

/*
GlobalDeleteBundleVersionConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GlobalDeleteBundleVersionConflict struct {
}

// IsSuccess returns true when this global delete bundle version conflict response has a 2xx status code
func (o *GlobalDeleteBundleVersionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global delete bundle version conflict response has a 3xx status code
func (o *GlobalDeleteBundleVersionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global delete bundle version conflict response has a 4xx status code
func (o *GlobalDeleteBundleVersionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this global delete bundle version conflict response has a 5xx status code
func (o *GlobalDeleteBundleVersionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this global delete bundle version conflict response a status code equal to that given
func (o *GlobalDeleteBundleVersionConflict) IsCode(code int) bool {
	return code == 409
}

func (o *GlobalDeleteBundleVersionConflict) Error() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionConflict ", 409)
}

func (o *GlobalDeleteBundleVersionConflict) String() string {
	return fmt.Sprintf("[DELETE /bundles/{bundleId}/versions/{version}][%d] globalDeleteBundleVersionConflict ", 409)
}

func (o *GlobalDeleteBundleVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

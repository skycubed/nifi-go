// Code generated by go-swagger; DO NOT EDIT.

package bucket_flows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bucket flows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bucket flows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFlow(params *CreateFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFlowOK, error)

	CreateFlowVersion(params *CreateFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFlowVersionOK, error)

	DeleteFlow(params *DeleteFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFlowOK, error)

	ExportVersionedFlow(params *ExportVersionedFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportVersionedFlowOK, error)

	GetFlow(params *GetFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowOK, error)

	GetFlowDiff(params *GetFlowDiffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowDiffOK, error)

	GetFlowVersion(params *GetFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowVersionOK, error)

	GetFlowVersions(params *GetFlowVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowVersionsOK, error)

	GetFlows(params *GetFlowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowsOK, error)

	GetLatestFlowVersion(params *GetLatestFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestFlowVersionOK, error)

	GetLatestFlowVersionMetadata(params *GetLatestFlowVersionMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestFlowVersionMetadataOK, error)

	ImportVersionedFlow(params *ImportVersionedFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportVersionedFlowOK, *ImportVersionedFlowCreated, error)

	UpdateFlow(params *UpdateFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFlowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateFlow creates flow

Creates a flow in the given bucket. The flow id is created by the server and populated in the returned entity.
*/
func (a *Client) CreateFlow(params *CreateFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFlow",
		Method:             "POST",
		PathPattern:        "/buckets/{bucketId}/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFlowVersion creates flow version

Creates the next version of a flow. The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.
*/
func (a *Client) CreateFlowVersion(params *CreateFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFlowVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlowVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFlowVersion",
		Method:             "POST",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFlowVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFlowVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFlowVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFlow deletes bucket flow

Deletes a flow, including all saved versions of that flow.
*/
func (a *Client) DeleteFlow(params *DeleteFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFlow",
		Method:             "DELETE",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportVersionedFlow exports specified bucket flow version content

Exports the specified version of a flow, including the metadata and content of the flow.
*/
func (a *Client) ExportVersionedFlow(params *ExportVersionedFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportVersionedFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportVersionedFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportVersionedFlow",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportVersionedFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportVersionedFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportVersionedFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFlow gets bucket flow

Retrieves the flow with the given id in the given bucket.
*/
func (a *Client) GetFlow(params *GetFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlow",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFlowDiff gets bucket flow diff

Computes the differences between two given versions of a flow.
*/
func (a *Client) GetFlowDiff(params *GetFlowDiffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowDiffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowDiffParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlowDiff",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowDiffReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowDiffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlowDiff: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFlowVersion gets bucket flow version

Gets the given version of a flow, including the metadata and content for the version.
*/
func (a *Client) GetFlowVersion(params *GetFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlowVersion",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlowVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFlowVersions gets bucket flow versions

Gets summary information for all versions of a flow. Versions are ordered newest->oldest.
*/
func (a *Client) GetFlowVersions(params *GetFlowVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlowVersions",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlowVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFlows gets bucket flows

Retrieves all flows in the given bucket.
*/
func (a *Client) GetFlows(params *GetFlowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlows",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestFlowVersion gets latest bucket flow version content

Gets the latest version of a flow, including the metadata and content of the flow.
*/
func (a *Client) GetLatestFlowVersion(params *GetLatestFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestFlowVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestFlowVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestFlowVersion",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestFlowVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestFlowVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestFlowVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestFlowVersionMetadata gets latest bucket flow version metadata

Gets the metadata for the latest version of a flow.
*/
func (a *Client) GetLatestFlowVersionMetadata(params *GetLatestFlowVersionMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestFlowVersionMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestFlowVersionMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestFlowVersionMetadata",
		Method:             "GET",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions/latest/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestFlowVersionMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestFlowVersionMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestFlowVersionMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportVersionedFlow imports flow version

Import the next version of a flow. The version number of the object being created will be the next available version integer. Flow versions are immutable after they are created.
*/
func (a *Client) ImportVersionedFlow(params *ImportVersionedFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportVersionedFlowOK, *ImportVersionedFlowCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportVersionedFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importVersionedFlow",
		Method:             "POST",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}/versions/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportVersionedFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ImportVersionedFlowOK:
		return value, nil, nil
	case *ImportVersionedFlowCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bucket_flows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFlow updates bucket flow

Updates the flow with the given id in the given bucket.
*/
func (a *Client) UpdateFlow(params *UpdateFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFlow",
		Method:             "PUT",
		PathPattern:        "/buckets/{bucketId}/flows/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

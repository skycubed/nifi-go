// Code generated by go-swagger; DO NOT EDIT.

package bucket_flows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GetFlowDiffReader is a Reader for the GetFlowDiff structure.
type GetFlowDiffReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFlowDiffReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFlowDiffOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFlowDiffBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFlowDiffUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFlowDiffForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFlowDiffNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetFlowDiffConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFlowDiffOK creates a GetFlowDiffOK with default headers values
func NewGetFlowDiffOK() *GetFlowDiffOK {
	return &GetFlowDiffOK{}
}

/* GetFlowDiffOK describes a response with status code 200, with default header values.

successful operation
*/
type GetFlowDiffOK struct {
	Payload *models.VersionedFlowDifference
}

func (o *GetFlowDiffOK) Error() string {
	return fmt.Sprintf("[GET /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}][%d] getFlowDiffOK  %+v", 200, o.Payload)
}
func (o *GetFlowDiffOK) GetPayload() *models.VersionedFlowDifference {
	return o.Payload
}

func (o *GetFlowDiffOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VersionedFlowDifference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFlowDiffBadRequest creates a GetFlowDiffBadRequest with default headers values
func NewGetFlowDiffBadRequest() *GetFlowDiffBadRequest {
	return &GetFlowDiffBadRequest{}
}

/* GetFlowDiffBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetFlowDiffBadRequest struct {
}

func (o *GetFlowDiffBadRequest) Error() string {
	return fmt.Sprintf("[GET /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}][%d] getFlowDiffBadRequest ", 400)
}

func (o *GetFlowDiffBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFlowDiffUnauthorized creates a GetFlowDiffUnauthorized with default headers values
func NewGetFlowDiffUnauthorized() *GetFlowDiffUnauthorized {
	return &GetFlowDiffUnauthorized{}
}

/* GetFlowDiffUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetFlowDiffUnauthorized struct {
}

func (o *GetFlowDiffUnauthorized) Error() string {
	return fmt.Sprintf("[GET /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}][%d] getFlowDiffUnauthorized ", 401)
}

func (o *GetFlowDiffUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFlowDiffForbidden creates a GetFlowDiffForbidden with default headers values
func NewGetFlowDiffForbidden() *GetFlowDiffForbidden {
	return &GetFlowDiffForbidden{}
}

/* GetFlowDiffForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetFlowDiffForbidden struct {
}

func (o *GetFlowDiffForbidden) Error() string {
	return fmt.Sprintf("[GET /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}][%d] getFlowDiffForbidden ", 403)
}

func (o *GetFlowDiffForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFlowDiffNotFound creates a GetFlowDiffNotFound with default headers values
func NewGetFlowDiffNotFound() *GetFlowDiffNotFound {
	return &GetFlowDiffNotFound{}
}

/* GetFlowDiffNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetFlowDiffNotFound struct {
}

func (o *GetFlowDiffNotFound) Error() string {
	return fmt.Sprintf("[GET /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}][%d] getFlowDiffNotFound ", 404)
}

func (o *GetFlowDiffNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFlowDiffConflict creates a GetFlowDiffConflict with default headers values
func NewGetFlowDiffConflict() *GetFlowDiffConflict {
	return &GetFlowDiffConflict{}
}

/* GetFlowDiffConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetFlowDiffConflict struct {
}

func (o *GetFlowDiffConflict) Error() string {
	return fmt.Sprintf("[GET /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}][%d] getFlowDiffConflict ", 409)
}

func (o *GetFlowDiffConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CreateAccessTokenUsingKerberosTicketReader is a Reader for the CreateAccessTokenUsingKerberosTicket structure.
type CreateAccessTokenUsingKerberosTicketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAccessTokenUsingKerberosTicketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateAccessTokenUsingKerberosTicketOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateAccessTokenUsingKerberosTicketBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateAccessTokenUsingKerberosTicketUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateAccessTokenUsingKerberosTicketConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateAccessTokenUsingKerberosTicketInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateAccessTokenUsingKerberosTicketOK creates a CreateAccessTokenUsingKerberosTicketOK with default headers values
func NewCreateAccessTokenUsingKerberosTicketOK() *CreateAccessTokenUsingKerberosTicketOK {
	return &CreateAccessTokenUsingKerberosTicketOK{}
}

/*
CreateAccessTokenUsingKerberosTicketOK describes a response with status code 200, with default header values.

successful operation
*/
type CreateAccessTokenUsingKerberosTicketOK struct {
	Payload string
}

// IsSuccess returns true when this create access token using kerberos ticket o k response has a 2xx status code
func (o *CreateAccessTokenUsingKerberosTicketOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create access token using kerberos ticket o k response has a 3xx status code
func (o *CreateAccessTokenUsingKerberosTicketOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create access token using kerberos ticket o k response has a 4xx status code
func (o *CreateAccessTokenUsingKerberosTicketOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create access token using kerberos ticket o k response has a 5xx status code
func (o *CreateAccessTokenUsingKerberosTicketOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create access token using kerberos ticket o k response a status code equal to that given
func (o *CreateAccessTokenUsingKerberosTicketOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateAccessTokenUsingKerberosTicketOK) Error() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketOK  %+v", 200, o.Payload)
}

func (o *CreateAccessTokenUsingKerberosTicketOK) String() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketOK  %+v", 200, o.Payload)
}

func (o *CreateAccessTokenUsingKerberosTicketOK) GetPayload() string {
	return o.Payload
}

func (o *CreateAccessTokenUsingKerberosTicketOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAccessTokenUsingKerberosTicketBadRequest creates a CreateAccessTokenUsingKerberosTicketBadRequest with default headers values
func NewCreateAccessTokenUsingKerberosTicketBadRequest() *CreateAccessTokenUsingKerberosTicketBadRequest {
	return &CreateAccessTokenUsingKerberosTicketBadRequest{}
}

/*
CreateAccessTokenUsingKerberosTicketBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type CreateAccessTokenUsingKerberosTicketBadRequest struct {
}

// IsSuccess returns true when this create access token using kerberos ticket bad request response has a 2xx status code
func (o *CreateAccessTokenUsingKerberosTicketBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create access token using kerberos ticket bad request response has a 3xx status code
func (o *CreateAccessTokenUsingKerberosTicketBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create access token using kerberos ticket bad request response has a 4xx status code
func (o *CreateAccessTokenUsingKerberosTicketBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create access token using kerberos ticket bad request response has a 5xx status code
func (o *CreateAccessTokenUsingKerberosTicketBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create access token using kerberos ticket bad request response a status code equal to that given
func (o *CreateAccessTokenUsingKerberosTicketBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateAccessTokenUsingKerberosTicketBadRequest) Error() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketBadRequest ", 400)
}

func (o *CreateAccessTokenUsingKerberosTicketBadRequest) String() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketBadRequest ", 400)
}

func (o *CreateAccessTokenUsingKerberosTicketBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateAccessTokenUsingKerberosTicketUnauthorized creates a CreateAccessTokenUsingKerberosTicketUnauthorized with default headers values
func NewCreateAccessTokenUsingKerberosTicketUnauthorized() *CreateAccessTokenUsingKerberosTicketUnauthorized {
	return &CreateAccessTokenUsingKerberosTicketUnauthorized{}
}

/*
CreateAccessTokenUsingKerberosTicketUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type CreateAccessTokenUsingKerberosTicketUnauthorized struct {
}

// IsSuccess returns true when this create access token using kerberos ticket unauthorized response has a 2xx status code
func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create access token using kerberos ticket unauthorized response has a 3xx status code
func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create access token using kerberos ticket unauthorized response has a 4xx status code
func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create access token using kerberos ticket unauthorized response has a 5xx status code
func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create access token using kerberos ticket unauthorized response a status code equal to that given
func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) Error() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketUnauthorized ", 401)
}

func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) String() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketUnauthorized ", 401)
}

func (o *CreateAccessTokenUsingKerberosTicketUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateAccessTokenUsingKerberosTicketConflict creates a CreateAccessTokenUsingKerberosTicketConflict with default headers values
func NewCreateAccessTokenUsingKerberosTicketConflict() *CreateAccessTokenUsingKerberosTicketConflict {
	return &CreateAccessTokenUsingKerberosTicketConflict{}
}

/*
CreateAccessTokenUsingKerberosTicketConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login Kerberos credentials.
*/
type CreateAccessTokenUsingKerberosTicketConflict struct {
}

// IsSuccess returns true when this create access token using kerberos ticket conflict response has a 2xx status code
func (o *CreateAccessTokenUsingKerberosTicketConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create access token using kerberos ticket conflict response has a 3xx status code
func (o *CreateAccessTokenUsingKerberosTicketConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create access token using kerberos ticket conflict response has a 4xx status code
func (o *CreateAccessTokenUsingKerberosTicketConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create access token using kerberos ticket conflict response has a 5xx status code
func (o *CreateAccessTokenUsingKerberosTicketConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create access token using kerberos ticket conflict response a status code equal to that given
func (o *CreateAccessTokenUsingKerberosTicketConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateAccessTokenUsingKerberosTicketConflict) Error() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketConflict ", 409)
}

func (o *CreateAccessTokenUsingKerberosTicketConflict) String() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketConflict ", 409)
}

func (o *CreateAccessTokenUsingKerberosTicketConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateAccessTokenUsingKerberosTicketInternalServerError creates a CreateAccessTokenUsingKerberosTicketInternalServerError with default headers values
func NewCreateAccessTokenUsingKerberosTicketInternalServerError() *CreateAccessTokenUsingKerberosTicketInternalServerError {
	return &CreateAccessTokenUsingKerberosTicketInternalServerError{}
}

/*
CreateAccessTokenUsingKerberosTicketInternalServerError describes a response with status code 500, with default header values.

NiFi Registry was unable to complete the request because an unexpected error occurred.
*/
type CreateAccessTokenUsingKerberosTicketInternalServerError struct {
}

// IsSuccess returns true when this create access token using kerberos ticket internal server error response has a 2xx status code
func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create access token using kerberos ticket internal server error response has a 3xx status code
func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create access token using kerberos ticket internal server error response has a 4xx status code
func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create access token using kerberos ticket internal server error response has a 5xx status code
func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create access token using kerberos ticket internal server error response a status code equal to that given
func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) Error() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketInternalServerError ", 500)
}

func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) String() string {
	return fmt.Sprintf("[POST /access/token/kerberos][%d] createAccessTokenUsingKerberosTicketInternalServerError ", 500)
}

func (o *CreateAccessTokenUsingKerberosTicketInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GetExtensionsReader is a Reader for the GetExtensions structure.
type GetExtensionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExtensionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExtensionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetExtensionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExtensionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExtensionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetExtensionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExtensionsOK creates a GetExtensionsOK with default headers values
func NewGetExtensionsOK() *GetExtensionsOK {
	return &GetExtensionsOK{}
}

/* GetExtensionsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetExtensionsOK struct {
	Payload *models.ExtensionMetadataContainer
}

func (o *GetExtensionsOK) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsOK  %+v", 200, o.Payload)
}
func (o *GetExtensionsOK) GetPayload() *models.ExtensionMetadataContainer {
	return o.Payload
}

func (o *GetExtensionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExtensionMetadataContainer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsBadRequest creates a GetExtensionsBadRequest with default headers values
func NewGetExtensionsBadRequest() *GetExtensionsBadRequest {
	return &GetExtensionsBadRequest{}
}

/* GetExtensionsBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetExtensionsBadRequest struct {
}

func (o *GetExtensionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsBadRequest ", 400)
}

func (o *GetExtensionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionsUnauthorized creates a GetExtensionsUnauthorized with default headers values
func NewGetExtensionsUnauthorized() *GetExtensionsUnauthorized {
	return &GetExtensionsUnauthorized{}
}

/* GetExtensionsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetExtensionsUnauthorized struct {
}

func (o *GetExtensionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsUnauthorized ", 401)
}

func (o *GetExtensionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionsForbidden creates a GetExtensionsForbidden with default headers values
func NewGetExtensionsForbidden() *GetExtensionsForbidden {
	return &GetExtensionsForbidden{}
}

/* GetExtensionsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetExtensionsForbidden struct {
}

func (o *GetExtensionsForbidden) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsForbidden ", 403)
}

func (o *GetExtensionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionsNotFound creates a GetExtensionsNotFound with default headers values
func NewGetExtensionsNotFound() *GetExtensionsNotFound {
	return &GetExtensionsNotFound{}
}

/* GetExtensionsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetExtensionsNotFound struct {
}

func (o *GetExtensionsNotFound) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsNotFound ", 404)
}

func (o *GetExtensionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExtensionsConflict creates a GetExtensionsConflict with default headers values
func NewGetExtensionsConflict() *GetExtensionsConflict {
	return &GetExtensionsConflict{}
}

/* GetExtensionsConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GetExtensionsConflict struct {
}

func (o *GetExtensionsConflict) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsConflict ", 409)
}

func (o *GetExtensionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

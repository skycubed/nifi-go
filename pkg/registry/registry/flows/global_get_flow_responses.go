// Code generated by go-swagger; DO NOT EDIT.

package flows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/registry/models"
)

// GlobalGetFlowReader is a Reader for the GlobalGetFlow structure.
type GlobalGetFlowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalGetFlowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalGetFlowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalGetFlowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGlobalGetFlowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGlobalGetFlowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGlobalGetFlowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGlobalGetFlowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGlobalGetFlowOK creates a GlobalGetFlowOK with default headers values
func NewGlobalGetFlowOK() *GlobalGetFlowOK {
	return &GlobalGetFlowOK{}
}

/* GlobalGetFlowOK describes a response with status code 200, with default header values.

successful operation
*/
type GlobalGetFlowOK struct {
	Payload *models.VersionedFlow
}

func (o *GlobalGetFlowOK) Error() string {
	return fmt.Sprintf("[GET /flows/{flowId}][%d] globalGetFlowOK  %+v", 200, o.Payload)
}
func (o *GlobalGetFlowOK) GetPayload() *models.VersionedFlow {
	return o.Payload
}

func (o *GlobalGetFlowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VersionedFlow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGlobalGetFlowBadRequest creates a GlobalGetFlowBadRequest with default headers values
func NewGlobalGetFlowBadRequest() *GlobalGetFlowBadRequest {
	return &GlobalGetFlowBadRequest{}
}

/* GlobalGetFlowBadRequest describes a response with status code 400, with default header values.

NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GlobalGetFlowBadRequest struct {
}

func (o *GlobalGetFlowBadRequest) Error() string {
	return fmt.Sprintf("[GET /flows/{flowId}][%d] globalGetFlowBadRequest ", 400)
}

func (o *GlobalGetFlowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetFlowUnauthorized creates a GlobalGetFlowUnauthorized with default headers values
func NewGlobalGetFlowUnauthorized() *GlobalGetFlowUnauthorized {
	return &GlobalGetFlowUnauthorized{}
}

/* GlobalGetFlowUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GlobalGetFlowUnauthorized struct {
}

func (o *GlobalGetFlowUnauthorized) Error() string {
	return fmt.Sprintf("[GET /flows/{flowId}][%d] globalGetFlowUnauthorized ", 401)
}

func (o *GlobalGetFlowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetFlowForbidden creates a GlobalGetFlowForbidden with default headers values
func NewGlobalGetFlowForbidden() *GlobalGetFlowForbidden {
	return &GlobalGetFlowForbidden{}
}

/* GlobalGetFlowForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GlobalGetFlowForbidden struct {
}

func (o *GlobalGetFlowForbidden) Error() string {
	return fmt.Sprintf("[GET /flows/{flowId}][%d] globalGetFlowForbidden ", 403)
}

func (o *GlobalGetFlowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetFlowNotFound creates a GlobalGetFlowNotFound with default headers values
func NewGlobalGetFlowNotFound() *GlobalGetFlowNotFound {
	return &GlobalGetFlowNotFound{}
}

/* GlobalGetFlowNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GlobalGetFlowNotFound struct {
}

func (o *GlobalGetFlowNotFound) Error() string {
	return fmt.Sprintf("[GET /flows/{flowId}][%d] globalGetFlowNotFound ", 404)
}

func (o *GlobalGetFlowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGlobalGetFlowConflict creates a GlobalGetFlowConflict with default headers values
func NewGlobalGetFlowConflict() *GlobalGetFlowConflict {
	return &GlobalGetFlowConflict{}
}

/* GlobalGetFlowConflict describes a response with status code 409, with default header values.

NiFi Registry was unable to complete the request because it assumes a server state that is not valid.
*/
type GlobalGetFlowConflict struct {
}

func (o *GlobalGetFlowConflict) Error() string {
	return fmt.Sprintf("[GET /flows/{flowId}][%d] globalGetFlowConflict ", 409)
}

func (o *GlobalGetFlowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

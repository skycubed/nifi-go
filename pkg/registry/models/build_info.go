// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuildInfo build info
//
// swagger:model BuildInfo
type BuildInfo struct {

	// The branch used to build the version of the bundle
	BuildBranch string `json:"buildBranch,omitempty"`

	// The flags used to build the version of the bundle
	BuildFlags string `json:"buildFlags,omitempty"`

	// The revision used to build the version of the bundle
	BuildRevision string `json:"buildRevision,omitempty"`

	// The tag used to build the version of the bundle
	BuildTag string `json:"buildTag,omitempty"`

	// The tool used to build the version of the bundle
	BuildTool string `json:"buildTool,omitempty"`

	// The timestamp the version of the bundle was built
	Built int64 `json:"built,omitempty"`

	// The identity of the user that performed the build
	BuiltBy string `json:"builtBy,omitempty"`
}

// Validate validates this build info
func (m *BuildInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this build info based on context it is used
func (m *BuildInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BuildInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildInfo) UnmarshalBinary(b []byte) error {
	var res BuildInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

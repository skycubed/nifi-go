// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedRemoteGroupPort versioned remote group port
//
// swagger:model VersionedRemoteGroupPort
type VersionedRemoteGroupPort struct {

	// The batch settings for data transmission.
	BatchSize *BatchSize `json:"batchSize,omitempty"`

	// The user-supplied comments for the component
	Comments string `json:"comments,omitempty"`

	// component type
	// Enum: [CONNECTION PROCESSOR PROCESS_GROUP REMOTE_PROCESS_GROUP INPUT_PORT OUTPUT_PORT REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT FUNNEL LABEL CONTROLLER_SERVICE]
	ComponentType string `json:"componentType,omitempty"`

	// The number of task that may transmit flowfiles to the target port concurrently.
	ConcurrentlySchedulableTaskCount int32 `json:"concurrentlySchedulableTaskCount,omitempty"`

	// The ID of the Process Group that this component belongs to
	GroupIdentifier string `json:"groupIdentifier,omitempty"`

	// The component's unique identifier
	Identifier string `json:"identifier,omitempty"`

	// The component's name
	Name string `json:"name,omitempty"`

	// The component's position on the graph
	Position *Position `json:"position,omitempty"`

	// The id of the remote process group that the port resides in.
	RemoteGroupID string `json:"remoteGroupId,omitempty"`

	// The scheduled state of the component
	// Enum: [ENABLED DISABLED]
	ScheduledState string `json:"scheduledState,omitempty"`

	// The ID of the port on the target NiFi instance
	TargetID string `json:"targetId,omitempty"`

	// Whether the flowfiles are compressed when sent to the target port.
	UseCompression bool `json:"useCompression,omitempty"`
}

// Validate validates this versioned remote group port
func (m *VersionedRemoteGroupPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedRemoteGroupPort) validateBatchSize(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchSize) { // not required
		return nil
	}

	if m.BatchSize != nil {
		if err := m.BatchSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchSize")
			}
			return err
		}
	}

	return nil
}

var versionedRemoteGroupPortTypeComponentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTION","PROCESSOR","PROCESS_GROUP","REMOTE_PROCESS_GROUP","INPUT_PORT","OUTPUT_PORT","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT","FUNNEL","LABEL","CONTROLLER_SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedRemoteGroupPortTypeComponentTypePropEnum = append(versionedRemoteGroupPortTypeComponentTypePropEnum, v)
	}
}

const (

	// VersionedRemoteGroupPortComponentTypeCONNECTION captures enum value "CONNECTION"
	VersionedRemoteGroupPortComponentTypeCONNECTION string = "CONNECTION"

	// VersionedRemoteGroupPortComponentTypePROCESSOR captures enum value "PROCESSOR"
	VersionedRemoteGroupPortComponentTypePROCESSOR string = "PROCESSOR"

	// VersionedRemoteGroupPortComponentTypePROCESSGROUP captures enum value "PROCESS_GROUP"
	VersionedRemoteGroupPortComponentTypePROCESSGROUP string = "PROCESS_GROUP"

	// VersionedRemoteGroupPortComponentTypeREMOTEPROCESSGROUP captures enum value "REMOTE_PROCESS_GROUP"
	VersionedRemoteGroupPortComponentTypeREMOTEPROCESSGROUP string = "REMOTE_PROCESS_GROUP"

	// VersionedRemoteGroupPortComponentTypeINPUTPORT captures enum value "INPUT_PORT"
	VersionedRemoteGroupPortComponentTypeINPUTPORT string = "INPUT_PORT"

	// VersionedRemoteGroupPortComponentTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	VersionedRemoteGroupPortComponentTypeOUTPUTPORT string = "OUTPUT_PORT"

	// VersionedRemoteGroupPortComponentTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	VersionedRemoteGroupPortComponentTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// VersionedRemoteGroupPortComponentTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	VersionedRemoteGroupPortComponentTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"

	// VersionedRemoteGroupPortComponentTypeFUNNEL captures enum value "FUNNEL"
	VersionedRemoteGroupPortComponentTypeFUNNEL string = "FUNNEL"

	// VersionedRemoteGroupPortComponentTypeLABEL captures enum value "LABEL"
	VersionedRemoteGroupPortComponentTypeLABEL string = "LABEL"

	// VersionedRemoteGroupPortComponentTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	VersionedRemoteGroupPortComponentTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"
)

// prop value enum
func (m *VersionedRemoteGroupPort) validateComponentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedRemoteGroupPortTypeComponentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedRemoteGroupPort) validateComponentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateComponentTypeEnum("componentType", "body", m.ComponentType); err != nil {
		return err
	}

	return nil
}

func (m *VersionedRemoteGroupPort) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

var versionedRemoteGroupPortTypeScheduledStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedRemoteGroupPortTypeScheduledStatePropEnum = append(versionedRemoteGroupPortTypeScheduledStatePropEnum, v)
	}
}

const (

	// VersionedRemoteGroupPortScheduledStateENABLED captures enum value "ENABLED"
	VersionedRemoteGroupPortScheduledStateENABLED string = "ENABLED"

	// VersionedRemoteGroupPortScheduledStateDISABLED captures enum value "DISABLED"
	VersionedRemoteGroupPortScheduledStateDISABLED string = "DISABLED"
)

// prop value enum
func (m *VersionedRemoteGroupPort) validateScheduledStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedRemoteGroupPortTypeScheduledStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedRemoteGroupPort) validateScheduledState(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledState) { // not required
		return nil
	}

	// value enum
	if err := m.validateScheduledStateEnum("scheduledState", "body", m.ScheduledState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this versioned remote group port based on the context it is used
func (m *VersionedRemoteGroupPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedRemoteGroupPort) contextValidateBatchSize(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchSize != nil {

		if swag.IsZero(m.BatchSize) { // not required
			return nil
		}

		if err := m.BatchSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchSize")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedRemoteGroupPort) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedRemoteGroupPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedRemoteGroupPort) UnmarshalBinary(b []byte) error {
	var res VersionedRemoteGroupPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

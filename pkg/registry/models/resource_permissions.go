// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourcePermissions resource permissions
//
// swagger:model ResourcePermissions
type ResourcePermissions struct {

	// The access that the current user has to any top level resources (a logical 'OR' of all other values)
	// Read Only: true
	AnyTopLevelResource *Permissions `json:"anyTopLevelResource,omitempty"`

	// The access that the current user has to the top level /buckets resource of this NiFi Registry (i.e., access to all buckets)
	// Read Only: true
	Buckets *Permissions `json:"buckets,omitempty"`

	// The access that the current user has to the top level /policies resource of this NiFi Registry
	// Read Only: true
	Policies *Permissions `json:"policies,omitempty"`

	// The access that the current user has to the top level /proxy resource of this NiFi Registry
	// Read Only: true
	Proxy *Permissions `json:"proxy,omitempty"`

	// The access that the current user has to the top level /tenants resource of this NiFi Registry
	// Read Only: true
	Tenants *Permissions `json:"tenants,omitempty"`
}

// Validate validates this resource permissions
func (m *ResourcePermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnyTopLevelResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePermissions) validateAnyTopLevelResource(formats strfmt.Registry) error {
	if swag.IsZero(m.AnyTopLevelResource) { // not required
		return nil
	}

	if m.AnyTopLevelResource != nil {
		if err := m.AnyTopLevelResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("anyTopLevelResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("anyTopLevelResource")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) validateBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.Buckets) { // not required
		return nil
	}

	if m.Buckets != nil {
		if err := m.Buckets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buckets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buckets")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if m.Policies != nil {
		if err := m.Policies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) validateProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.Proxy) { // not required
		return nil
	}

	if m.Proxy != nil {
		if err := m.Proxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) validateTenants(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenants) { // not required
		return nil
	}

	if m.Tenants != nil {
		if err := m.Tenants.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenants")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenants")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource permissions based on the context it is used
func (m *ResourcePermissions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnyTopLevelResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePermissions) contextValidateAnyTopLevelResource(ctx context.Context, formats strfmt.Registry) error {

	if m.AnyTopLevelResource != nil {
		if err := m.AnyTopLevelResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("anyTopLevelResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("anyTopLevelResource")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) contextValidateBuckets(ctx context.Context, formats strfmt.Registry) error {

	if m.Buckets != nil {
		if err := m.Buckets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buckets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buckets")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.Policies != nil {
		if err := m.Policies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) contextValidateProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.Proxy != nil {
		if err := m.Proxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePermissions) contextValidateTenants(ctx context.Context, formats strfmt.Registry) error {

	if m.Tenants != nil {
		if err := m.Tenants.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenants")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenants")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcePermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcePermissions) UnmarshalBinary(b []byte) error {
	var res ResourcePermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BucketItem bucket item
//
// swagger:model BucketItem
type BucketItem struct {

	// The identifier of the bucket this items belongs to. This cannot be changed after the item is created.
	// Required: true
	BucketIdentifier *string `json:"bucketIdentifier"`

	// The name of the bucket this items belongs to.
	// Read Only: true
	BucketName string `json:"bucketName,omitempty"`

	// The timestamp of when the item was created, as milliseconds since epoch.
	// Read Only: true
	// Minimum: 1
	CreatedTimestamp int64 `json:"createdTimestamp,omitempty"`

	// A description of the item.
	Description string `json:"description,omitempty"`

	// An ID to uniquely identify this object.
	// Read Only: true
	Identifier string `json:"identifier,omitempty"`

	// An WebLink to this entity.
	// Read Only: true
	Link *JaxbLink `json:"link,omitempty"`

	// The timestamp of when the item was last modified, as milliseconds since epoch.
	// Read Only: true
	// Minimum: 1
	ModifiedTimestamp int64 `json:"modifiedTimestamp,omitempty"`

	// The name of the item.
	// Required: true
	Name *string `json:"name"`

	// The access that the current user has to the bucket containing this item.
	// Read Only: true
	Permissions *Permissions `json:"permissions,omitempty"`

	// The type of item.
	// Required: true
	// Enum: [Flow Bundle]
	Type *string `json:"type"`
}

// Validate validates this bucket item
func (m *BucketItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BucketItem) validateBucketIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("bucketIdentifier", "body", m.BucketIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) validateCreatedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTimestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("createdTimestamp", "body", m.CreatedTimestamp, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *BucketItem) validateModifiedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedTimestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("modifiedTimestamp", "body", m.ModifiedTimestamp, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

var bucketItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Flow","Bundle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bucketItemTypeTypePropEnum = append(bucketItemTypeTypePropEnum, v)
	}
}

const (

	// BucketItemTypeFlow captures enum value "Flow"
	BucketItemTypeFlow string = "Flow"

	// BucketItemTypeBundle captures enum value "Bundle"
	BucketItemTypeBundle string = "Bundle"
)

// prop value enum
func (m *BucketItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bucketItemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BucketItem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bucket item based on the context it is used
func (m *BucketItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucketName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BucketItem) contextValidateBucketName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "bucketName", "body", string(m.BucketName)); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) contextValidateCreatedTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdTimestamp", "body", int64(m.CreatedTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "identifier", "body", string(m.Identifier)); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {

		if swag.IsZero(m.Link) { // not required
			return nil
		}

		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *BucketItem) contextValidateModifiedTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedTimestamp", "body", int64(m.ModifiedTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *BucketItem) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.Permissions != nil {

		if swag.IsZero(m.Permissions) { // not required
			return nil
		}

		if err := m.Permissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BucketItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BucketItem) UnmarshalBinary(b []byte) error {
	var res BucketItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

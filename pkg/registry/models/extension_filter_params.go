// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionFilterParams extension filter params
//
// swagger:model ExtensionFilterParams
type ExtensionFilterParams struct {

	// The type of bundle
	// Enum: [NIFI_NAR MINIFI_CPP]
	BundleType string `json:"bundleType,omitempty"`

	// The type of extension
	// Enum: [PROCESSOR CONTROLLER_SERVICE REPORTING_TASK]
	ExtensionType string `json:"extensionType,omitempty"`

	// The tags
	// Unique: true
	Tags []string `json:"tags"`
}

// Validate validates this extension filter params
func (m *ExtensionFilterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var extensionFilterParamsTypeBundleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NIFI_NAR","MINIFI_CPP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionFilterParamsTypeBundleTypePropEnum = append(extensionFilterParamsTypeBundleTypePropEnum, v)
	}
}

const (

	// ExtensionFilterParamsBundleTypeNIFINAR captures enum value "NIFI_NAR"
	ExtensionFilterParamsBundleTypeNIFINAR string = "NIFI_NAR"

	// ExtensionFilterParamsBundleTypeMINIFICPP captures enum value "MINIFI_CPP"
	ExtensionFilterParamsBundleTypeMINIFICPP string = "MINIFI_CPP"
)

// prop value enum
func (m *ExtensionFilterParams) validateBundleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionFilterParamsTypeBundleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionFilterParams) validateBundleType(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBundleTypeEnum("bundleType", "body", m.BundleType); err != nil {
		return err
	}

	return nil
}

var extensionFilterParamsTypeExtensionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSOR","CONTROLLER_SERVICE","REPORTING_TASK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionFilterParamsTypeExtensionTypePropEnum = append(extensionFilterParamsTypeExtensionTypePropEnum, v)
	}
}

const (

	// ExtensionFilterParamsExtensionTypePROCESSOR captures enum value "PROCESSOR"
	ExtensionFilterParamsExtensionTypePROCESSOR string = "PROCESSOR"

	// ExtensionFilterParamsExtensionTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	ExtensionFilterParamsExtensionTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// ExtensionFilterParamsExtensionTypeREPORTINGTASK captures enum value "REPORTING_TASK"
	ExtensionFilterParamsExtensionTypeREPORTINGTASK string = "REPORTING_TASK"
)

// prop value enum
func (m *ExtensionFilterParams) validateExtensionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionFilterParamsTypeExtensionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionFilterParams) validateExtensionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateExtensionTypeEnum("extensionType", "body", m.ExtensionType); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFilterParams) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this extension filter params based on context it is used
func (m *ExtensionFilterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionFilterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionFilterParams) UnmarshalBinary(b []byte) error {
	var res ExtensionFilterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

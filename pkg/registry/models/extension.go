// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Extension extension
//
// swagger:model Extension
type Extension struct {

	// The deprecation notice of the extension
	DeprecationNotice *DeprecationNotice `json:"deprecationNotice,omitempty"`

	// The description of the extension
	Description string `json:"description,omitempty"`

	// The dynamic properties of the extension
	DynamicProperties []*DynamicProperty `json:"dynamicProperties" xml:"dynamicProperties"`

	// The dynamic relationships of the extension
	DynamicRelationship *DynamicRelationship `json:"dynamicRelationship,omitempty"`

	// The input requirement of the extension
	// Enum: [INPUT_REQUIRED INPUT_ALLOWED INPUT_FORBIDDEN]
	InputRequirement string `json:"inputRequirement,omitempty"`

	// The name of the extension
	Name string `json:"name,omitempty"`

	// The properties of the extension
	Properties []*Property `json:"properties" xml:"properties"`

	// The service APIs provided by this extension
	ProvidedServiceAPIs []*ProvidedServiceAPI `json:"providedServiceAPIs" xml:"providedServiceAPIs"`

	// The attributes read from flow files by the extension
	ReadsAttributes []*Attribute `json:"readsAttributes" xml:"readsAttributes"`

	// The relationships of the extension
	Relationships []*Relationship `json:"relationships" xml:"relationships"`

	// The restrictions of the extension
	Restricted *Restricted `json:"restricted,omitempty"`

	// The names of other extensions to see
	SeeAlso []string `json:"seeAlso" xml:"seeAlso"`

	// The information about how the extension stores state
	Stateful *Stateful `json:"stateful,omitempty"`

	// The resource considerations of the extension
	SystemResourceConsiderations []*SystemResourceConsideration `json:"systemResourceConsiderations" xml:"systemResourceConsiderations"`

	// The tags of the extension
	Tags []string `json:"tags" xml:"tags"`

	// The type of the extension
	// Enum: [PROCESSOR CONTROLLER_SERVICE REPORTING_TASK]
	Type string `json:"type,omitempty"`

	// The attributes written to flow files by the extension
	WritesAttributes []*Attribute `json:"writesAttributes" xml:"writesAttributes"`
}

// Validate validates this extension
func (m *Extension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeprecationNotice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDynamicProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDynamicRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputRequirement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedServiceAPIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadsAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestricted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateful(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemResourceConsiderations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWritesAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Extension) validateDeprecationNotice(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecationNotice) { // not required
		return nil
	}

	if m.DeprecationNotice != nil {
		if err := m.DeprecationNotice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecationNotice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecationNotice")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) validateDynamicProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.DynamicProperties); i++ {
		if swag.IsZero(m.DynamicProperties[i]) { // not required
			continue
		}

		if m.DynamicProperties[i] != nil {
			if err := m.DynamicProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dynamicProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dynamicProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) validateDynamicRelationship(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicRelationship) { // not required
		return nil
	}

	if m.DynamicRelationship != nil {
		if err := m.DynamicRelationship.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicRelationship")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynamicRelationship")
			}
			return err
		}
	}

	return nil
}

var extensionTypeInputRequirementPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPUT_REQUIRED","INPUT_ALLOWED","INPUT_FORBIDDEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionTypeInputRequirementPropEnum = append(extensionTypeInputRequirementPropEnum, v)
	}
}

const (

	// ExtensionInputRequirementINPUTREQUIRED captures enum value "INPUT_REQUIRED"
	ExtensionInputRequirementINPUTREQUIRED string = "INPUT_REQUIRED"

	// ExtensionInputRequirementINPUTALLOWED captures enum value "INPUT_ALLOWED"
	ExtensionInputRequirementINPUTALLOWED string = "INPUT_ALLOWED"

	// ExtensionInputRequirementINPUTFORBIDDEN captures enum value "INPUT_FORBIDDEN"
	ExtensionInputRequirementINPUTFORBIDDEN string = "INPUT_FORBIDDEN"
)

// prop value enum
func (m *Extension) validateInputRequirementEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionTypeInputRequirementPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Extension) validateInputRequirement(formats strfmt.Registry) error {
	if swag.IsZero(m.InputRequirement) { // not required
		return nil
	}

	// value enum
	if err := m.validateInputRequirementEnum("inputRequirement", "body", m.InputRequirement); err != nil {
		return err
	}

	return nil
}

func (m *Extension) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) validateProvidedServiceAPIs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedServiceAPIs) { // not required
		return nil
	}

	for i := 0; i < len(m.ProvidedServiceAPIs); i++ {
		if swag.IsZero(m.ProvidedServiceAPIs[i]) { // not required
			continue
		}

		if m.ProvidedServiceAPIs[i] != nil {
			if err := m.ProvidedServiceAPIs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) validateReadsAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadsAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.ReadsAttributes); i++ {
		if swag.IsZero(m.ReadsAttributes[i]) { // not required
			continue
		}

		if m.ReadsAttributes[i] != nil {
			if err := m.ReadsAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readsAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readsAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	for i := 0; i < len(m.Relationships); i++ {
		if swag.IsZero(m.Relationships[i]) { // not required
			continue
		}

		if m.Relationships[i] != nil {
			if err := m.Relationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) validateRestricted(formats strfmt.Registry) error {
	if swag.IsZero(m.Restricted) { // not required
		return nil
	}

	if m.Restricted != nil {
		if err := m.Restricted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restricted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restricted")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) validateStateful(formats strfmt.Registry) error {
	if swag.IsZero(m.Stateful) { // not required
		return nil
	}

	if m.Stateful != nil {
		if err := m.Stateful.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stateful")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stateful")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) validateSystemResourceConsiderations(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemResourceConsiderations) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemResourceConsiderations); i++ {
		if swag.IsZero(m.SystemResourceConsiderations[i]) { // not required
			continue
		}

		if m.SystemResourceConsiderations[i] != nil {
			if err := m.SystemResourceConsiderations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemResourceConsiderations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemResourceConsiderations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var extensionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSOR","CONTROLLER_SERVICE","REPORTING_TASK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionTypeTypePropEnum = append(extensionTypeTypePropEnum, v)
	}
}

const (

	// ExtensionTypePROCESSOR captures enum value "PROCESSOR"
	ExtensionTypePROCESSOR string = "PROCESSOR"

	// ExtensionTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	ExtensionTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// ExtensionTypeREPORTINGTASK captures enum value "REPORTING_TASK"
	ExtensionTypeREPORTINGTASK string = "REPORTING_TASK"
)

// prop value enum
func (m *Extension) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Extension) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Extension) validateWritesAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.WritesAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.WritesAttributes); i++ {
		if swag.IsZero(m.WritesAttributes[i]) { // not required
			continue
		}

		if m.WritesAttributes[i] != nil {
			if err := m.WritesAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writesAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writesAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this extension based on the context it is used
func (m *Extension) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeprecationNotice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDynamicProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDynamicRelationship(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedServiceAPIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadsAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestricted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateful(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemResourceConsiderations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWritesAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Extension) contextValidateDeprecationNotice(ctx context.Context, formats strfmt.Registry) error {

	if m.DeprecationNotice != nil {
		if err := m.DeprecationNotice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecationNotice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecationNotice")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) contextValidateDynamicProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DynamicProperties); i++ {

		if m.DynamicProperties[i] != nil {
			if err := m.DynamicProperties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dynamicProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dynamicProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) contextValidateDynamicRelationship(ctx context.Context, formats strfmt.Registry) error {

	if m.DynamicRelationship != nil {
		if err := m.DynamicRelationship.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicRelationship")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynamicRelationship")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Properties); i++ {

		if m.Properties[i] != nil {
			if err := m.Properties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) contextValidateProvidedServiceAPIs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedServiceAPIs); i++ {

		if m.ProvidedServiceAPIs[i] != nil {
			if err := m.ProvidedServiceAPIs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) contextValidateReadsAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReadsAttributes); i++ {

		if m.ReadsAttributes[i] != nil {
			if err := m.ReadsAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readsAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readsAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Relationships); i++ {

		if m.Relationships[i] != nil {
			if err := m.Relationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) contextValidateRestricted(ctx context.Context, formats strfmt.Registry) error {

	if m.Restricted != nil {
		if err := m.Restricted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restricted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restricted")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) contextValidateStateful(ctx context.Context, formats strfmt.Registry) error {

	if m.Stateful != nil {
		if err := m.Stateful.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stateful")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stateful")
			}
			return err
		}
	}

	return nil
}

func (m *Extension) contextValidateSystemResourceConsiderations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemResourceConsiderations); i++ {

		if m.SystemResourceConsiderations[i] != nil {
			if err := m.SystemResourceConsiderations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemResourceConsiderations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemResourceConsiderations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Extension) contextValidateWritesAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WritesAttributes); i++ {

		if m.WritesAttributes[i] != nil {
			if err := m.WritesAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writesAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writesAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Extension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Extension) UnmarshalBinary(b []byte) error {
	var res Extension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

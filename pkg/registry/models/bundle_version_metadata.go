// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundleVersionMetadata bundle version metadata
//
// swagger:model BundleVersionMetadata
type BundleVersionMetadata struct {

	// artifact Id
	ArtifactID string `json:"artifactId,omitempty"`

	// The identity that created this version
	Author string `json:"author,omitempty"`

	// The id of the bucket the extension bundle belongs to
	// Required: true
	BucketID *string `json:"bucketId"`

	// The build information about this version
	// Required: true
	BuildInfo *BuildInfo `json:"buildInfo"`

	// The id of the extension bundle this version is for
	BundleID string `json:"bundleId,omitempty"`

	// The size of the binary content for this version in bytes
	// Required: true
	// Minimum: 0
	ContentSize *int64 `json:"contentSize"`

	// The description for this version
	Description string `json:"description,omitempty"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// The id of this version of the extension bundle
	ID string `json:"id,omitempty"`

	// An WebLink to this entity.
	// Read Only: true
	Link *JaxbLink `json:"link,omitempty"`

	// The hex representation of the SHA-256 digest of the binary content for this version
	Sha256 string `json:"sha256,omitempty"`

	// Whether or not the client supplied a SHA-256 when uploading the bundle
	// Required: true
	Sha256Supplied *bool `json:"sha256Supplied"`

	// The version of the system API that this bundle version was built against
	SystemAPIVersion string `json:"systemApiVersion,omitempty"`

	// The timestamp of the create date of this version
	// Minimum: 1
	Timestamp int64 `json:"timestamp,omitempty"`

	// The version of the extension bundle
	Version string `json:"version,omitempty"`
}

// Validate validates this bundle version metadata
func (m *BundleVersionMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSha256Supplied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleVersionMetadata) validateBucketID(formats strfmt.Registry) error {

	if err := validate.Required("bucketId", "body", m.BucketID); err != nil {
		return err
	}

	return nil
}

func (m *BundleVersionMetadata) validateBuildInfo(formats strfmt.Registry) error {

	if err := validate.Required("buildInfo", "body", m.BuildInfo); err != nil {
		return err
	}

	if m.BuildInfo != nil {
		if err := m.BuildInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildInfo")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersionMetadata) validateContentSize(formats strfmt.Registry) error {

	if err := validate.Required("contentSize", "body", m.ContentSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("contentSize", "body", *m.ContentSize, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BundleVersionMetadata) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersionMetadata) validateSha256Supplied(formats strfmt.Registry) error {

	if err := validate.Required("sha256Supplied", "body", m.Sha256Supplied); err != nil {
		return err
	}

	return nil
}

func (m *BundleVersionMetadata) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("timestamp", "body", m.Timestamp, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bundle version metadata based on the context it is used
func (m *BundleVersionMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleVersionMetadata) contextValidateBuildInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildInfo != nil {

		if err := m.BuildInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildInfo")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersionMetadata) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {

		if swag.IsZero(m.Link) { // not required
			return nil
		}

		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BundleVersionMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleVersionMetadata) UnmarshalBinary(b []byte) error {
	var res BundleVersionMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

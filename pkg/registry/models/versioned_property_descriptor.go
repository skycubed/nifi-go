// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VersionedPropertyDescriptor versioned property descriptor
//
// swagger:model VersionedPropertyDescriptor
type VersionedPropertyDescriptor struct {

	// The display name of the property
	DisplayName string `json:"displayName,omitempty"`

	// Whether or not the property provides the identifier of a Controller Service
	IdentifiesControllerService bool `json:"identifiesControllerService,omitempty"`

	// The name of the property
	Name string `json:"name,omitempty"`

	// Returns the Resource Definition that defines which type(s) of resource(s) this property references, if any
	ResourceDefinition *VersionedResourceDefinition `json:"resourceDefinition,omitempty"`

	// Whether or not the property is considered sensitive
	Sensitive bool `json:"sensitive,omitempty"`
}

// Validate validates this versioned property descriptor
func (m *VersionedPropertyDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedPropertyDescriptor) validateResourceDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceDefinition) { // not required
		return nil
	}

	if m.ResourceDefinition != nil {
		if err := m.ResourceDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceDefinition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceDefinition")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this versioned property descriptor based on the context it is used
func (m *VersionedPropertyDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedPropertyDescriptor) contextValidateResourceDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceDefinition != nil {
		if err := m.ResourceDefinition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceDefinition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceDefinition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedPropertyDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedPropertyDescriptor) UnmarshalBinary(b []byte) error {
	var res VersionedPropertyDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

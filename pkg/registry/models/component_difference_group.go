// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComponentDifferenceGroup component difference group
//
// swagger:model ComponentDifferenceGroup
type ComponentDifferenceGroup struct {

	// The id of the component whose changes are grouped together.
	ComponentID string `json:"componentId,omitempty"`

	// The name of the component whose changes are grouped together.
	ComponentName string `json:"componentName,omitempty"`

	// The type of component these changes relate to.
	ComponentType string `json:"componentType,omitempty"`

	// The list of changes related to this component between the 2 versions.
	// Unique: true
	Differences []*ComponentDifference `json:"differences"`

	// The process group id for this component.
	ProcessGroupID string `json:"processGroupId,omitempty"`
}

// Validate validates this component difference group
func (m *ComponentDifferenceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDifferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentDifferenceGroup) validateDifferences(formats strfmt.Registry) error {
	if swag.IsZero(m.Differences) { // not required
		return nil
	}

	if err := validate.UniqueItems("differences", "body", m.Differences); err != nil {
		return err
	}

	for i := 0; i < len(m.Differences); i++ {
		if swag.IsZero(m.Differences[i]) { // not required
			continue
		}

		if m.Differences[i] != nil {
			if err := m.Differences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("differences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("differences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this component difference group based on the context it is used
func (m *ComponentDifferenceGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDifferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentDifferenceGroup) contextValidateDifferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Differences); i++ {

		if m.Differences[i] != nil {

			if swag.IsZero(m.Differences[i]) { // not required
				return nil
			}

			if err := m.Differences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("differences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("differences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComponentDifferenceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentDifferenceGroup) UnmarshalBinary(b []byte) error {
	var res ComponentDifferenceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundleVersion bundle version
//
// swagger:model BundleVersion
type BundleVersion struct {

	// The bucket that the extension bundle belongs to
	Bucket *Bucket `json:"bucket,omitempty"`

	// The bundle this version is for
	// Read Only: true
	Bundle *ExtensionBundle `json:"bundle,omitempty"`

	// The set of other bundle versions that this version is dependent on
	// Read Only: true
	// Unique: true
	Dependencies []*BundleVersionDependency `json:"dependencies"`

	// filename
	Filename string `json:"filename,omitempty"`

	// An WebLink to this entity.
	// Read Only: true
	Link *JaxbLink `json:"link,omitempty"`

	// The metadata about this version of the extension bundle
	// Required: true
	VersionMetadata *BundleVersionMetadata `json:"versionMetadata"`
}

// Validate validates this bundle version
func (m *BundleVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleVersion) validateBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.Bucket) { // not required
		return nil
	}

	if m.Bucket != nil {
		if err := m.Bucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersion) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersion) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	if err := validate.UniqueItems("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BundleVersion) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersion) validateVersionMetadata(formats strfmt.Registry) error {

	if err := validate.Required("versionMetadata", "body", m.VersionMetadata); err != nil {
		return err
	}

	if m.VersionMetadata != nil {
		if err := m.VersionMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bundle version based on the context it is used
func (m *BundleVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleVersion) contextValidateBucket(ctx context.Context, formats strfmt.Registry) error {

	if m.Bucket != nil {
		if err := m.Bucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersion) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {
		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersion) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dependencies", "body", []*BundleVersionDependency(m.Dependencies)); err != nil {
		return err
	}

	for i := 0; i < len(m.Dependencies); i++ {

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BundleVersion) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {
		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *BundleVersion) contextValidateVersionMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionMetadata != nil {
		if err := m.VersionMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BundleVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleVersion) UnmarshalBinary(b []byte) error {
	var res BundleVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

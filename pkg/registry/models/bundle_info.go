// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundleInfo bundle info
//
// swagger:model BundleInfo
type BundleInfo struct {

	// The artifact id of the bundle
	ArtifactID string `json:"artifactId,omitempty"`

	// The id of the bucket where the bundle is located
	BucketID string `json:"bucketId,omitempty"`

	// The name of the bucket where the bundle is located
	BucketName string `json:"bucketName,omitempty"`

	// The id of the bundle
	BundleID string `json:"bundleId,omitempty"`

	// The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)
	// Enum: [NIFI_NAR MINIFI_CPP]
	BundleType string `json:"bundleType,omitempty"`

	// The group id of the bundle
	GroupID string `json:"groupId,omitempty"`

	// The version of the system API the bundle was built against
	SystemAPIVersion string `json:"systemApiVersion,omitempty"`

	// The version of the bundle
	Version string `json:"version,omitempty"`
}

// Validate validates this bundle info
func (m *BundleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bundleInfoTypeBundleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NIFI_NAR","MINIFI_CPP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bundleInfoTypeBundleTypePropEnum = append(bundleInfoTypeBundleTypePropEnum, v)
	}
}

const (

	// BundleInfoBundleTypeNIFINAR captures enum value "NIFI_NAR"
	BundleInfoBundleTypeNIFINAR string = "NIFI_NAR"

	// BundleInfoBundleTypeMINIFICPP captures enum value "MINIFI_CPP"
	BundleInfoBundleTypeMINIFICPP string = "MINIFI_CPP"
)

// prop value enum
func (m *BundleInfo) validateBundleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bundleInfoTypeBundleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BundleInfo) validateBundleType(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBundleTypeEnum("bundleType", "body", m.BundleType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bundle info based on context it is used
func (m *BundleInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BundleInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleInfo) UnmarshalBinary(b []byte) error {
	var res BundleInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

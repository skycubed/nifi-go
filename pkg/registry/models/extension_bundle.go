// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionBundle extension bundle
//
// swagger:model ExtensionBundle
type ExtensionBundle struct {

	// The artifact id of the extension bundle
	ArtifactID string `json:"artifactId,omitempty"`

	// The identifier of the bucket this items belongs to. This cannot be changed after the item is created.
	// Required: true
	BucketIdentifier *string `json:"bucketIdentifier"`

	// The name of the bucket this items belongs to.
	// Read Only: true
	BucketName string `json:"bucketName,omitempty"`

	// The type of the extension bundle
	// Required: true
	// Enum: [NIFI_NAR MINIFI_CPP]
	BundleType *string `json:"bundleType"`

	// The timestamp of when the item was created, as milliseconds since epoch.
	// Read Only: true
	// Minimum: 1
	CreatedTimestamp int64 `json:"createdTimestamp,omitempty"`

	// A description of the item.
	Description string `json:"description,omitempty"`

	// The group id of the extension bundle
	GroupID string `json:"groupId,omitempty"`

	// An ID to uniquely identify this object.
	// Read Only: true
	Identifier string `json:"identifier,omitempty"`

	// An WebLink to this entity.
	// Read Only: true
	Link *JaxbLink `json:"link,omitempty"`

	// The timestamp of when the item was last modified, as milliseconds since epoch.
	// Read Only: true
	// Minimum: 1
	ModifiedTimestamp int64 `json:"modifiedTimestamp,omitempty"`

	// The name of the item.
	// Required: true
	Name *string `json:"name"`

	// The access that the current user has to the bucket containing this item.
	// Read Only: true
	Permissions *Permissions `json:"permissions,omitempty"`

	// The type of item.
	// Required: true
	// Enum: [Flow Bundle]
	Type *string `json:"type"`

	// The number of versions of this extension bundle.
	// Read Only: true
	// Minimum: 0
	VersionCount int64 `json:"versionCount,omitempty"`
}

// Validate validates this extension bundle
func (m *ExtensionBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionBundle) validateBucketIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("bucketIdentifier", "body", m.BucketIdentifier); err != nil {
		return err
	}

	return nil
}

var extensionBundleTypeBundleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NIFI_NAR","MINIFI_CPP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionBundleTypeBundleTypePropEnum = append(extensionBundleTypeBundleTypePropEnum, v)
	}
}

const (

	// ExtensionBundleBundleTypeNIFINAR captures enum value "NIFI_NAR"
	ExtensionBundleBundleTypeNIFINAR string = "NIFI_NAR"

	// ExtensionBundleBundleTypeMINIFICPP captures enum value "MINIFI_CPP"
	ExtensionBundleBundleTypeMINIFICPP string = "MINIFI_CPP"
)

// prop value enum
func (m *ExtensionBundle) validateBundleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionBundleTypeBundleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionBundle) validateBundleType(formats strfmt.Registry) error {

	if err := validate.Required("bundleType", "body", m.BundleType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBundleTypeEnum("bundleType", "body", *m.BundleType); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) validateCreatedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTimestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("createdTimestamp", "body", m.CreatedTimestamp, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionBundle) validateModifiedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedTimestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("modifiedTimestamp", "body", m.ModifiedTimestamp, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

var extensionBundleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Flow","Bundle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionBundleTypeTypePropEnum = append(extensionBundleTypeTypePropEnum, v)
	}
}

const (

	// ExtensionBundleTypeFlow captures enum value "Flow"
	ExtensionBundleTypeFlow string = "Flow"

	// ExtensionBundleTypeBundle captures enum value "Bundle"
	ExtensionBundleTypeBundle string = "Bundle"
)

// prop value enum
func (m *ExtensionBundle) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionBundleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionBundle) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) validateVersionCount(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("versionCount", "body", m.VersionCount, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this extension bundle based on the context it is used
func (m *ExtensionBundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucketName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionBundle) contextValidateBucketName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "bucketName", "body", string(m.BucketName)); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) contextValidateCreatedTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdTimestamp", "body", int64(m.CreatedTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "identifier", "body", string(m.Identifier)); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {

		if swag.IsZero(m.Link) { // not required
			return nil
		}

		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionBundle) contextValidateModifiedTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modifiedTimestamp", "body", int64(m.ModifiedTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionBundle) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.Permissions != nil {

		if swag.IsZero(m.Permissions) { // not required
			return nil
		}

		if err := m.Permissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionBundle) contextValidateVersionCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "versionCount", "body", int64(m.VersionCount)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionBundle) UnmarshalBinary(b []byte) error {
	var res ExtensionBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

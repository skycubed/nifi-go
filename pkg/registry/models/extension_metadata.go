// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionMetadata extension metadata
//
// swagger:model ExtensionMetadata
type ExtensionMetadata struct {

	// The information for the bundle where this extension is located
	BundleInfo *BundleInfo `json:"bundleInfo,omitempty"`

	// The deprecation notice of the extension
	DeprecationNotice *DeprecationNotice `json:"deprecationNotice,omitempty"`

	// The description of the extension
	Description string `json:"description,omitempty"`

	// The display name of the extension
	DisplayName string `json:"displayName,omitempty"`

	// Whether or not the extension has additional detail documentation
	HasAdditionalDetails bool `json:"hasAdditionalDetails,omitempty"`

	// An WebLink to this entity.
	// Read Only: true
	Link *JaxbLink `json:"link,omitempty"`

	// A WebLink to the documentation for this extension.
	// Read Only: true
	LinkDocs *JaxbLink `json:"linkDocs,omitempty"`

	// The name of the extension
	Name string `json:"name,omitempty"`

	// The service APIs provided by the extension
	ProvidedServiceAPIs []*ProvidedServiceAPI `json:"providedServiceAPIs"`

	// The restrictions of the extension
	Restricted *Restricted `json:"restricted,omitempty"`

	// The tags of the extension
	Tags []string `json:"tags"`

	// The type of the extension
	// Enum: [PROCESSOR CONTROLLER_SERVICE REPORTING_TASK]
	Type string `json:"type,omitempty"`
}

// Validate validates this extension metadata
func (m *ExtensionMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecationNotice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkDocs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedServiceAPIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestricted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionMetadata) validateBundleInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleInfo) { // not required
		return nil
	}

	if m.BundleInfo != nil {
		if err := m.BundleInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundleInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundleInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) validateDeprecationNotice(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecationNotice) { // not required
		return nil
	}

	if m.DeprecationNotice != nil {
		if err := m.DeprecationNotice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecationNotice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecationNotice")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) validateLinkDocs(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkDocs) { // not required
		return nil
	}

	if m.LinkDocs != nil {
		if err := m.LinkDocs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkDocs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linkDocs")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) validateProvidedServiceAPIs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedServiceAPIs) { // not required
		return nil
	}

	for i := 0; i < len(m.ProvidedServiceAPIs); i++ {
		if swag.IsZero(m.ProvidedServiceAPIs[i]) { // not required
			continue
		}

		if m.ProvidedServiceAPIs[i] != nil {
			if err := m.ProvidedServiceAPIs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtensionMetadata) validateRestricted(formats strfmt.Registry) error {
	if swag.IsZero(m.Restricted) { // not required
		return nil
	}

	if m.Restricted != nil {
		if err := m.Restricted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restricted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restricted")
			}
			return err
		}
	}

	return nil
}

var extensionMetadataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSOR","CONTROLLER_SERVICE","REPORTING_TASK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extensionMetadataTypeTypePropEnum = append(extensionMetadataTypeTypePropEnum, v)
	}
}

const (

	// ExtensionMetadataTypePROCESSOR captures enum value "PROCESSOR"
	ExtensionMetadataTypePROCESSOR string = "PROCESSOR"

	// ExtensionMetadataTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	ExtensionMetadataTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// ExtensionMetadataTypeREPORTINGTASK captures enum value "REPORTING_TASK"
	ExtensionMetadataTypeREPORTINGTASK string = "REPORTING_TASK"
)

// prop value enum
func (m *ExtensionMetadata) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extensionMetadataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionMetadata) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this extension metadata based on the context it is used
func (m *ExtensionMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundleInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeprecationNotice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkDocs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedServiceAPIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestricted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionMetadata) contextValidateBundleInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BundleInfo != nil {

		if swag.IsZero(m.BundleInfo) { // not required
			return nil
		}

		if err := m.BundleInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundleInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundleInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) contextValidateDeprecationNotice(ctx context.Context, formats strfmt.Registry) error {

	if m.DeprecationNotice != nil {

		if swag.IsZero(m.DeprecationNotice) { // not required
			return nil
		}

		if err := m.DeprecationNotice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecationNotice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecationNotice")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {

		if swag.IsZero(m.Link) { // not required
			return nil
		}

		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) contextValidateLinkDocs(ctx context.Context, formats strfmt.Registry) error {

	if m.LinkDocs != nil {

		if swag.IsZero(m.LinkDocs) { // not required
			return nil
		}

		if err := m.LinkDocs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkDocs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linkDocs")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionMetadata) contextValidateProvidedServiceAPIs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedServiceAPIs); i++ {

		if m.ProvidedServiceAPIs[i] != nil {

			if swag.IsZero(m.ProvidedServiceAPIs[i]) { // not required
				return nil
			}

			if err := m.ProvidedServiceAPIs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providedServiceAPIs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtensionMetadata) contextValidateRestricted(ctx context.Context, formats strfmt.Registry) error {

	if m.Restricted != nil {

		if swag.IsZero(m.Restricted) { // not required
			return nil
		}

		if err := m.Restricted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restricted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restricted")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionMetadata) UnmarshalBinary(b []byte) error {
	var res ExtensionMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

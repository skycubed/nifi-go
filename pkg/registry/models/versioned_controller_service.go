// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedControllerService versioned controller service
//
// swagger:model VersionedControllerService
type VersionedControllerService struct {

	// The annotation for the controller service. This is how the custom UI relays configuration to the controller service.
	AnnotationData string `json:"annotationData,omitempty"`

	// The level at which the controller service will report bulletins.
	BulletinLevel string `json:"bulletinLevel,omitempty"`

	// Information about the bundle from which the component came
	Bundle *Bundle `json:"bundle,omitempty"`

	// The user-supplied comments for the component
	Comments string `json:"comments,omitempty"`

	// component type
	// Enum: [CONNECTION PROCESSOR PROCESS_GROUP REMOTE_PROCESS_GROUP INPUT_PORT OUTPUT_PORT REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT FUNNEL LABEL CONTROLLER_SERVICE REPORTING_TASK PARAMETER_CONTEXT PARAMETER_PROVIDER TEMPLATE FLOW_REGISTRY_CLIENT]
	ComponentType string `json:"componentType,omitempty"`

	// Lists the APIs this Controller Service implements.
	ControllerServiceApis []*ControllerServiceAPI `json:"controllerServiceApis"`

	// The ID of the Process Group that this component belongs to
	GroupIdentifier string `json:"groupIdentifier,omitempty"`

	// The component's unique identifier
	Identifier string `json:"identifier,omitempty"`

	// The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
	InstanceIdentifier string `json:"instanceIdentifier,omitempty"`

	// The component's name
	Name string `json:"name,omitempty"`

	// The component's position on the graph
	Position *Position `json:"position,omitempty"`

	// The properties for the component. Properties whose value is not set will only contain the property name.
	Properties map[string]string `json:"properties,omitempty"`

	// The property descriptors for the component.
	PropertyDescriptors map[string]VersionedPropertyDescriptor `json:"propertyDescriptors,omitempty"`

	// The ScheduledState denoting whether the Controller Service is ENABLED or DISABLED
	// Enum: [ENABLED DISABLED RUNNING]
	ScheduledState string `json:"scheduledState,omitempty"`

	// The type of the extension component
	Type string `json:"type,omitempty"`
}

// Validate validates this versioned controller service
func (m *VersionedControllerService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerServiceApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedControllerService) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

var versionedControllerServiceTypeComponentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTION","PROCESSOR","PROCESS_GROUP","REMOTE_PROCESS_GROUP","INPUT_PORT","OUTPUT_PORT","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT","FUNNEL","LABEL","CONTROLLER_SERVICE","REPORTING_TASK","PARAMETER_CONTEXT","PARAMETER_PROVIDER","TEMPLATE","FLOW_REGISTRY_CLIENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedControllerServiceTypeComponentTypePropEnum = append(versionedControllerServiceTypeComponentTypePropEnum, v)
	}
}

const (

	// VersionedControllerServiceComponentTypeCONNECTION captures enum value "CONNECTION"
	VersionedControllerServiceComponentTypeCONNECTION string = "CONNECTION"

	// VersionedControllerServiceComponentTypePROCESSOR captures enum value "PROCESSOR"
	VersionedControllerServiceComponentTypePROCESSOR string = "PROCESSOR"

	// VersionedControllerServiceComponentTypePROCESSGROUP captures enum value "PROCESS_GROUP"
	VersionedControllerServiceComponentTypePROCESSGROUP string = "PROCESS_GROUP"

	// VersionedControllerServiceComponentTypeREMOTEPROCESSGROUP captures enum value "REMOTE_PROCESS_GROUP"
	VersionedControllerServiceComponentTypeREMOTEPROCESSGROUP string = "REMOTE_PROCESS_GROUP"

	// VersionedControllerServiceComponentTypeINPUTPORT captures enum value "INPUT_PORT"
	VersionedControllerServiceComponentTypeINPUTPORT string = "INPUT_PORT"

	// VersionedControllerServiceComponentTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	VersionedControllerServiceComponentTypeOUTPUTPORT string = "OUTPUT_PORT"

	// VersionedControllerServiceComponentTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	VersionedControllerServiceComponentTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// VersionedControllerServiceComponentTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	VersionedControllerServiceComponentTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"

	// VersionedControllerServiceComponentTypeFUNNEL captures enum value "FUNNEL"
	VersionedControllerServiceComponentTypeFUNNEL string = "FUNNEL"

	// VersionedControllerServiceComponentTypeLABEL captures enum value "LABEL"
	VersionedControllerServiceComponentTypeLABEL string = "LABEL"

	// VersionedControllerServiceComponentTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	VersionedControllerServiceComponentTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// VersionedControllerServiceComponentTypeREPORTINGTASK captures enum value "REPORTING_TASK"
	VersionedControllerServiceComponentTypeREPORTINGTASK string = "REPORTING_TASK"

	// VersionedControllerServiceComponentTypePARAMETERCONTEXT captures enum value "PARAMETER_CONTEXT"
	VersionedControllerServiceComponentTypePARAMETERCONTEXT string = "PARAMETER_CONTEXT"

	// VersionedControllerServiceComponentTypePARAMETERPROVIDER captures enum value "PARAMETER_PROVIDER"
	VersionedControllerServiceComponentTypePARAMETERPROVIDER string = "PARAMETER_PROVIDER"

	// VersionedControllerServiceComponentTypeTEMPLATE captures enum value "TEMPLATE"
	VersionedControllerServiceComponentTypeTEMPLATE string = "TEMPLATE"

	// VersionedControllerServiceComponentTypeFLOWREGISTRYCLIENT captures enum value "FLOW_REGISTRY_CLIENT"
	VersionedControllerServiceComponentTypeFLOWREGISTRYCLIENT string = "FLOW_REGISTRY_CLIENT"
)

// prop value enum
func (m *VersionedControllerService) validateComponentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedControllerServiceTypeComponentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedControllerService) validateComponentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateComponentTypeEnum("componentType", "body", m.ComponentType); err != nil {
		return err
	}

	return nil
}

func (m *VersionedControllerService) validateControllerServiceApis(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerServiceApis) { // not required
		return nil
	}

	for i := 0; i < len(m.ControllerServiceApis); i++ {
		if swag.IsZero(m.ControllerServiceApis[i]) { // not required
			continue
		}

		if m.ControllerServiceApis[i] != nil {
			if err := m.ControllerServiceApis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedControllerService) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedControllerService) validatePropertyDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.PropertyDescriptors) { // not required
		return nil
	}

	for k := range m.PropertyDescriptors {

		if err := validate.Required("propertyDescriptors"+"."+k, "body", m.PropertyDescriptors[k]); err != nil {
			return err
		}
		if val, ok := m.PropertyDescriptors[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("propertyDescriptors" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("propertyDescriptors" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var versionedControllerServiceTypeScheduledStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED","RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedControllerServiceTypeScheduledStatePropEnum = append(versionedControllerServiceTypeScheduledStatePropEnum, v)
	}
}

const (

	// VersionedControllerServiceScheduledStateENABLED captures enum value "ENABLED"
	VersionedControllerServiceScheduledStateENABLED string = "ENABLED"

	// VersionedControllerServiceScheduledStateDISABLED captures enum value "DISABLED"
	VersionedControllerServiceScheduledStateDISABLED string = "DISABLED"

	// VersionedControllerServiceScheduledStateRUNNING captures enum value "RUNNING"
	VersionedControllerServiceScheduledStateRUNNING string = "RUNNING"
)

// prop value enum
func (m *VersionedControllerService) validateScheduledStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedControllerServiceTypeScheduledStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedControllerService) validateScheduledState(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledState) { // not required
		return nil
	}

	// value enum
	if err := m.validateScheduledStateEnum("scheduledState", "body", m.ScheduledState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this versioned controller service based on the context it is used
func (m *VersionedControllerService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerServiceApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePropertyDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedControllerService) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {
		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedControllerService) contextValidateControllerServiceApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerServiceApis); i++ {

		if m.ControllerServiceApis[i] != nil {
			if err := m.ControllerServiceApis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedControllerService) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {
		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedControllerService) contextValidatePropertyDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.PropertyDescriptors {

		if val, ok := m.PropertyDescriptors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedControllerService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedControllerService) UnmarshalBinary(b []byte) error {
	var res VersionedControllerService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

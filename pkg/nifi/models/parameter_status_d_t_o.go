// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterStatusDTO parameter status d t o
//
// swagger:model ParameterStatusDTO
type ParameterStatusDTO struct {

	// The name of the Parameter
	Parameter *ParameterEntity `json:"parameter,omitempty"`

	// Indicates the status of the parameter, compared to the existing parameter context
	// Enum: [NEW CHANGED REMOVED MISSING_BUT_REFERENCED UNCHANGED]
	Status string `json:"status,omitempty"`
}

// Validate validates this parameter status d t o
func (m *ParameterStatusDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterStatusDTO) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	if m.Parameter != nil {
		if err := m.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameter")
			}
			return err
		}
	}

	return nil
}

var parameterStatusDTOTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","CHANGED","REMOVED","MISSING_BUT_REFERENCED","UNCHANGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterStatusDTOTypeStatusPropEnum = append(parameterStatusDTOTypeStatusPropEnum, v)
	}
}

const (

	// ParameterStatusDTOStatusNEW captures enum value "NEW"
	ParameterStatusDTOStatusNEW string = "NEW"

	// ParameterStatusDTOStatusCHANGED captures enum value "CHANGED"
	ParameterStatusDTOStatusCHANGED string = "CHANGED"

	// ParameterStatusDTOStatusREMOVED captures enum value "REMOVED"
	ParameterStatusDTOStatusREMOVED string = "REMOVED"

	// ParameterStatusDTOStatusMISSINGBUTREFERENCED captures enum value "MISSING_BUT_REFERENCED"
	ParameterStatusDTOStatusMISSINGBUTREFERENCED string = "MISSING_BUT_REFERENCED"

	// ParameterStatusDTOStatusUNCHANGED captures enum value "UNCHANGED"
	ParameterStatusDTOStatusUNCHANGED string = "UNCHANGED"
)

// prop value enum
func (m *ParameterStatusDTO) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterStatusDTOTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParameterStatusDTO) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this parameter status d t o based on the context it is used
func (m *ParameterStatusDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterStatusDTO) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameter != nil {
		if err := m.Parameter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterStatusDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterStatusDTO) UnmarshalBinary(b []byte) error {
	var res ParameterStatusDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

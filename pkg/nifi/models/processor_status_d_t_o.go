// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessorStatusDTO processor status d t o
//
// swagger:model ProcessorStatusDTO
type ProcessorStatusDTO struct {

	// A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
	AggregateSnapshot *ProcessorStatusSnapshotDTO `json:"aggregateSnapshot,omitempty"`

	// The unique ID of the process group that the Processor belongs to
	GroupID string `json:"groupId,omitempty"`

	// The unique ID of the Processor
	ID string `json:"id,omitempty"`

	// The name of the Processor
	Name string `json:"name,omitempty"`

	// A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
	NodeSnapshots []*NodeProcessorStatusSnapshotDTO `json:"nodeSnapshots"`

	// The run status of the Processor
	// Enum: [Running Stopped Validating Disabled Invalid]
	RunStatus string `json:"runStatus,omitempty"`

	// The timestamp of when the stats were last refreshed
	StatsLastRefreshed string `json:"statsLastRefreshed,omitempty"`

	// The type of the Processor
	Type string `json:"type,omitempty"`
}

// Validate validates this processor status d t o
func (m *ProcessorStatusDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregateSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorStatusDTO) validateAggregateSnapshot(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregateSnapshot) { // not required
		return nil
	}

	if m.AggregateSnapshot != nil {
		if err := m.AggregateSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregateSnapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregateSnapshot")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorStatusDTO) validateNodeSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeSnapshots); i++ {
		if swag.IsZero(m.NodeSnapshots[i]) { // not required
			continue
		}

		if m.NodeSnapshots[i] != nil {
			if err := m.NodeSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var processorStatusDTOTypeRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Stopped","Validating","Disabled","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processorStatusDTOTypeRunStatusPropEnum = append(processorStatusDTOTypeRunStatusPropEnum, v)
	}
}

const (

	// ProcessorStatusDTORunStatusRunning captures enum value "Running"
	ProcessorStatusDTORunStatusRunning string = "Running"

	// ProcessorStatusDTORunStatusStopped captures enum value "Stopped"
	ProcessorStatusDTORunStatusStopped string = "Stopped"

	// ProcessorStatusDTORunStatusValidating captures enum value "Validating"
	ProcessorStatusDTORunStatusValidating string = "Validating"

	// ProcessorStatusDTORunStatusDisabled captures enum value "Disabled"
	ProcessorStatusDTORunStatusDisabled string = "Disabled"

	// ProcessorStatusDTORunStatusInvalid captures enum value "Invalid"
	ProcessorStatusDTORunStatusInvalid string = "Invalid"
)

// prop value enum
func (m *ProcessorStatusDTO) validateRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processorStatusDTOTypeRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessorStatusDTO) validateRunStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunStatusEnum("runStatus", "body", m.RunStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this processor status d t o based on the context it is used
func (m *ProcessorStatusDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregateSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorStatusDTO) contextValidateAggregateSnapshot(ctx context.Context, formats strfmt.Registry) error {

	if m.AggregateSnapshot != nil {

		if swag.IsZero(m.AggregateSnapshot) { // not required
			return nil
		}

		if err := m.AggregateSnapshot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregateSnapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregateSnapshot")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorStatusDTO) contextValidateNodeSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeSnapshots); i++ {

		if m.NodeSnapshots[i] != nil {

			if swag.IsZero(m.NodeSnapshots[i]) { // not required
				return nil
			}

			if err := m.NodeSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessorStatusDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessorStatusDTO) UnmarshalBinary(b []byte) error {
	var res ProcessorStatusDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConnectionDiagnosticsSnapshotDTO connection diagnostics snapshot d t o
//
// swagger:model ConnectionDiagnosticsSnapshotDTO
type ConnectionDiagnosticsSnapshotDTO struct {

	// The local queue partition, from which components can pull FlowFiles on this node.
	LocalQueuePartition *LocalQueuePartitionDTO `json:"localQueuePartition,omitempty"`

	// The Node Identifier that this information pertains to
	NodeIdentifier string `json:"nodeIdentifier,omitempty"`

	// remote queue partitions
	RemoteQueuePartitions []*RemoteQueuePartitionDTO `json:"remoteQueuePartitions"`

	// Total number of bytes that make up the content for the FlowFiles owned by this Connection
	TotalByteCount int64 `json:"totalByteCount,omitempty"`

	// Total number of FlowFiles owned by the Connection
	TotalFlowFileCount int32 `json:"totalFlowFileCount,omitempty"`
}

// Validate validates this connection diagnostics snapshot d t o
func (m *ConnectionDiagnosticsSnapshotDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalQueuePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteQueuePartitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionDiagnosticsSnapshotDTO) validateLocalQueuePartition(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalQueuePartition) { // not required
		return nil
	}

	if m.LocalQueuePartition != nil {
		if err := m.LocalQueuePartition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localQueuePartition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localQueuePartition")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionDiagnosticsSnapshotDTO) validateRemoteQueuePartitions(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteQueuePartitions) { // not required
		return nil
	}

	for i := 0; i < len(m.RemoteQueuePartitions); i++ {
		if swag.IsZero(m.RemoteQueuePartitions[i]) { // not required
			continue
		}

		if m.RemoteQueuePartitions[i] != nil {
			if err := m.RemoteQueuePartitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteQueuePartitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteQueuePartitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this connection diagnostics snapshot d t o based on the context it is used
func (m *ConnectionDiagnosticsSnapshotDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalQueuePartition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteQueuePartitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionDiagnosticsSnapshotDTO) contextValidateLocalQueuePartition(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalQueuePartition != nil {
		if err := m.LocalQueuePartition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localQueuePartition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localQueuePartition")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionDiagnosticsSnapshotDTO) contextValidateRemoteQueuePartitions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemoteQueuePartitions); i++ {

		if m.RemoteQueuePartitions[i] != nil {
			if err := m.RemoteQueuePartitions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteQueuePartitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteQueuePartitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionDiagnosticsSnapshotDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionDiagnosticsSnapshotDTO) UnmarshalBinary(b []byte) error {
	var res ConnectionDiagnosticsSnapshotDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

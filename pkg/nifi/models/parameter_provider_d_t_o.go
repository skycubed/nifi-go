// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterProviderDTO parameter provider d t o
//
// swagger:model ParameterProviderDTO
type ParameterProviderDTO struct {

	// The set of all components in the flow that are referencing Parameters provided by this provider
	// Unique: true
	AffectedComponents []*AffectedComponentEntity `json:"affectedComponents"`

	// The annotation data for the parameter provider. This is how the custom UI relays configuration to the parameter provider.
	AnnotationData string `json:"annotationData,omitempty"`

	// The details of the artifact that bundled this parameter provider type.
	Bundle *BundleDTO `json:"bundle,omitempty"`

	// The comments of the parameter provider.
	Comments string `json:"comments,omitempty"`

	// The URL for the custom configuration UI for the parameter provider.
	CustomUIURL string `json:"customUiUrl,omitempty"`

	// Whether the parameter provider has been deprecated.
	Deprecated bool `json:"deprecated,omitempty"`

	// The descriptors for the parameter providers properties.
	Descriptors map[string]PropertyDescriptorDTO `json:"descriptors,omitempty"`

	// Whether the underlying extension is missing.
	ExtensionMissing bool `json:"extensionMissing,omitempty"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// Whether the parameter provider has multiple versions available.
	MultipleVersionsAvailable bool `json:"multipleVersionsAvailable,omitempty"`

	// The name of the parameter provider.
	Name string `json:"name,omitempty"`

	// Configuration for any fetched parameter groups.
	ParameterGroupConfigurations []*ParameterGroupConfigurationEntity `json:"parameterGroupConfigurations"`

	// The status of all provided parameters for this parameter provider
	// Unique: true
	ParameterStatus []*ParameterStatusDTO `json:"parameterStatus"`

	// The id of parent process group of this component if applicable.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// Whether the parameter provider persists state.
	PersistsState bool `json:"persistsState,omitempty"`

	// The position of this component in the UI if applicable.
	Position *PositionDTO `json:"position,omitempty"`

	// The properties of the parameter provider.
	Properties map[string]string `json:"properties,omitempty"`

	// The Parameter Contexts that reference this Parameter Provider
	// Unique: true
	ReferencingParameterContexts []*ParameterProviderReferencingComponentEntity `json:"referencingParameterContexts"`

	// Whether the parameter provider requires elevated privileges.
	Restricted bool `json:"restricted,omitempty"`

	// The fully qualified type of the parameter provider.
	Type string `json:"type,omitempty"`

	// Gets the validation errors from the parameter provider. These validation errors represent the problems with the parameter provider that must be resolved before it can be scheduled to run.
	ValidationErrors []string `json:"validationErrors"`

	// Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)
	// Enum: [VALID INVALID VALIDATING]
	ValidationStatus string `json:"validationStatus,omitempty"`

	// The ID of the corresponding component that is under version control
	VersionedComponentID string `json:"versionedComponentId,omitempty"`
}

// Validate validates this parameter provider d t o
func (m *ParameterProviderDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterGroupConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencingParameterContexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterProviderDTO) validateAffectedComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.AffectedComponents) { // not required
		return nil
	}

	if err := validate.UniqueItems("affectedComponents", "body", m.AffectedComponents); err != nil {
		return err
	}

	for i := 0; i < len(m.AffectedComponents); i++ {
		if swag.IsZero(m.AffectedComponents[i]) { // not required
			continue
		}

		if m.AffectedComponents[i] != nil {
			if err := m.AffectedComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterProviderDTO) validateDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.Descriptors) { // not required
		return nil
	}

	for k := range m.Descriptors {

		if err := validate.Required("descriptors"+"."+k, "body", m.Descriptors[k]); err != nil {
			return err
		}
		if val, ok := m.Descriptors[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("descriptors" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("descriptors" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) validateParameterGroupConfigurations(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterGroupConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterGroupConfigurations); i++ {
		if swag.IsZero(m.ParameterGroupConfigurations[i]) { // not required
			continue
		}

		if m.ParameterGroupConfigurations[i] != nil {
			if err := m.ParameterGroupConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) validateParameterStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterStatus) { // not required
		return nil
	}

	if err := validate.UniqueItems("parameterStatus", "body", m.ParameterStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.ParameterStatus); i++ {
		if swag.IsZero(m.ParameterStatus[i]) { // not required
			continue
		}

		if m.ParameterStatus[i] != nil {
			if err := m.ParameterStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterProviderDTO) validateReferencingParameterContexts(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencingParameterContexts) { // not required
		return nil
	}

	if err := validate.UniqueItems("referencingParameterContexts", "body", m.ReferencingParameterContexts); err != nil {
		return err
	}

	for i := 0; i < len(m.ReferencingParameterContexts); i++ {
		if swag.IsZero(m.ReferencingParameterContexts[i]) { // not required
			continue
		}

		if m.ReferencingParameterContexts[i] != nil {
			if err := m.ReferencingParameterContexts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingParameterContexts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingParameterContexts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var parameterProviderDTOTypeValidationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","INVALID","VALIDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterProviderDTOTypeValidationStatusPropEnum = append(parameterProviderDTOTypeValidationStatusPropEnum, v)
	}
}

const (

	// ParameterProviderDTOValidationStatusVALID captures enum value "VALID"
	ParameterProviderDTOValidationStatusVALID string = "VALID"

	// ParameterProviderDTOValidationStatusINVALID captures enum value "INVALID"
	ParameterProviderDTOValidationStatusINVALID string = "INVALID"

	// ParameterProviderDTOValidationStatusVALIDATING captures enum value "VALIDATING"
	ParameterProviderDTOValidationStatusVALIDATING string = "VALIDATING"
)

// prop value enum
func (m *ParameterProviderDTO) validateValidationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterProviderDTOTypeValidationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParameterProviderDTO) validateValidationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationStatusEnum("validationStatus", "body", m.ValidationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this parameter provider d t o based on the context it is used
func (m *ParameterProviderDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffectedComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterGroupConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferencingParameterContexts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterProviderDTO) contextValidateAffectedComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AffectedComponents); i++ {

		if m.AffectedComponents[i] != nil {
			if err := m.AffectedComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {
		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterProviderDTO) contextValidateDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Descriptors {

		if val, ok := m.Descriptors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) contextValidateParameterGroupConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParameterGroupConfigurations); i++ {

		if m.ParameterGroupConfigurations[i] != nil {
			if err := m.ParameterGroupConfigurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) contextValidateParameterStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParameterStatus); i++ {

		if m.ParameterStatus[i] != nil {
			if err := m.ParameterStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderDTO) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {
		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterProviderDTO) contextValidateReferencingParameterContexts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferencingParameterContexts); i++ {

		if m.ReferencingParameterContexts[i] != nil {
			if err := m.ReferencingParameterContexts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingParameterContexts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingParameterContexts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterProviderDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterProviderDTO) UnmarshalBinary(b []byte) error {
	var res ParameterProviderDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

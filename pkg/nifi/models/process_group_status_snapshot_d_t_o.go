// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessGroupStatusSnapshotDTO process group status snapshot d t o
//
// swagger:model ProcessGroupStatusSnapshotDTO
type ProcessGroupStatusSnapshotDTO struct {

	// The active thread count for this process group.
	ActiveThreadCount int32 `json:"activeThreadCount,omitempty"`

	// The number of bytes that have come into this ProcessGroup in the last 5 minutes
	BytesIn int64 `json:"bytesIn,omitempty"`

	// The number of bytes transferred out of this ProcessGroup in the last 5 minutes
	BytesOut int64 `json:"bytesOut,omitempty"`

	// The number of bytes that are queued up in this ProcessGroup right now
	BytesQueued int64 `json:"bytesQueued,omitempty"`

	// The number of bytes read by components in this ProcessGroup in the last 5 minutes
	BytesRead int64 `json:"bytesRead,omitempty"`

	// The number of bytes received from external sources by components within this ProcessGroup in the last 5 minutes
	BytesReceived int64 `json:"bytesReceived,omitempty"`

	// The number of bytes sent to an external sink by components within this ProcessGroup in the last 5 minutes
	BytesSent int64 `json:"bytesSent,omitempty"`

	// The number of bytes transferred in this ProcessGroup in the last 5 minutes
	BytesTransferred int64 `json:"bytesTransferred,omitempty"`

	// The number of bytes written by components in this ProcessGroup in the last 5 minutes
	BytesWritten int64 `json:"bytesWritten,omitempty"`

	// The status of all connections in the process group.
	ConnectionStatusSnapshots []*ConnectionStatusSnapshotEntity `json:"connectionStatusSnapshots"`

	// The number of FlowFiles that have come into this ProcessGroup in the last 5 minutes
	FlowFilesIn int32 `json:"flowFilesIn,omitempty"`

	// The number of FlowFiles transferred out of this ProcessGroup in the last 5 minutes
	FlowFilesOut int32 `json:"flowFilesOut,omitempty"`

	// The number of FlowFiles that are queued up in this ProcessGroup right now
	FlowFilesQueued int32 `json:"flowFilesQueued,omitempty"`

	// The number of FlowFiles received from external sources by components within this ProcessGroup in the last 5 minutes
	FlowFilesReceived int32 `json:"flowFilesReceived,omitempty"`

	// The number of FlowFiles sent to an external sink by components within this ProcessGroup in the last 5 minutes
	FlowFilesSent int32 `json:"flowFilesSent,omitempty"`

	// The number of FlowFiles transferred in this ProcessGroup in the last 5 minutes
	FlowFilesTransferred int32 `json:"flowFilesTransferred,omitempty"`

	// The id of the process group.
	ID string `json:"id,omitempty"`

	// The input count/size for the process group in the last 5 minutes (pretty printed).
	Input string `json:"input,omitempty"`

	// The status of all input ports in the process group.
	InputPortStatusSnapshots []*PortStatusSnapshotEntity `json:"inputPortStatusSnapshots"`

	// The name of this process group.
	Name string `json:"name,omitempty"`

	// The output count/size for the process group in the last 5 minutes.
	Output string `json:"output,omitempty"`

	// The status of all output ports in the process group.
	OutputPortStatusSnapshots []*PortStatusSnapshotEntity `json:"outputPortStatusSnapshots"`

	// The status of all process groups in the process group.
	ProcessGroupStatusSnapshots []*ProcessGroupStatusSnapshotEntity `json:"processGroupStatusSnapshots"`

	// The status of all processors in the process group.
	ProcessorStatusSnapshots []*ProcessorStatusSnapshotEntity `json:"processorStatusSnapshots"`

	// The count/size that is queued in the the process group.
	Queued string `json:"queued,omitempty"`

	// The count that is queued for the process group.
	QueuedCount string `json:"queuedCount,omitempty"`

	// The size that is queued for the process group.
	QueuedSize string `json:"queuedSize,omitempty"`

	// The number of bytes read in the last 5 minutes.
	Read string `json:"read,omitempty"`

	// The count/size sent to the process group in the last 5 minutes.
	Received string `json:"received,omitempty"`

	// The status of all remote process groups in the process group.
	RemoteProcessGroupStatusSnapshots []*RemoteProcessGroupStatusSnapshotEntity `json:"remoteProcessGroupStatusSnapshots"`

	// The count/size sent from this process group in the last 5 minutes.
	Sent string `json:"sent,omitempty"`

	// The number of threads currently terminated for the process group.
	TerminatedThreadCount int32 `json:"terminatedThreadCount,omitempty"`

	// The count/size transferred to/from queues in the process group in the last 5 minutes.
	Transferred string `json:"transferred,omitempty"`

	// The current state of the Process Group, as it relates to the Versioned Flow
	// Enum: [LOCALLY_MODIFIED STALE LOCALLY_MODIFIED_AND_STALE UP_TO_DATE SYNC_FAILURE]
	VersionedFlowState string `json:"versionedFlowState,omitempty"`

	// The number of bytes written in the last 5 minutes.
	Written string `json:"written,omitempty"`
}

// Validate validates this process group status snapshot d t o
func (m *ProcessGroupStatusSnapshotDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatusSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputPortStatusSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputPortStatusSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessGroupStatusSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorStatusSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteProcessGroupStatusSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionedFlowState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateConnectionStatusSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStatusSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectionStatusSnapshots); i++ {
		if swag.IsZero(m.ConnectionStatusSnapshots[i]) { // not required
			continue
		}

		if m.ConnectionStatusSnapshots[i] != nil {
			if err := m.ConnectionStatusSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateInputPortStatusSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.InputPortStatusSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.InputPortStatusSnapshots); i++ {
		if swag.IsZero(m.InputPortStatusSnapshots[i]) { // not required
			continue
		}

		if m.InputPortStatusSnapshots[i] != nil {
			if err := m.InputPortStatusSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPortStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPortStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateOutputPortStatusSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputPortStatusSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputPortStatusSnapshots); i++ {
		if swag.IsZero(m.OutputPortStatusSnapshots[i]) { // not required
			continue
		}

		if m.OutputPortStatusSnapshots[i] != nil {
			if err := m.OutputPortStatusSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPortStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPortStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateProcessGroupStatusSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessGroupStatusSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessGroupStatusSnapshots); i++ {
		if swag.IsZero(m.ProcessGroupStatusSnapshots[i]) { // not required
			continue
		}

		if m.ProcessGroupStatusSnapshots[i] != nil {
			if err := m.ProcessGroupStatusSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroupStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroupStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateProcessorStatusSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessorStatusSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessorStatusSnapshots); i++ {
		if swag.IsZero(m.ProcessorStatusSnapshots[i]) { // not required
			continue
		}

		if m.ProcessorStatusSnapshots[i] != nil {
			if err := m.ProcessorStatusSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processorStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processorStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateRemoteProcessGroupStatusSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProcessGroupStatusSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.RemoteProcessGroupStatusSnapshots); i++ {
		if swag.IsZero(m.RemoteProcessGroupStatusSnapshots[i]) { // not required
			continue
		}

		if m.RemoteProcessGroupStatusSnapshots[i] != nil {
			if err := m.RemoteProcessGroupStatusSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroupStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroupStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var processGroupStatusSnapshotDTOTypeVersionedFlowStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCALLY_MODIFIED","STALE","LOCALLY_MODIFIED_AND_STALE","UP_TO_DATE","SYNC_FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processGroupStatusSnapshotDTOTypeVersionedFlowStatePropEnum = append(processGroupStatusSnapshotDTOTypeVersionedFlowStatePropEnum, v)
	}
}

const (

	// ProcessGroupStatusSnapshotDTOVersionedFlowStateLOCALLYMODIFIED captures enum value "LOCALLY_MODIFIED"
	ProcessGroupStatusSnapshotDTOVersionedFlowStateLOCALLYMODIFIED string = "LOCALLY_MODIFIED"

	// ProcessGroupStatusSnapshotDTOVersionedFlowStateSTALE captures enum value "STALE"
	ProcessGroupStatusSnapshotDTOVersionedFlowStateSTALE string = "STALE"

	// ProcessGroupStatusSnapshotDTOVersionedFlowStateLOCALLYMODIFIEDANDSTALE captures enum value "LOCALLY_MODIFIED_AND_STALE"
	ProcessGroupStatusSnapshotDTOVersionedFlowStateLOCALLYMODIFIEDANDSTALE string = "LOCALLY_MODIFIED_AND_STALE"

	// ProcessGroupStatusSnapshotDTOVersionedFlowStateUPTODATE captures enum value "UP_TO_DATE"
	ProcessGroupStatusSnapshotDTOVersionedFlowStateUPTODATE string = "UP_TO_DATE"

	// ProcessGroupStatusSnapshotDTOVersionedFlowStateSYNCFAILURE captures enum value "SYNC_FAILURE"
	ProcessGroupStatusSnapshotDTOVersionedFlowStateSYNCFAILURE string = "SYNC_FAILURE"
)

// prop value enum
func (m *ProcessGroupStatusSnapshotDTO) validateVersionedFlowStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processGroupStatusSnapshotDTOTypeVersionedFlowStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) validateVersionedFlowState(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionedFlowState) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionedFlowStateEnum("versionedFlowState", "body", m.VersionedFlowState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this process group status snapshot d t o based on the context it is used
func (m *ProcessGroupStatusSnapshotDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectionStatusSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputPortStatusSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputPortStatusSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessGroupStatusSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessorStatusSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteProcessGroupStatusSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) contextValidateConnectionStatusSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectionStatusSnapshots); i++ {

		if m.ConnectionStatusSnapshots[i] != nil {
			if err := m.ConnectionStatusSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) contextValidateInputPortStatusSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputPortStatusSnapshots); i++ {

		if m.InputPortStatusSnapshots[i] != nil {
			if err := m.InputPortStatusSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPortStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPortStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) contextValidateOutputPortStatusSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputPortStatusSnapshots); i++ {

		if m.OutputPortStatusSnapshots[i] != nil {
			if err := m.OutputPortStatusSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPortStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPortStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) contextValidateProcessGroupStatusSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessGroupStatusSnapshots); i++ {

		if m.ProcessGroupStatusSnapshots[i] != nil {
			if err := m.ProcessGroupStatusSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroupStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroupStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) contextValidateProcessorStatusSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessorStatusSnapshots); i++ {

		if m.ProcessorStatusSnapshots[i] != nil {
			if err := m.ProcessorStatusSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processorStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processorStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessGroupStatusSnapshotDTO) contextValidateRemoteProcessGroupStatusSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemoteProcessGroupStatusSnapshots); i++ {

		if m.RemoteProcessGroupStatusSnapshots[i] != nil {
			if err := m.RemoteProcessGroupStatusSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroupStatusSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroupStatusSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessGroupStatusSnapshotDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessGroupStatusSnapshotDTO) UnmarshalBinary(b []byte) error {
	var res ProcessGroupStatusSnapshotDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

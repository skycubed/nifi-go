// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterContextUpdateEntity parameter context update entity
//
// swagger:model ParameterContextUpdateEntity
type ParameterContextUpdateEntity struct {

	// The Parameter Context that is being operated on. This may not be populated until the request has successfully completed.
	ParameterContext *ParameterContextDTO `json:"parameterContext,omitempty"`

	// The Revision of the Parameter Context
	ParameterContextRevision *RevisionDTO `json:"parameterContextRevision,omitempty"`

	// The components that are referenced by the update.
	// Unique: true
	ReferencingComponents []*AffectedComponentEntity `json:"referencingComponents"`
}

// Validate validates this parameter context update entity
func (m *ParameterContextUpdateEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameterContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterContextRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencingComponents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterContextUpdateEntity) validateParameterContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterContext) { // not required
		return nil
	}

	if m.ParameterContext != nil {
		if err := m.ParameterContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContext")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterContextUpdateEntity) validateParameterContextRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterContextRevision) { // not required
		return nil
	}

	if m.ParameterContextRevision != nil {
		if err := m.ParameterContextRevision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContextRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContextRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterContextUpdateEntity) validateReferencingComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencingComponents) { // not required
		return nil
	}

	if err := validate.UniqueItems("referencingComponents", "body", m.ReferencingComponents); err != nil {
		return err
	}

	for i := 0; i < len(m.ReferencingComponents); i++ {
		if swag.IsZero(m.ReferencingComponents[i]) { // not required
			continue
		}

		if m.ReferencingComponents[i] != nil {
			if err := m.ReferencingComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this parameter context update entity based on the context it is used
func (m *ParameterContextUpdateEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameterContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterContextRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferencingComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterContextUpdateEntity) contextValidateParameterContext(ctx context.Context, formats strfmt.Registry) error {

	if m.ParameterContext != nil {

		if swag.IsZero(m.ParameterContext) { // not required
			return nil
		}

		if err := m.ParameterContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContext")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterContextUpdateEntity) contextValidateParameterContextRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.ParameterContextRevision != nil {

		if swag.IsZero(m.ParameterContextRevision) { // not required
			return nil
		}

		if err := m.ParameterContextRevision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContextRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContextRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterContextUpdateEntity) contextValidateReferencingComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferencingComponents); i++ {

		if m.ReferencingComponents[i] != nil {

			if swag.IsZero(m.ReferencingComponents[i]) { // not required
				return nil
			}

			if err := m.ReferencingComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterContextUpdateEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterContextUpdateEntity) UnmarshalBinary(b []byte) error {
	var res ParameterContextUpdateEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessorStatusSnapshotDTO processor status snapshot d t o
//
// swagger:model ProcessorStatusSnapshotDTO
type ProcessorStatusSnapshotDTO struct {

	// The number of threads currently executing in the processor.
	ActiveThreadCount int32 `json:"activeThreadCount,omitempty"`

	// The size of the FlowFiles that have been accepted in the last 5 minutes
	BytesIn int64 `json:"bytesIn,omitempty"`

	// The size of the FlowFiles transferred to a Connection in the last 5 minutes
	BytesOut int64 `json:"bytesOut,omitempty"`

	// The number of bytes read by this Processor in the last 5 mintues
	BytesRead int64 `json:"bytesRead,omitempty"`

	// The number of bytes written by this Processor in the last 5 minutes
	BytesWritten int64 `json:"bytesWritten,omitempty"`

	// Indicates the node where the process will execute.
	// Enum: [ALL PRIMARY]
	ExecutionNode string `json:"executionNode,omitempty"`

	// The number of FlowFiles that have been accepted in the last 5 minutes
	FlowFilesIn int32 `json:"flowFilesIn,omitempty"`

	// The number of FlowFiles transferred to a Connection in the last 5 minutes
	FlowFilesOut int32 `json:"flowFilesOut,omitempty"`

	// The id of the parent process group to which the processor belongs.
	GroupID string `json:"groupId,omitempty"`

	// The id of the processor.
	ID string `json:"id,omitempty"`

	// The count/size of flowfiles that have been accepted in the last 5 minutes.
	Input string `json:"input,omitempty"`

	// The name of the prcessor.
	Name string `json:"name,omitempty"`

	// The count/size of flowfiles that have been processed in the last 5 minutes.
	Output string `json:"output,omitempty"`

	// The number of bytes read in the last 5 minutes.
	Read string `json:"read,omitempty"`

	// The state of the processor.
	// Enum: [Running Stopped Validating Disabled Invalid]
	RunStatus string `json:"runStatus,omitempty"`

	// The number of times this Processor has run in the last 5 minutes
	TaskCount int32 `json:"taskCount,omitempty"`

	// The total number of task this connectable has completed over the last 5 minutes.
	Tasks string `json:"tasks,omitempty"`

	// The total duration of all tasks for this connectable over the last 5 minutes.
	TasksDuration string `json:"tasksDuration,omitempty"`

	// The number of nanoseconds that this Processor has spent running in the last 5 minutes
	TasksDurationNanos int64 `json:"tasksDurationNanos,omitempty"`

	// The number of threads currently terminated for the processor.
	TerminatedThreadCount int32 `json:"terminatedThreadCount,omitempty"`

	// The type of the processor.
	Type string `json:"type,omitempty"`

	// The number of bytes written in the last 5 minutes.
	Written string `json:"written,omitempty"`
}

// Validate validates this processor status snapshot d t o
func (m *ProcessorStatusSnapshotDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var processorStatusSnapshotDTOTypeExecutionNodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","PRIMARY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processorStatusSnapshotDTOTypeExecutionNodePropEnum = append(processorStatusSnapshotDTOTypeExecutionNodePropEnum, v)
	}
}

const (

	// ProcessorStatusSnapshotDTOExecutionNodeALL captures enum value "ALL"
	ProcessorStatusSnapshotDTOExecutionNodeALL string = "ALL"

	// ProcessorStatusSnapshotDTOExecutionNodePRIMARY captures enum value "PRIMARY"
	ProcessorStatusSnapshotDTOExecutionNodePRIMARY string = "PRIMARY"
)

// prop value enum
func (m *ProcessorStatusSnapshotDTO) validateExecutionNodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processorStatusSnapshotDTOTypeExecutionNodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessorStatusSnapshotDTO) validateExecutionNode(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionNode) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionNodeEnum("executionNode", "body", m.ExecutionNode); err != nil {
		return err
	}

	return nil
}

var processorStatusSnapshotDTOTypeRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Stopped","Validating","Disabled","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processorStatusSnapshotDTOTypeRunStatusPropEnum = append(processorStatusSnapshotDTOTypeRunStatusPropEnum, v)
	}
}

const (

	// ProcessorStatusSnapshotDTORunStatusRunning captures enum value "Running"
	ProcessorStatusSnapshotDTORunStatusRunning string = "Running"

	// ProcessorStatusSnapshotDTORunStatusStopped captures enum value "Stopped"
	ProcessorStatusSnapshotDTORunStatusStopped string = "Stopped"

	// ProcessorStatusSnapshotDTORunStatusValidating captures enum value "Validating"
	ProcessorStatusSnapshotDTORunStatusValidating string = "Validating"

	// ProcessorStatusSnapshotDTORunStatusDisabled captures enum value "Disabled"
	ProcessorStatusSnapshotDTORunStatusDisabled string = "Disabled"

	// ProcessorStatusSnapshotDTORunStatusInvalid captures enum value "Invalid"
	ProcessorStatusSnapshotDTORunStatusInvalid string = "Invalid"
)

// prop value enum
func (m *ProcessorStatusSnapshotDTO) validateRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processorStatusSnapshotDTOTypeRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessorStatusSnapshotDTO) validateRunStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunStatusEnum("runStatus", "body", m.RunStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this processor status snapshot d t o based on context it is used
func (m *ProcessorStatusSnapshotDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProcessorStatusSnapshotDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessorStatusSnapshotDTO) UnmarshalBinary(b []byte) error {
	var res ProcessorStatusSnapshotDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessorDTO processor d t o
//
// swagger:model ProcessorDTO
type ProcessorDTO struct {

	// The details of the artifact that bundled this processor type.
	Bundle *BundleDTO `json:"bundle,omitempty"`

	// The configuration details for the processor. These details will be included in a response if the verbose flag is included in a request.
	Config *ProcessorConfigDTO `json:"config,omitempty"`

	// Whether the processor has been deprecated.
	Deprecated bool `json:"deprecated,omitempty"`

	// The description of the processor.
	Description string `json:"description,omitempty"`

	// Indicates if the execution node of a processor is restricted to run only on the primary node
	ExecutionNodeRestricted bool `json:"executionNodeRestricted,omitempty"`

	// Whether the underlying extension is missing.
	ExtensionMissing bool `json:"extensionMissing,omitempty"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// The input requirement for this processor.
	InputRequirement string `json:"inputRequirement,omitempty"`

	// Whether the processor has multiple versions available.
	MultipleVersionsAvailable bool `json:"multipleVersionsAvailable,omitempty"`

	// The name of the processor.
	Name string `json:"name,omitempty"`

	// The id of parent process group of this component if applicable.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// Whether the processor persists state.
	PersistsState bool `json:"persistsState,omitempty"`

	// The position of this component in the UI if applicable.
	Position *PositionDTO `json:"position,omitempty"`

	// The available relationships that the processor currently supports.
	Relationships []*RelationshipDTO `json:"relationships"`

	// Whether the processor requires elevated privileges.
	Restricted bool `json:"restricted,omitempty"`

	// The state of the processor
	// Enum: [RUNNING STOPPED DISABLED]
	State string `json:"state,omitempty"`

	// Styles for the processor (background-color : #eee).
	Style map[string]string `json:"style,omitempty"`

	// Whether the processor supports batching. This makes the run duration settings available.
	SupportsBatching bool `json:"supportsBatching,omitempty"`

	// Whether the processor supports event driven scheduling.
	SupportsEventDriven bool `json:"supportsEventDriven,omitempty"`

	// Whether the processor supports parallel processing.
	SupportsParallelProcessing bool `json:"supportsParallelProcessing,omitempty"`

	// The type of the processor.
	Type string `json:"type,omitempty"`

	// The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.
	ValidationErrors []string `json:"validationErrors"`

	// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
	// Enum: [VALID INVALID VALIDATING]
	ValidationStatus string `json:"validationStatus,omitempty"`

	// The ID of the corresponding component that is under version control
	VersionedComponentID string `json:"versionedComponentId,omitempty"`
}

// Validate validates this processor d t o
func (m *ProcessorDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorDTO) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDTO) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDTO) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDTO) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	for i := 0; i < len(m.Relationships); i++ {
		if swag.IsZero(m.Relationships[i]) { // not required
			continue
		}

		if m.Relationships[i] != nil {
			if err := m.Relationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var processorDTOTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RUNNING","STOPPED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processorDTOTypeStatePropEnum = append(processorDTOTypeStatePropEnum, v)
	}
}

const (

	// ProcessorDTOStateRUNNING captures enum value "RUNNING"
	ProcessorDTOStateRUNNING string = "RUNNING"

	// ProcessorDTOStateSTOPPED captures enum value "STOPPED"
	ProcessorDTOStateSTOPPED string = "STOPPED"

	// ProcessorDTOStateDISABLED captures enum value "DISABLED"
	ProcessorDTOStateDISABLED string = "DISABLED"
)

// prop value enum
func (m *ProcessorDTO) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processorDTOTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessorDTO) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var processorDTOTypeValidationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","INVALID","VALIDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processorDTOTypeValidationStatusPropEnum = append(processorDTOTypeValidationStatusPropEnum, v)
	}
}

const (

	// ProcessorDTOValidationStatusVALID captures enum value "VALID"
	ProcessorDTOValidationStatusVALID string = "VALID"

	// ProcessorDTOValidationStatusINVALID captures enum value "INVALID"
	ProcessorDTOValidationStatusINVALID string = "INVALID"

	// ProcessorDTOValidationStatusVALIDATING captures enum value "VALIDATING"
	ProcessorDTOValidationStatusVALIDATING string = "VALIDATING"
)

// prop value enum
func (m *ProcessorDTO) validateValidationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processorDTOTypeValidationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessorDTO) validateValidationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationStatusEnum("validationStatus", "body", m.ValidationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this processor d t o based on the context it is used
func (m *ProcessorDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorDTO) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {

		if swag.IsZero(m.Bundle) { // not required
			return nil
		}

		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDTO) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDTO) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDTO) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Relationships); i++ {

		if m.Relationships[i] != nil {

			if swag.IsZero(m.Relationships[i]) { // not required
				return nil
			}

			if err := m.Relationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessorDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessorDTO) UnmarshalBinary(b []byte) error {
	var res ProcessorDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

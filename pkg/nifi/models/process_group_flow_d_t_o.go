// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProcessGroupFlowDTO process group flow d t o
//
// swagger:model ProcessGroupFlowDTO
type ProcessGroupFlowDTO struct {

	// The breadcrumb of the process group.
	Breadcrumb *FlowBreadcrumbEntity `json:"breadcrumb,omitempty"`

	// The flow structure starting at this Process Group.
	Flow *FlowDTO `json:"flow,omitempty"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// The time the flow for the process group was last refreshed.
	LastRefreshed string `json:"lastRefreshed,omitempty"`

	// The Parameter Context, or null if no Parameter Context has been bound to the Process Group
	ParameterContext *ParameterContextReferenceEntity `json:"parameterContext,omitempty"`

	// The id of parent process group of this component if applicable.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// The URI for futures requests to the component.
	URI string `json:"uri,omitempty"`
}

// Validate validates this process group flow d t o
func (m *ProcessGroupFlowDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreadcrumb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessGroupFlowDTO) validateBreadcrumb(formats strfmt.Registry) error {
	if swag.IsZero(m.Breadcrumb) { // not required
		return nil
	}

	if m.Breadcrumb != nil {
		if err := m.Breadcrumb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breadcrumb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breadcrumb")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessGroupFlowDTO) validateFlow(formats strfmt.Registry) error {
	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	if m.Flow != nil {
		if err := m.Flow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessGroupFlowDTO) validateParameterContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterContext) { // not required
		return nil
	}

	if m.ParameterContext != nil {
		if err := m.ParameterContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContext")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this process group flow d t o based on the context it is used
func (m *ProcessGroupFlowDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreadcrumb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessGroupFlowDTO) contextValidateBreadcrumb(ctx context.Context, formats strfmt.Registry) error {

	if m.Breadcrumb != nil {

		if swag.IsZero(m.Breadcrumb) { // not required
			return nil
		}

		if err := m.Breadcrumb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breadcrumb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breadcrumb")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessGroupFlowDTO) contextValidateFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.Flow != nil {

		if swag.IsZero(m.Flow) { // not required
			return nil
		}

		if err := m.Flow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessGroupFlowDTO) contextValidateParameterContext(ctx context.Context, formats strfmt.Registry) error {

	if m.ParameterContext != nil {

		if swag.IsZero(m.ParameterContext) { // not required
			return nil
		}

		if err := m.ParameterContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContext")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessGroupFlowDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessGroupFlowDTO) UnmarshalBinary(b []byte) error {
	var res ProcessGroupFlowDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

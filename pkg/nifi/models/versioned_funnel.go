// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedFunnel versioned funnel
//
// swagger:model VersionedFunnel
type VersionedFunnel struct {

	// The user-supplied comments for the component
	Comments string `json:"comments,omitempty"`

	// component type
	// Enum: [CONNECTION PROCESSOR PROCESS_GROUP REMOTE_PROCESS_GROUP INPUT_PORT OUTPUT_PORT REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT FUNNEL LABEL CONTROLLER_SERVICE REPORTING_TASK PARAMETER_CONTEXT PARAMETER_PROVIDER TEMPLATE FLOW_REGISTRY_CLIENT]
	ComponentType string `json:"componentType,omitempty"`

	// The ID of the Process Group that this component belongs to
	GroupIdentifier string `json:"groupIdentifier,omitempty"`

	// The component's unique identifier
	Identifier string `json:"identifier,omitempty"`

	// The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
	InstanceIdentifier string `json:"instanceIdentifier,omitempty"`

	// The component's name
	Name string `json:"name,omitempty"`

	// The component's position on the graph
	Position *Position `json:"position,omitempty"`
}

// Validate validates this versioned funnel
func (m *VersionedFunnel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var versionedFunnelTypeComponentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTION","PROCESSOR","PROCESS_GROUP","REMOTE_PROCESS_GROUP","INPUT_PORT","OUTPUT_PORT","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT","FUNNEL","LABEL","CONTROLLER_SERVICE","REPORTING_TASK","PARAMETER_CONTEXT","PARAMETER_PROVIDER","TEMPLATE","FLOW_REGISTRY_CLIENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedFunnelTypeComponentTypePropEnum = append(versionedFunnelTypeComponentTypePropEnum, v)
	}
}

const (

	// VersionedFunnelComponentTypeCONNECTION captures enum value "CONNECTION"
	VersionedFunnelComponentTypeCONNECTION string = "CONNECTION"

	// VersionedFunnelComponentTypePROCESSOR captures enum value "PROCESSOR"
	VersionedFunnelComponentTypePROCESSOR string = "PROCESSOR"

	// VersionedFunnelComponentTypePROCESSGROUP captures enum value "PROCESS_GROUP"
	VersionedFunnelComponentTypePROCESSGROUP string = "PROCESS_GROUP"

	// VersionedFunnelComponentTypeREMOTEPROCESSGROUP captures enum value "REMOTE_PROCESS_GROUP"
	VersionedFunnelComponentTypeREMOTEPROCESSGROUP string = "REMOTE_PROCESS_GROUP"

	// VersionedFunnelComponentTypeINPUTPORT captures enum value "INPUT_PORT"
	VersionedFunnelComponentTypeINPUTPORT string = "INPUT_PORT"

	// VersionedFunnelComponentTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	VersionedFunnelComponentTypeOUTPUTPORT string = "OUTPUT_PORT"

	// VersionedFunnelComponentTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	VersionedFunnelComponentTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// VersionedFunnelComponentTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	VersionedFunnelComponentTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"

	// VersionedFunnelComponentTypeFUNNEL captures enum value "FUNNEL"
	VersionedFunnelComponentTypeFUNNEL string = "FUNNEL"

	// VersionedFunnelComponentTypeLABEL captures enum value "LABEL"
	VersionedFunnelComponentTypeLABEL string = "LABEL"

	// VersionedFunnelComponentTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	VersionedFunnelComponentTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// VersionedFunnelComponentTypeREPORTINGTASK captures enum value "REPORTING_TASK"
	VersionedFunnelComponentTypeREPORTINGTASK string = "REPORTING_TASK"

	// VersionedFunnelComponentTypePARAMETERCONTEXT captures enum value "PARAMETER_CONTEXT"
	VersionedFunnelComponentTypePARAMETERCONTEXT string = "PARAMETER_CONTEXT"

	// VersionedFunnelComponentTypePARAMETERPROVIDER captures enum value "PARAMETER_PROVIDER"
	VersionedFunnelComponentTypePARAMETERPROVIDER string = "PARAMETER_PROVIDER"

	// VersionedFunnelComponentTypeTEMPLATE captures enum value "TEMPLATE"
	VersionedFunnelComponentTypeTEMPLATE string = "TEMPLATE"

	// VersionedFunnelComponentTypeFLOWREGISTRYCLIENT captures enum value "FLOW_REGISTRY_CLIENT"
	VersionedFunnelComponentTypeFLOWREGISTRYCLIENT string = "FLOW_REGISTRY_CLIENT"
)

// prop value enum
func (m *VersionedFunnel) validateComponentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedFunnelTypeComponentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedFunnel) validateComponentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateComponentTypeEnum("componentType", "body", m.ComponentType); err != nil {
		return err
	}

	return nil
}

func (m *VersionedFunnel) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this versioned funnel based on the context it is used
func (m *VersionedFunnel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedFunnel) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {
		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedFunnel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedFunnel) UnmarshalBinary(b []byte) error {
	var res VersionedFunnel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

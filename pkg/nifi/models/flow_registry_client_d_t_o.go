// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowRegistryClientDTO flow registry client d t o
//
// swagger:model FlowRegistryClientDTO
type FlowRegistryClientDTO struct {

	// The annotation data for the repoting task. This is how the custom UI relays configuration to the reporting task.
	AnnotationData string `json:"annotationData,omitempty"`

	// The details of the artifact that bundled this processor type.
	Bundle *BundleDTO `json:"bundle,omitempty"`

	// Whether the reporting task has been deprecated.
	Deprecated bool `json:"deprecated,omitempty"`

	// The registry description
	Description string `json:"description,omitempty"`

	// The descriptors for the controller service properties.
	Descriptors map[string]PropertyDescriptorDTO `json:"descriptors,omitempty"`

	// Whether the underlying extension is missing.
	ExtensionMissing bool `json:"extensionMissing,omitempty"`

	// The registry identifier
	ID string `json:"id,omitempty"`

	// Whether the flow registry client has multiple versions available.
	MultipleVersionsAvailable bool `json:"multipleVersionsAvailable,omitempty"`

	// The registry name
	Name string `json:"name,omitempty"`

	// The properties of the controller service.
	Properties map[string]string `json:"properties,omitempty"`

	// Whether the reporting task requires elevated privileges.
	Restricted bool `json:"restricted,omitempty"`

	// Set of sensitive dynamic property names
	// Unique: true
	SensitiveDynamicPropertyNames []string `json:"sensitiveDynamicPropertyNames"`

	// Whether the reporting task supports sensitive dynamic properties.
	SupportsSensitiveDynamicProperties bool `json:"supportsSensitiveDynamicProperties,omitempty"`

	// The type of the controller service.
	Type string `json:"type,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`

	// Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.
	ValidationErrors []string `json:"validationErrors"`

	// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
	// Enum: [VALID INVALID VALIDATING]
	ValidationStatus string `json:"validationStatus,omitempty"`
}

// Validate validates this flow registry client d t o
func (m *FlowRegistryClientDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensitiveDynamicPropertyNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlowRegistryClientDTO) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *FlowRegistryClientDTO) validateDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.Descriptors) { // not required
		return nil
	}

	for k := range m.Descriptors {

		if err := validate.Required("descriptors"+"."+k, "body", m.Descriptors[k]); err != nil {
			return err
		}
		if val, ok := m.Descriptors[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("descriptors" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("descriptors" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *FlowRegistryClientDTO) validateSensitiveDynamicPropertyNames(formats strfmt.Registry) error {
	if swag.IsZero(m.SensitiveDynamicPropertyNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("sensitiveDynamicPropertyNames", "body", m.SensitiveDynamicPropertyNames); err != nil {
		return err
	}

	return nil
}

var flowRegistryClientDTOTypeValidationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","INVALID","VALIDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowRegistryClientDTOTypeValidationStatusPropEnum = append(flowRegistryClientDTOTypeValidationStatusPropEnum, v)
	}
}

const (

	// FlowRegistryClientDTOValidationStatusVALID captures enum value "VALID"
	FlowRegistryClientDTOValidationStatusVALID string = "VALID"

	// FlowRegistryClientDTOValidationStatusINVALID captures enum value "INVALID"
	FlowRegistryClientDTOValidationStatusINVALID string = "INVALID"

	// FlowRegistryClientDTOValidationStatusVALIDATING captures enum value "VALIDATING"
	FlowRegistryClientDTOValidationStatusVALIDATING string = "VALIDATING"
)

// prop value enum
func (m *FlowRegistryClientDTO) validateValidationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowRegistryClientDTOTypeValidationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowRegistryClientDTO) validateValidationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationStatusEnum("validationStatus", "body", m.ValidationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this flow registry client d t o based on the context it is used
func (m *FlowRegistryClientDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlowRegistryClientDTO) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {

		if swag.IsZero(m.Bundle) { // not required
			return nil
		}

		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *FlowRegistryClientDTO) contextValidateDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Descriptors {

		if val, ok := m.Descriptors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowRegistryClientDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowRegistryClientDTO) UnmarshalBinary(b []byte) error {
	var res FlowRegistryClientDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

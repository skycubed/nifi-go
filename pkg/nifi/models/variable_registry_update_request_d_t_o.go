// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VariableRegistryUpdateRequestDTO variable registry update request d t o
//
// swagger:model VariableRegistryUpdateRequestDTO
type VariableRegistryUpdateRequestDTO struct {

	// A set of all components that will be affected if the value of this variable is changed
	// Unique: true
	AffectedComponents []*AffectedComponentEntity `json:"affectedComponents"`

	// Whether or not the request is completed
	Complete bool `json:"complete,omitempty"`

	// The reason for the request failing, or null if the request has not failed
	FailureReason string `json:"failureReason,omitempty"`

	// The timestamp of when the request was last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// A value between 0 and 100 (inclusive) indicating how close the request is to completion
	PercentCompleted int32 `json:"percentCompleted,omitempty"`

	// The unique ID of the Process Group that the variable registry belongs to
	ProcessGroupID string `json:"processGroupId,omitempty"`

	// The ID of the request
	RequestID string `json:"requestId,omitempty"`

	// A description of the current state of the request
	State string `json:"state,omitempty"`

	// The timestamp of when the request was submitted
	// Format: date-time
	SubmissionTime strfmt.DateTime `json:"submissionTime,omitempty"`

	// The steps that are required in order to complete the request, along with the status of each
	UpdateSteps []*VariableRegistryUpdateStepDTO `json:"updateSteps"`

	// The URI for the request
	URI string `json:"uri,omitempty"`
}

// Validate validates this variable registry update request d t o
func (m *VariableRegistryUpdateRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariableRegistryUpdateRequestDTO) validateAffectedComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.AffectedComponents) { // not required
		return nil
	}

	if err := validate.UniqueItems("affectedComponents", "body", m.AffectedComponents); err != nil {
		return err
	}

	for i := 0; i < len(m.AffectedComponents); i++ {
		if swag.IsZero(m.AffectedComponents[i]) { // not required
			continue
		}

		if m.AffectedComponents[i] != nil {
			if err := m.AffectedComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VariableRegistryUpdateRequestDTO) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VariableRegistryUpdateRequestDTO) validateSubmissionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmissionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("submissionTime", "body", "date-time", m.SubmissionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VariableRegistryUpdateRequestDTO) validateUpdateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateSteps) { // not required
		return nil
	}

	for i := 0; i < len(m.UpdateSteps); i++ {
		if swag.IsZero(m.UpdateSteps[i]) { // not required
			continue
		}

		if m.UpdateSteps[i] != nil {
			if err := m.UpdateSteps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateSteps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this variable registry update request d t o based on the context it is used
func (m *VariableRegistryUpdateRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffectedComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariableRegistryUpdateRequestDTO) contextValidateAffectedComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AffectedComponents); i++ {

		if m.AffectedComponents[i] != nil {

			if swag.IsZero(m.AffectedComponents[i]) { // not required
				return nil
			}

			if err := m.AffectedComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VariableRegistryUpdateRequestDTO) contextValidateUpdateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpdateSteps); i++ {

		if m.UpdateSteps[i] != nil {

			if swag.IsZero(m.UpdateSteps[i]) { // not required
				return nil
			}

			if err := m.UpdateSteps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateSteps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VariableRegistryUpdateRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VariableRegistryUpdateRequestDTO) UnmarshalBinary(b []byte) error {
	var res VariableRegistryUpdateRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

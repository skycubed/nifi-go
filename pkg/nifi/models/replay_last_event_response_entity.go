// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplayLastEventResponseEntity replay last event response entity
//
// swagger:model ReplayLastEventResponseEntity
type ReplayLastEventResponseEntity struct {

	// The aggregate result of all nodes' responses
	AggregateSnapshot *ReplayLastEventSnapshotDTO `json:"aggregateSnapshot,omitempty"`

	// The UUID of the component whose last event should be replayed.
	ComponentID string `json:"componentId,omitempty"`

	// The node-wise results
	NodeSnapshots []*NodeReplayLastEventSnapshotDTO `json:"nodeSnapshots"`

	// Which nodes were requested to replay their last provenance event.
	// Enum: [ALL PRIMARY]
	Nodes string `json:"nodes,omitempty"`
}

// Validate validates this replay last event response entity
func (m *ReplayLastEventResponseEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregateSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplayLastEventResponseEntity) validateAggregateSnapshot(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregateSnapshot) { // not required
		return nil
	}

	if m.AggregateSnapshot != nil {
		if err := m.AggregateSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregateSnapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregateSnapshot")
			}
			return err
		}
	}

	return nil
}

func (m *ReplayLastEventResponseEntity) validateNodeSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeSnapshots); i++ {
		if swag.IsZero(m.NodeSnapshots[i]) { // not required
			continue
		}

		if m.NodeSnapshots[i] != nil {
			if err := m.NodeSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var replayLastEventResponseEntityTypeNodesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","PRIMARY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replayLastEventResponseEntityTypeNodesPropEnum = append(replayLastEventResponseEntityTypeNodesPropEnum, v)
	}
}

const (

	// ReplayLastEventResponseEntityNodesALL captures enum value "ALL"
	ReplayLastEventResponseEntityNodesALL string = "ALL"

	// ReplayLastEventResponseEntityNodesPRIMARY captures enum value "PRIMARY"
	ReplayLastEventResponseEntityNodesPRIMARY string = "PRIMARY"
)

// prop value enum
func (m *ReplayLastEventResponseEntity) validateNodesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, replayLastEventResponseEntityTypeNodesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReplayLastEventResponseEntity) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	// value enum
	if err := m.validateNodesEnum("nodes", "body", m.Nodes); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this replay last event response entity based on the context it is used
func (m *ReplayLastEventResponseEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregateSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplayLastEventResponseEntity) contextValidateAggregateSnapshot(ctx context.Context, formats strfmt.Registry) error {

	if m.AggregateSnapshot != nil {

		if swag.IsZero(m.AggregateSnapshot) { // not required
			return nil
		}

		if err := m.AggregateSnapshot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregateSnapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregateSnapshot")
			}
			return err
		}
	}

	return nil
}

func (m *ReplayLastEventResponseEntity) contextValidateNodeSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeSnapshots); i++ {

		if m.NodeSnapshots[i] != nil {

			if swag.IsZero(m.NodeSnapshots[i]) { // not required
				return nil
			}

			if err := m.NodeSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplayLastEventResponseEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplayLastEventResponseEntity) UnmarshalBinary(b []byte) error {
	var res ReplayLastEventResponseEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

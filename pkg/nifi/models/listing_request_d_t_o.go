// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListingRequestDTO listing request d t o
//
// swagger:model ListingRequestDTO
type ListingRequestDTO struct {

	// Whether the destination of the connection is running
	DestinationRunning bool `json:"destinationRunning,omitempty"`

	// The reason, if any, that this listing request failed.
	FailureReason string `json:"failureReason,omitempty"`

	// Whether the query has finished.
	Finished bool `json:"finished,omitempty"`

	// The FlowFile summaries. The summaries will be populated once the request has completed.
	FlowFileSummaries []*FlowFileSummaryDTO `json:"flowFileSummaries"`

	// The id for this listing request.
	ID string `json:"id,omitempty"`

	// The last time this listing request was updated.
	LastUpdated string `json:"lastUpdated,omitempty"`

	// The maximum number of FlowFileSummary objects to return
	MaxResults int32 `json:"maxResults,omitempty"`

	// The current percent complete.
	PercentCompleted int32 `json:"percentCompleted,omitempty"`

	// The size of the queue
	QueueSize *QueueSizeDTO `json:"queueSize,omitempty"`

	// Whether the source of the connection is running
	SourceRunning bool `json:"sourceRunning,omitempty"`

	// The current state of the listing request.
	State string `json:"state,omitempty"`

	// The timestamp when the query was submitted.
	SubmissionTime string `json:"submissionTime,omitempty"`

	// The URI for future requests to this listing request.
	URI string `json:"uri,omitempty"`
}

// Validate validates this listing request d t o
func (m *ListingRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlowFileSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListingRequestDTO) validateFlowFileSummaries(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowFileSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.FlowFileSummaries); i++ {
		if swag.IsZero(m.FlowFileSummaries[i]) { // not required
			continue
		}

		if m.FlowFileSummaries[i] != nil {
			if err := m.FlowFileSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flowFileSummaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flowFileSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListingRequestDTO) validateQueueSize(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueSize) { // not required
		return nil
	}

	if m.QueueSize != nil {
		if err := m.QueueSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queueSize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this listing request d t o based on the context it is used
func (m *ListingRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlowFileSummaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueueSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListingRequestDTO) contextValidateFlowFileSummaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FlowFileSummaries); i++ {

		if m.FlowFileSummaries[i] != nil {

			if swag.IsZero(m.FlowFileSummaries[i]) { // not required
				return nil
			}

			if err := m.FlowFileSummaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flowFileSummaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flowFileSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListingRequestDTO) contextValidateQueueSize(ctx context.Context, formats strfmt.Registry) error {

	if m.QueueSize != nil {

		if swag.IsZero(m.QueueSize) { // not required
			return nil
		}

		if err := m.QueueSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queueSize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListingRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListingRequestDTO) UnmarshalBinary(b []byte) error {
	var res ListingRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

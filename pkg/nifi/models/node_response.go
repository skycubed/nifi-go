// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeResponse node response
//
// swagger:model NodeResponse
type NodeResponse struct {

	// client response
	ClientResponse *Response `json:"clientResponse,omitempty"`

	// http method
	HTTPMethod string `json:"httpMethod,omitempty"`

	// input stream
	InputStream InputStream `json:"inputStream,omitempty"`

	// is2xx
	Is2xx bool `json:"is2xx,omitempty"`

	// is5xx
	Is5xx bool `json:"is5xx,omitempty"`

	// node Id
	NodeID *NodeIdentifier `json:"nodeId,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// request Uri
	// Format: uri
	RequestURI strfmt.URI `json:"requestUri,omitempty"`

	// response
	Response *Response `json:"response,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// throwable
	Throwable *Throwable `json:"throwable,omitempty"`

	// updated entity
	UpdatedEntity Entity `json:"updatedEntity,omitempty"`
}

// Validate validates this node response
func (m *NodeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrowable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeResponse) validateClientResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientResponse) { // not required
		return nil
	}

	if m.ClientResponse != nil {
		if err := m.ClientResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientResponse")
			}
			return err
		}
	}

	return nil
}

func (m *NodeResponse) validateNodeID(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeID) { // not required
		return nil
	}

	if m.NodeID != nil {
		if err := m.NodeID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeId")
			}
			return err
		}
	}

	return nil
}

func (m *NodeResponse) validateRequestURI(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestURI) { // not required
		return nil
	}

	if err := validate.FormatOf("requestUri", "body", "uri", m.RequestURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

func (m *NodeResponse) validateThrowable(formats strfmt.Registry) error {
	if swag.IsZero(m.Throwable) { // not required
		return nil
	}

	if m.Throwable != nil {
		if err := m.Throwable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throwable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throwable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node response based on the context it is used
func (m *NodeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrowable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeResponse) contextValidateClientResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientResponse != nil {

		if swag.IsZero(m.ClientResponse) { // not required
			return nil
		}

		if err := m.ClientResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientResponse")
			}
			return err
		}
	}

	return nil
}

func (m *NodeResponse) contextValidateNodeID(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeID != nil {

		if swag.IsZero(m.NodeID) { // not required
			return nil
		}

		if err := m.NodeID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeId")
			}
			return err
		}
	}

	return nil
}

func (m *NodeResponse) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.Response != nil {

		if swag.IsZero(m.Response) { // not required
			return nil
		}

		if err := m.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

func (m *NodeResponse) contextValidateThrowable(ctx context.Context, formats strfmt.Registry) error {

	if m.Throwable != nil {

		if swag.IsZero(m.Throwable) { // not required
			return nil
		}

		if err := m.Throwable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throwable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throwable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeResponse) UnmarshalBinary(b []byte) error {
	var res NodeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchResultsDTO search results d t o
//
// swagger:model SearchResultsDTO
type SearchResultsDTO struct {

	// The connections that matched the search.
	ConnectionResults []*ComponentSearchResultDTO `json:"connectionResults"`

	// The controller service nodes that matched the search
	ControllerServiceNodeResults []*ComponentSearchResultDTO `json:"controllerServiceNodeResults"`

	// The funnels that matched the search.
	FunnelResults []*ComponentSearchResultDTO `json:"funnelResults"`

	// The input ports that matched the search.
	InputPortResults []*ComponentSearchResultDTO `json:"inputPortResults"`

	// The labels that matched the search.
	LabelResults []*ComponentSearchResultDTO `json:"labelResults"`

	// The output ports that matched the search.
	OutputPortResults []*ComponentSearchResultDTO `json:"outputPortResults"`

	// The parameter contexts that matched the search.
	ParameterContextResults []*ComponentSearchResultDTO `json:"parameterContextResults"`

	// The parameters that matched the search.
	ParameterResults []*ComponentSearchResultDTO `json:"parameterResults"`

	// The process groups that matched the search.
	ProcessGroupResults []*ComponentSearchResultDTO `json:"processGroupResults"`

	// The processors that matched the search.
	ProcessorResults []*ComponentSearchResultDTO `json:"processorResults"`

	// The remote process groups that matched the search.
	RemoteProcessGroupResults []*ComponentSearchResultDTO `json:"remoteProcessGroupResults"`
}

// Validate validates this search results d t o
func (m *SearchResultsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerServiceNodeResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunnelResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputPortResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputPortResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterContextResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessGroupResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteProcessGroupResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResultsDTO) validateConnectionResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectionResults); i++ {
		if swag.IsZero(m.ConnectionResults[i]) { // not required
			continue
		}

		if m.ConnectionResults[i] != nil {
			if err := m.ConnectionResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateControllerServiceNodeResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerServiceNodeResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ControllerServiceNodeResults); i++ {
		if swag.IsZero(m.ControllerServiceNodeResults[i]) { // not required
			continue
		}

		if m.ControllerServiceNodeResults[i] != nil {
			if err := m.ControllerServiceNodeResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceNodeResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceNodeResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateFunnelResults(formats strfmt.Registry) error {
	if swag.IsZero(m.FunnelResults) { // not required
		return nil
	}

	for i := 0; i < len(m.FunnelResults); i++ {
		if swag.IsZero(m.FunnelResults[i]) { // not required
			continue
		}

		if m.FunnelResults[i] != nil {
			if err := m.FunnelResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funnelResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("funnelResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateInputPortResults(formats strfmt.Registry) error {
	if swag.IsZero(m.InputPortResults) { // not required
		return nil
	}

	for i := 0; i < len(m.InputPortResults); i++ {
		if swag.IsZero(m.InputPortResults[i]) { // not required
			continue
		}

		if m.InputPortResults[i] != nil {
			if err := m.InputPortResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPortResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPortResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateLabelResults(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelResults) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelResults); i++ {
		if swag.IsZero(m.LabelResults[i]) { // not required
			continue
		}

		if m.LabelResults[i] != nil {
			if err := m.LabelResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateOutputPortResults(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputPortResults) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputPortResults); i++ {
		if swag.IsZero(m.OutputPortResults[i]) { // not required
			continue
		}

		if m.OutputPortResults[i] != nil {
			if err := m.OutputPortResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPortResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPortResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateParameterContextResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterContextResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterContextResults); i++ {
		if swag.IsZero(m.ParameterContextResults[i]) { // not required
			continue
		}

		if m.ParameterContextResults[i] != nil {
			if err := m.ParameterContextResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterContextResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterContextResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateParameterResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterResults); i++ {
		if swag.IsZero(m.ParameterResults[i]) { // not required
			continue
		}

		if m.ParameterResults[i] != nil {
			if err := m.ParameterResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateProcessGroupResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessGroupResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessGroupResults); i++ {
		if swag.IsZero(m.ProcessGroupResults[i]) { // not required
			continue
		}

		if m.ProcessGroupResults[i] != nil {
			if err := m.ProcessGroupResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroupResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroupResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateProcessorResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessorResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessorResults); i++ {
		if swag.IsZero(m.ProcessorResults[i]) { // not required
			continue
		}

		if m.ProcessorResults[i] != nil {
			if err := m.ProcessorResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processorResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processorResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) validateRemoteProcessGroupResults(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProcessGroupResults) { // not required
		return nil
	}

	for i := 0; i < len(m.RemoteProcessGroupResults); i++ {
		if swag.IsZero(m.RemoteProcessGroupResults[i]) { // not required
			continue
		}

		if m.RemoteProcessGroupResults[i] != nil {
			if err := m.RemoteProcessGroupResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroupResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroupResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search results d t o based on the context it is used
func (m *SearchResultsDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectionResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerServiceNodeResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunnelResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputPortResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputPortResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterContextResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessGroupResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessorResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteProcessGroupResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResultsDTO) contextValidateConnectionResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectionResults); i++ {

		if m.ConnectionResults[i] != nil {

			if swag.IsZero(m.ConnectionResults[i]) { // not required
				return nil
			}

			if err := m.ConnectionResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateControllerServiceNodeResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerServiceNodeResults); i++ {

		if m.ControllerServiceNodeResults[i] != nil {

			if swag.IsZero(m.ControllerServiceNodeResults[i]) { // not required
				return nil
			}

			if err := m.ControllerServiceNodeResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceNodeResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceNodeResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateFunnelResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FunnelResults); i++ {

		if m.FunnelResults[i] != nil {

			if swag.IsZero(m.FunnelResults[i]) { // not required
				return nil
			}

			if err := m.FunnelResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funnelResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("funnelResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateInputPortResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputPortResults); i++ {

		if m.InputPortResults[i] != nil {

			if swag.IsZero(m.InputPortResults[i]) { // not required
				return nil
			}

			if err := m.InputPortResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPortResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPortResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateLabelResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelResults); i++ {

		if m.LabelResults[i] != nil {

			if swag.IsZero(m.LabelResults[i]) { // not required
				return nil
			}

			if err := m.LabelResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateOutputPortResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputPortResults); i++ {

		if m.OutputPortResults[i] != nil {

			if swag.IsZero(m.OutputPortResults[i]) { // not required
				return nil
			}

			if err := m.OutputPortResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPortResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPortResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateParameterContextResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParameterContextResults); i++ {

		if m.ParameterContextResults[i] != nil {

			if swag.IsZero(m.ParameterContextResults[i]) { // not required
				return nil
			}

			if err := m.ParameterContextResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterContextResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterContextResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateParameterResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParameterResults); i++ {

		if m.ParameterResults[i] != nil {

			if swag.IsZero(m.ParameterResults[i]) { // not required
				return nil
			}

			if err := m.ParameterResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateProcessGroupResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessGroupResults); i++ {

		if m.ProcessGroupResults[i] != nil {

			if swag.IsZero(m.ProcessGroupResults[i]) { // not required
				return nil
			}

			if err := m.ProcessGroupResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroupResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroupResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateProcessorResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessorResults); i++ {

		if m.ProcessorResults[i] != nil {

			if swag.IsZero(m.ProcessorResults[i]) { // not required
				return nil
			}

			if err := m.ProcessorResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processorResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processorResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResultsDTO) contextValidateRemoteProcessGroupResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemoteProcessGroupResults); i++ {

		if m.RemoteProcessGroupResults[i] != nil {

			if swag.IsZero(m.RemoteProcessGroupResults[i]) { // not required
				return nil
			}

			if err := m.RemoteProcessGroupResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroupResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroupResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchResultsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResultsDTO) UnmarshalBinary(b []byte) error {
	var res SearchResultsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

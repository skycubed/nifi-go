// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThreadDumpDTO thread dump d t o
//
// swagger:model ThreadDumpDTO
type ThreadDumpDTO struct {

	// The port the node is listening for API requests.
	APIPort int32 `json:"apiPort,omitempty"`

	// The address of the node in the cluster
	NodeAddress string `json:"nodeAddress,omitempty"`

	// The ID of the node in the cluster
	NodeID string `json:"nodeId,omitempty"`

	// The stack trace for the thread
	StackTrace string `json:"stackTrace,omitempty"`

	// Indicates whether or not the user has requested that the task be terminated. If this is true, it may indicate that the thread is in a state where it will continue running indefinitely without returning.
	TaskTerminated bool `json:"taskTerminated,omitempty"`

	// The number of milliseconds that the thread has been executing in the Processor
	ThreadActiveMillis int64 `json:"threadActiveMillis,omitempty"`

	// The name of the thread
	ThreadName string `json:"threadName,omitempty"`
}

// Validate validates this thread dump d t o
func (m *ThreadDumpDTO) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this thread dump d t o based on context it is used
func (m *ThreadDumpDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThreadDumpDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThreadDumpDTO) UnmarshalBinary(b []byte) error {
	var res ThreadDumpDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

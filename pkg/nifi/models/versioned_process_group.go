// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedProcessGroup versioned process group
//
// swagger:model VersionedProcessGroup
type VersionedProcessGroup struct {

	// The user-supplied comments for the component
	Comments string `json:"comments,omitempty"`

	// component type
	// Enum: [CONNECTION PROCESSOR PROCESS_GROUP REMOTE_PROCESS_GROUP INPUT_PORT OUTPUT_PORT REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT FUNNEL LABEL CONTROLLER_SERVICE REPORTING_TASK PARAMETER_CONTEXT PARAMETER_PROVIDER TEMPLATE FLOW_REGISTRY_CLIENT]
	ComponentType string `json:"componentType,omitempty"`

	// The Connections
	// Unique: true
	Connections []*VersionedConnection `json:"connections"`

	// The Controller Services
	// Unique: true
	ControllerServices []*VersionedControllerService `json:"controllerServices"`

	// Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.
	DefaultBackPressureDataSizeThreshold string `json:"defaultBackPressureDataSizeThreshold,omitempty"`

	// Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.
	DefaultBackPressureObjectThreshold int64 `json:"defaultBackPressureObjectThreshold,omitempty"`

	// The default FlowFile Expiration for this Process Group.
	DefaultFlowFileExpiration string `json:"defaultFlowFileExpiration,omitempty"`

	// The configured FlowFile Concurrency for the Process Group
	FlowFileConcurrency string `json:"flowFileConcurrency,omitempty"`

	// The FlowFile Outbound Policy for the Process Group
	FlowFileOutboundPolicy string `json:"flowFileOutboundPolicy,omitempty"`

	// The Funnels
	// Unique: true
	Funnels []*VersionedFunnel `json:"funnels"`

	// The ID of the Process Group that this component belongs to
	GroupIdentifier string `json:"groupIdentifier,omitempty"`

	// The component's unique identifier
	Identifier string `json:"identifier,omitempty"`

	// The Input Ports
	// Unique: true
	InputPorts []*VersionedPort `json:"inputPorts"`

	// The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
	InstanceIdentifier string `json:"instanceIdentifier,omitempty"`

	// The Labels
	// Unique: true
	Labels []*VersionedLabel `json:"labels"`

	// The component's name
	Name string `json:"name,omitempty"`

	// The Output Ports
	// Unique: true
	OutputPorts []*VersionedPort `json:"outputPorts"`

	// The name of the parameter context used by this process group
	ParameterContextName string `json:"parameterContextName,omitempty"`

	// The component's position on the graph
	Position *Position `json:"position,omitempty"`

	// The child Process Groups
	// Unique: true
	ProcessGroups []*VersionedProcessGroup `json:"processGroups"`

	// The Processors
	// Unique: true
	Processors []*VersionedProcessor `json:"processors"`

	// The Remote Process Groups
	// Unique: true
	RemoteProcessGroups []*VersionedRemoteProcessGroup `json:"remoteProcessGroups"`

	// The Variables in the Variable Registry for this Process Group (not including any ancestor or descendant Process Groups)
	Variables map[string]string `json:"variables,omitempty"`

	// The coordinates where the remote flow is stored, or null if the Process Group is not directly under Version Control
	VersionedFlowCoordinates *VersionedFlowCoordinates `json:"versionedFlowCoordinates,omitempty"`
}

// Validate validates this versioned process group
func (m *VersionedProcessGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunnels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteProcessGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionedFlowCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var versionedProcessGroupTypeComponentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTION","PROCESSOR","PROCESS_GROUP","REMOTE_PROCESS_GROUP","INPUT_PORT","OUTPUT_PORT","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT","FUNNEL","LABEL","CONTROLLER_SERVICE","REPORTING_TASK","PARAMETER_CONTEXT","PARAMETER_PROVIDER","TEMPLATE","FLOW_REGISTRY_CLIENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedProcessGroupTypeComponentTypePropEnum = append(versionedProcessGroupTypeComponentTypePropEnum, v)
	}
}

const (

	// VersionedProcessGroupComponentTypeCONNECTION captures enum value "CONNECTION"
	VersionedProcessGroupComponentTypeCONNECTION string = "CONNECTION"

	// VersionedProcessGroupComponentTypePROCESSOR captures enum value "PROCESSOR"
	VersionedProcessGroupComponentTypePROCESSOR string = "PROCESSOR"

	// VersionedProcessGroupComponentTypePROCESSGROUP captures enum value "PROCESS_GROUP"
	VersionedProcessGroupComponentTypePROCESSGROUP string = "PROCESS_GROUP"

	// VersionedProcessGroupComponentTypeREMOTEPROCESSGROUP captures enum value "REMOTE_PROCESS_GROUP"
	VersionedProcessGroupComponentTypeREMOTEPROCESSGROUP string = "REMOTE_PROCESS_GROUP"

	// VersionedProcessGroupComponentTypeINPUTPORT captures enum value "INPUT_PORT"
	VersionedProcessGroupComponentTypeINPUTPORT string = "INPUT_PORT"

	// VersionedProcessGroupComponentTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	VersionedProcessGroupComponentTypeOUTPUTPORT string = "OUTPUT_PORT"

	// VersionedProcessGroupComponentTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	VersionedProcessGroupComponentTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// VersionedProcessGroupComponentTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	VersionedProcessGroupComponentTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"

	// VersionedProcessGroupComponentTypeFUNNEL captures enum value "FUNNEL"
	VersionedProcessGroupComponentTypeFUNNEL string = "FUNNEL"

	// VersionedProcessGroupComponentTypeLABEL captures enum value "LABEL"
	VersionedProcessGroupComponentTypeLABEL string = "LABEL"

	// VersionedProcessGroupComponentTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	VersionedProcessGroupComponentTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// VersionedProcessGroupComponentTypeREPORTINGTASK captures enum value "REPORTING_TASK"
	VersionedProcessGroupComponentTypeREPORTINGTASK string = "REPORTING_TASK"

	// VersionedProcessGroupComponentTypePARAMETERCONTEXT captures enum value "PARAMETER_CONTEXT"
	VersionedProcessGroupComponentTypePARAMETERCONTEXT string = "PARAMETER_CONTEXT"

	// VersionedProcessGroupComponentTypePARAMETERPROVIDER captures enum value "PARAMETER_PROVIDER"
	VersionedProcessGroupComponentTypePARAMETERPROVIDER string = "PARAMETER_PROVIDER"

	// VersionedProcessGroupComponentTypeTEMPLATE captures enum value "TEMPLATE"
	VersionedProcessGroupComponentTypeTEMPLATE string = "TEMPLATE"

	// VersionedProcessGroupComponentTypeFLOWREGISTRYCLIENT captures enum value "FLOW_REGISTRY_CLIENT"
	VersionedProcessGroupComponentTypeFLOWREGISTRYCLIENT string = "FLOW_REGISTRY_CLIENT"
)

// prop value enum
func (m *VersionedProcessGroup) validateComponentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedProcessGroupTypeComponentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedProcessGroup) validateComponentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateComponentTypeEnum("componentType", "body", m.ComponentType); err != nil {
		return err
	}

	return nil
}

func (m *VersionedProcessGroup) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	if err := validate.UniqueItems("connections", "body", m.Connections); err != nil {
		return err
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateControllerServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerServices) { // not required
		return nil
	}

	if err := validate.UniqueItems("controllerServices", "body", m.ControllerServices); err != nil {
		return err
	}

	for i := 0; i < len(m.ControllerServices); i++ {
		if swag.IsZero(m.ControllerServices[i]) { // not required
			continue
		}

		if m.ControllerServices[i] != nil {
			if err := m.ControllerServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateFunnels(formats strfmt.Registry) error {
	if swag.IsZero(m.Funnels) { // not required
		return nil
	}

	if err := validate.UniqueItems("funnels", "body", m.Funnels); err != nil {
		return err
	}

	for i := 0; i < len(m.Funnels); i++ {
		if swag.IsZero(m.Funnels[i]) { // not required
			continue
		}

		if m.Funnels[i] != nil {
			if err := m.Funnels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funnels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("funnels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateInputPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.InputPorts) { // not required
		return nil
	}

	if err := validate.UniqueItems("inputPorts", "body", m.InputPorts); err != nil {
		return err
	}

	for i := 0; i < len(m.InputPorts); i++ {
		if swag.IsZero(m.InputPorts[i]) { // not required
			continue
		}

		if m.InputPorts[i] != nil {
			if err := m.InputPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if err := validate.UniqueItems("labels", "body", m.Labels); err != nil {
		return err
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateOutputPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputPorts) { // not required
		return nil
	}

	if err := validate.UniqueItems("outputPorts", "body", m.OutputPorts); err != nil {
		return err
	}

	for i := 0; i < len(m.OutputPorts); i++ {
		if swag.IsZero(m.OutputPorts[i]) { // not required
			continue
		}

		if m.OutputPorts[i] != nil {
			if err := m.OutputPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedProcessGroup) validateProcessGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("processGroups", "body", m.ProcessGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.ProcessGroups); i++ {
		if swag.IsZero(m.ProcessGroups[i]) { // not required
			continue
		}

		if m.ProcessGroups[i] != nil {
			if err := m.ProcessGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateProcessors(formats strfmt.Registry) error {
	if swag.IsZero(m.Processors) { // not required
		return nil
	}

	if err := validate.UniqueItems("processors", "body", m.Processors); err != nil {
		return err
	}

	for i := 0; i < len(m.Processors); i++ {
		if swag.IsZero(m.Processors[i]) { // not required
			continue
		}

		if m.Processors[i] != nil {
			if err := m.Processors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateRemoteProcessGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProcessGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("remoteProcessGroups", "body", m.RemoteProcessGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.RemoteProcessGroups); i++ {
		if swag.IsZero(m.RemoteProcessGroups[i]) { // not required
			continue
		}

		if m.RemoteProcessGroups[i] != nil {
			if err := m.RemoteProcessGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) validateVersionedFlowCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionedFlowCoordinates) { // not required
		return nil
	}

	if m.VersionedFlowCoordinates != nil {
		if err := m.VersionedFlowCoordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionedFlowCoordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionedFlowCoordinates")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this versioned process group based on the context it is used
func (m *VersionedProcessGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunnels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteProcessGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionedFlowCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedProcessGroup) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {

			if swag.IsZero(m.Connections[i]) { // not required
				return nil
			}

			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateControllerServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerServices); i++ {

		if m.ControllerServices[i] != nil {

			if swag.IsZero(m.ControllerServices[i]) { // not required
				return nil
			}

			if err := m.ControllerServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateFunnels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Funnels); i++ {

		if m.Funnels[i] != nil {

			if swag.IsZero(m.Funnels[i]) { // not required
				return nil
			}

			if err := m.Funnels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funnels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("funnels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateInputPorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputPorts); i++ {

		if m.InputPorts[i] != nil {

			if swag.IsZero(m.InputPorts[i]) { // not required
				return nil
			}

			if err := m.InputPorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {

			if swag.IsZero(m.Labels[i]) { // not required
				return nil
			}

			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateOutputPorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputPorts); i++ {

		if m.OutputPorts[i] != nil {

			if swag.IsZero(m.OutputPorts[i]) { // not required
				return nil
			}

			if err := m.OutputPorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateProcessGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessGroups); i++ {

		if m.ProcessGroups[i] != nil {

			if swag.IsZero(m.ProcessGroups[i]) { // not required
				return nil
			}

			if err := m.ProcessGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateProcessors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Processors); i++ {

		if m.Processors[i] != nil {

			if swag.IsZero(m.Processors[i]) { // not required
				return nil
			}

			if err := m.Processors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateRemoteProcessGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemoteProcessGroups); i++ {

		if m.RemoteProcessGroups[i] != nil {

			if swag.IsZero(m.RemoteProcessGroups[i]) { // not required
				return nil
			}

			if err := m.RemoteProcessGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionedProcessGroup) contextValidateVersionedFlowCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionedFlowCoordinates != nil {

		if swag.IsZero(m.VersionedFlowCoordinates) { // not required
			return nil
		}

		if err := m.VersionedFlowCoordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionedFlowCoordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionedFlowCoordinates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedProcessGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedProcessGroup) UnmarshalBinary(b []byte) error {
	var res VersionedProcessGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

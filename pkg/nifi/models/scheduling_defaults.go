// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchedulingDefaults scheduling defaults
//
// swagger:model SchedulingDefaults
type SchedulingDefaults struct {

	// The default concurrent tasks for each scheduling strategy
	DefaultConcurrentTasksBySchedulingStrategy map[string]int32 `json:"defaultConcurrentTasksBySchedulingStrategy,omitempty"`

	// The default concurrent tasks
	DefaultMaxConcurrentTasks string `json:"defaultMaxConcurrentTasks,omitempty"`

	// The default run duration in nano-seconds
	DefaultRunDurationNanos int64 `json:"defaultRunDurationNanos,omitempty"`

	// The default scheduling period in milliseconds
	DefaultSchedulingPeriodMillis int64 `json:"defaultSchedulingPeriodMillis,omitempty"`

	// The default scheduling period for each scheduling strategy
	DefaultSchedulingPeriodsBySchedulingStrategy map[string]string `json:"defaultSchedulingPeriodsBySchedulingStrategy,omitempty"`

	// The name of the default scheduling strategy
	// Enum: [EVENT_DRIVEN TIMER_DRIVEN PRIMARY_NODE_ONLY CRON_DRIVEN]
	DefaultSchedulingStrategy string `json:"defaultSchedulingStrategy,omitempty"`

	// The default penalization period in milliseconds
	PenalizationPeriodMillis int64 `json:"penalizationPeriodMillis,omitempty"`

	// The default yield duration in milliseconds
	YieldDurationMillis int64 `json:"yieldDurationMillis,omitempty"`
}

// Validate validates this scheduling defaults
func (m *SchedulingDefaults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultSchedulingStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var schedulingDefaultsTypeDefaultSchedulingStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EVENT_DRIVEN","TIMER_DRIVEN","PRIMARY_NODE_ONLY","CRON_DRIVEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		schedulingDefaultsTypeDefaultSchedulingStrategyPropEnum = append(schedulingDefaultsTypeDefaultSchedulingStrategyPropEnum, v)
	}
}

const (

	// SchedulingDefaultsDefaultSchedulingStrategyEVENTDRIVEN captures enum value "EVENT_DRIVEN"
	SchedulingDefaultsDefaultSchedulingStrategyEVENTDRIVEN string = "EVENT_DRIVEN"

	// SchedulingDefaultsDefaultSchedulingStrategyTIMERDRIVEN captures enum value "TIMER_DRIVEN"
	SchedulingDefaultsDefaultSchedulingStrategyTIMERDRIVEN string = "TIMER_DRIVEN"

	// SchedulingDefaultsDefaultSchedulingStrategyPRIMARYNODEONLY captures enum value "PRIMARY_NODE_ONLY"
	SchedulingDefaultsDefaultSchedulingStrategyPRIMARYNODEONLY string = "PRIMARY_NODE_ONLY"

	// SchedulingDefaultsDefaultSchedulingStrategyCRONDRIVEN captures enum value "CRON_DRIVEN"
	SchedulingDefaultsDefaultSchedulingStrategyCRONDRIVEN string = "CRON_DRIVEN"
)

// prop value enum
func (m *SchedulingDefaults) validateDefaultSchedulingStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, schedulingDefaultsTypeDefaultSchedulingStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SchedulingDefaults) validateDefaultSchedulingStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultSchedulingStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultSchedulingStrategyEnum("defaultSchedulingStrategy", "body", m.DefaultSchedulingStrategy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scheduling defaults based on context it is used
func (m *SchedulingDefaults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SchedulingDefaults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulingDefaults) UnmarshalBinary(b []byte) error {
	var res SchedulingDefaults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

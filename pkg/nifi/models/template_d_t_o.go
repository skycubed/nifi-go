// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TemplateDTO template d t o
//
// swagger:model TemplateDTO
type TemplateDTO struct {

	// The description of the template.
	Description string `json:"description,omitempty"`

	// The encoding version of this template.
	EncodingVersion string `json:"encodingVersion,omitempty" xml:"encoding-version,attr,omitempty"`

	// The id of the Process Group that the template belongs to.
	GroupID string `json:"groupId,omitempty"`

	// The id of the template.
	ID string `json:"id,omitempty"`

	// The name of the template.
	Name string `json:"name,omitempty"`

	// The contents of the template.
	Snippet *FlowSnippetDTO `json:"snippet,omitempty"`

	// The timestamp when this template was created.
	Timestamp string `json:"timestamp,omitempty"`

	// The URI for the template.
	URI string `json:"uri,omitempty"`
}

// Validate validates this template d t o
func (m *TemplateDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnippet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplateDTO) validateSnippet(formats strfmt.Registry) error {
	if swag.IsZero(m.Snippet) { // not required
		return nil
	}

	if m.Snippet != nil {
		if err := m.Snippet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snippet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snippet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this template d t o based on the context it is used
func (m *TemplateDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnippet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplateDTO) contextValidateSnippet(ctx context.Context, formats strfmt.Registry) error {

	if m.Snippet != nil {

		if swag.IsZero(m.Snippet) { // not required
			return nil
		}

		if err := m.Snippet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snippet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snippet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemplateDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplateDTO) UnmarshalBinary(b []byte) error {
	var res TemplateDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

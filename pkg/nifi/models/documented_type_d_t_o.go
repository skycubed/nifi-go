// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentedTypeDTO documented type d t o
//
// swagger:model DocumentedTypeDTO
type DocumentedTypeDTO struct {

	// The details of the artifact that bundled this type.
	Bundle *BundleDTO `json:"bundle,omitempty"`

	// If this type represents a ControllerService, this lists the APIs it implements.
	ControllerServiceApis []*ControllerServiceAPIDTO `json:"controllerServiceApis"`

	// The description of why the usage of this component is restricted.
	DeprecationReason string `json:"deprecationReason,omitempty"`

	// The description of the type.
	Description string `json:"description,omitempty"`

	// An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.
	// Unique: true
	ExplicitRestrictions []*ExplicitRestrictionDTO `json:"explicitRestrictions"`

	// Whether this type is restricted.
	Restricted bool `json:"restricted,omitempty"`

	// The tags associated with this type.
	// Unique: true
	Tags []string `json:"tags"`

	// The fully qualified name of the type.
	Type string `json:"type,omitempty"`

	// The optional description of why the usage of this component is restricted.
	UsageRestriction string `json:"usageRestriction,omitempty"`
}

// Validate validates this documented type d t o
func (m *DocumentedTypeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerServiceApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExplicitRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentedTypeDTO) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentedTypeDTO) validateControllerServiceApis(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerServiceApis) { // not required
		return nil
	}

	for i := 0; i < len(m.ControllerServiceApis); i++ {
		if swag.IsZero(m.ControllerServiceApis[i]) { // not required
			continue
		}

		if m.ControllerServiceApis[i] != nil {
			if err := m.ControllerServiceApis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DocumentedTypeDTO) validateExplicitRestrictions(formats strfmt.Registry) error {
	if swag.IsZero(m.ExplicitRestrictions) { // not required
		return nil
	}

	if err := validate.UniqueItems("explicitRestrictions", "body", m.ExplicitRestrictions); err != nil {
		return err
	}

	for i := 0; i < len(m.ExplicitRestrictions); i++ {
		if swag.IsZero(m.ExplicitRestrictions[i]) { // not required
			continue
		}

		if m.ExplicitRestrictions[i] != nil {
			if err := m.ExplicitRestrictions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("explicitRestrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("explicitRestrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DocumentedTypeDTO) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this documented type d t o based on the context it is used
func (m *DocumentedTypeDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerServiceApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExplicitRestrictions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentedTypeDTO) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {
		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *DocumentedTypeDTO) contextValidateControllerServiceApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerServiceApis); i++ {

		if m.ControllerServiceApis[i] != nil {
			if err := m.ControllerServiceApis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DocumentedTypeDTO) contextValidateExplicitRestrictions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExplicitRestrictions); i++ {

		if m.ExplicitRestrictions[i] != nil {
			if err := m.ExplicitRestrictions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("explicitRestrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("explicitRestrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DocumentedTypeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentedTypeDTO) UnmarshalBinary(b []byte) error {
	var res DocumentedTypeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

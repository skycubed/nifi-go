// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JVMDiagnosticsSnapshotDTO j VM diagnostics snapshot d t o
//
// swagger:model JVMDiagnosticsSnapshotDTO
type JVMDiagnosticsSnapshotDTO struct {

	// Controller-related diagnostics information
	ControllerDiagnostics *JVMControllerDiagnosticsSnapshotDTO `json:"controllerDiagnostics,omitempty"`

	// Flow-related diagnostics information
	FlowDiagnosticsDto *JVMFlowDiagnosticsSnapshotDTO `json:"flowDiagnosticsDto,omitempty"`

	// System-related diagnostics information
	SystemDiagnosticsDto *JVMSystemDiagnosticsSnapshotDTO `json:"systemDiagnosticsDto,omitempty"`
}

// Validate validates this j VM diagnostics snapshot d t o
func (m *JVMDiagnosticsSnapshotDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerDiagnostics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowDiagnosticsDto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemDiagnosticsDto(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JVMDiagnosticsSnapshotDTO) validateControllerDiagnostics(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerDiagnostics) { // not required
		return nil
	}

	if m.ControllerDiagnostics != nil {
		if err := m.ControllerDiagnostics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *JVMDiagnosticsSnapshotDTO) validateFlowDiagnosticsDto(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowDiagnosticsDto) { // not required
		return nil
	}

	if m.FlowDiagnosticsDto != nil {
		if err := m.FlowDiagnosticsDto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flowDiagnosticsDto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flowDiagnosticsDto")
			}
			return err
		}
	}

	return nil
}

func (m *JVMDiagnosticsSnapshotDTO) validateSystemDiagnosticsDto(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemDiagnosticsDto) { // not required
		return nil
	}

	if m.SystemDiagnosticsDto != nil {
		if err := m.SystemDiagnosticsDto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemDiagnosticsDto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("systemDiagnosticsDto")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this j VM diagnostics snapshot d t o based on the context it is used
func (m *JVMDiagnosticsSnapshotDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControllerDiagnostics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlowDiagnosticsDto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemDiagnosticsDto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JVMDiagnosticsSnapshotDTO) contextValidateControllerDiagnostics(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerDiagnostics != nil {

		if swag.IsZero(m.ControllerDiagnostics) { // not required
			return nil
		}

		if err := m.ControllerDiagnostics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *JVMDiagnosticsSnapshotDTO) contextValidateFlowDiagnosticsDto(ctx context.Context, formats strfmt.Registry) error {

	if m.FlowDiagnosticsDto != nil {

		if swag.IsZero(m.FlowDiagnosticsDto) { // not required
			return nil
		}

		if err := m.FlowDiagnosticsDto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flowDiagnosticsDto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flowDiagnosticsDto")
			}
			return err
		}
	}

	return nil
}

func (m *JVMDiagnosticsSnapshotDTO) contextValidateSystemDiagnosticsDto(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemDiagnosticsDto != nil {

		if swag.IsZero(m.SystemDiagnosticsDto) { // not required
			return nil
		}

		if err := m.SystemDiagnosticsDto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemDiagnosticsDto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("systemDiagnosticsDto")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JVMDiagnosticsSnapshotDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JVMDiagnosticsSnapshotDTO) UnmarshalBinary(b []byte) error {
	var res JVMDiagnosticsSnapshotDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

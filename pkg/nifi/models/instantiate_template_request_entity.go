// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InstantiateTemplateRequestEntity instantiate template request entity
//
// swagger:model InstantiateTemplateRequestEntity
type InstantiateTemplateRequestEntity struct {

	// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
	DisconnectedNodeAcknowledged bool `json:"disconnectedNodeAcknowledged,omitempty"`

	// The encoding version of the flow snippet. If not specified, this is automatically populated by the node receiving the user request. If the snippet is specified, the version will be the latest. If the snippet is not specified, the version will come from the underlying template. These details need to be replicated throughout the cluster to ensure consistency.
	EncodingVersion string `json:"encodingVersion,omitempty"`

	// The x coordinate of the origin of the bounding box where the new components will be placed.
	OriginX float64 `json:"originX,omitempty"`

	// The y coordinate of the origin of the bounding box where the new components will be placed.
	OriginY float64 `json:"originY,omitempty"`

	// A flow snippet of the template contents. If not specified, this is automatically populated by the node receiving the user request. These details need to be replicated throughout the cluster to ensure consistency.
	Snippet *FlowSnippetDTO `json:"snippet,omitempty"`

	// The identifier of the template.
	TemplateID string `json:"templateId,omitempty"`
}

// Validate validates this instantiate template request entity
func (m *InstantiateTemplateRequestEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnippet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantiateTemplateRequestEntity) validateSnippet(formats strfmt.Registry) error {
	if swag.IsZero(m.Snippet) { // not required
		return nil
	}

	if m.Snippet != nil {
		if err := m.Snippet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snippet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snippet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this instantiate template request entity based on the context it is used
func (m *InstantiateTemplateRequestEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnippet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantiateTemplateRequestEntity) contextValidateSnippet(ctx context.Context, formats strfmt.Registry) error {

	if m.Snippet != nil {
		if err := m.Snippet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snippet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snippet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstantiateTemplateRequestEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantiateTemplateRequestEntity) UnmarshalBinary(b []byte) error {
	var res InstantiateTemplateRequestEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

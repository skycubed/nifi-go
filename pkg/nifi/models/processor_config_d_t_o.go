// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessorConfigDTO processor config d t o
//
// swagger:model ProcessorConfigDTO
type ProcessorConfigDTO struct {

	// The annotation data for the processor used to relay configuration between a custom UI and the procesosr.
	AnnotationData string `json:"annotationData,omitempty"`

	// The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated.
	// Unique: true
	AutoTerminatedRelationships []string `json:"autoTerminatedRelationships"`

	// The level at which the processor will report bulletins.
	BulletinLevel string `json:"bulletinLevel,omitempty"`

	// The comments for the processor.
	Comments string `json:"comments,omitempty"`

	// The number of tasks that should be concurrently schedule for the processor. If the processor doesn't allow parallol processing then any positive input will be ignored.
	ConcurrentlySchedulableTaskCount int32 `json:"concurrentlySchedulableTaskCount,omitempty"`

	// The URL for the processor's custom configuration UI if applicable.
	CustomUIURL string `json:"customUiUrl,omitempty"`

	// Maps default values for concurrent tasks for each applicable scheduling strategy.
	DefaultConcurrentTasks map[string]string `json:"defaultConcurrentTasks,omitempty"`

	// Maps default values for scheduling period for each applicable scheduling strategy.
	DefaultSchedulingPeriod map[string]string `json:"defaultSchedulingPeriod,omitempty"`

	// Descriptors for the processor's properties.
	Descriptors map[string]PropertyDescriptorDTO `json:"descriptors,omitempty"`

	// Indicates the node where the process will execute.
	ExecutionNode string `json:"executionNode,omitempty"`

	// Whether the processor is loss tolerant.
	LossTolerant bool `json:"lossTolerant,omitempty"`

	// The amount of time that is used when the process penalizes a flowfile.
	PenaltyDuration string `json:"penaltyDuration,omitempty"`

	// The properties for the processor. Properties whose value is not set will only contain the property name.
	Properties map[string]string `json:"properties,omitempty"`

	// The run duration for the processor in milliseconds.
	RunDurationMillis int64 `json:"runDurationMillis,omitempty"`

	// The frequency with which to schedule the processor. The format of the value will depend on th value of schedulingStrategy.
	SchedulingPeriod string `json:"schedulingPeriod,omitempty"`

	// Indcates whether the prcessor should be scheduled to run in event or timer driven mode.
	SchedulingStrategy string `json:"schedulingStrategy,omitempty"`

	// The amount of time that must elapse before this processor is scheduled again after yielding.
	YieldDuration string `json:"yieldDuration,omitempty"`
}

// Validate validates this processor config d t o
func (m *ProcessorConfigDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoTerminatedRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorConfigDTO) validateAutoTerminatedRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoTerminatedRelationships) { // not required
		return nil
	}

	if err := validate.UniqueItems("autoTerminatedRelationships", "body", m.AutoTerminatedRelationships); err != nil {
		return err
	}

	return nil
}

func (m *ProcessorConfigDTO) validateDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.Descriptors) { // not required
		return nil
	}

	for k := range m.Descriptors {

		if err := validate.Required("descriptors"+"."+k, "body", m.Descriptors[k]); err != nil {
			return err
		}
		if val, ok := m.Descriptors[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("descriptors" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("descriptors" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this processor config d t o based on the context it is used
func (m *ProcessorConfigDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorConfigDTO) contextValidateDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Descriptors {

		if val, ok := m.Descriptors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessorConfigDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessorConfigDTO) UnmarshalBinary(b []byte) error {
	var res ProcessorConfigDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedFlowDTO versioned flow d t o
//
// swagger:model VersionedFlowDTO
type VersionedFlowDTO struct {

	// The action being performed
	// Enum: [COMMIT FORCE_COMMIT]
	Action string `json:"action,omitempty"`

	// The ID of the bucket where the flow is stored
	BucketID string `json:"bucketId,omitempty"`

	// Comments for the changeset
	Comments string `json:"comments,omitempty"`

	// A description of the flow
	Description string `json:"description,omitempty"`

	// The ID of the flow
	FlowID string `json:"flowId,omitempty"`

	// The name of the flow
	FlowName string `json:"flowName,omitempty"`

	// The ID of the registry that the flow is tracked to
	RegistryID string `json:"registryId,omitempty"`
}

// Validate validates this versioned flow d t o
func (m *VersionedFlowDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var versionedFlowDTOTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMMIT","FORCE_COMMIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionedFlowDTOTypeActionPropEnum = append(versionedFlowDTOTypeActionPropEnum, v)
	}
}

const (

	// VersionedFlowDTOActionCOMMIT captures enum value "COMMIT"
	VersionedFlowDTOActionCOMMIT string = "COMMIT"

	// VersionedFlowDTOActionFORCECOMMIT captures enum value "FORCE_COMMIT"
	VersionedFlowDTOActionFORCECOMMIT string = "FORCE_COMMIT"
)

// prop value enum
func (m *VersionedFlowDTO) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionedFlowDTOTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionedFlowDTO) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this versioned flow d t o based on context it is used
func (m *VersionedFlowDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VersionedFlowDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedFlowDTO) UnmarshalBinary(b []byte) error {
	var res VersionedFlowDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

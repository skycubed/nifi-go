// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteProcessGroupStatusEntity remote process group status entity
//
// swagger:model RemoteProcessGroupStatusEntity
type RemoteProcessGroupStatusEntity struct {

	// Indicates whether the user can read a given resource.
	CanRead bool `json:"canRead,omitempty"`

	// remote process group status
	RemoteProcessGroupStatus *RemoteProcessGroupStatusDTO `json:"remoteProcessGroupStatus,omitempty"`
}

// Validate validates this remote process group status entity
func (m *RemoteProcessGroupStatusEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoteProcessGroupStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteProcessGroupStatusEntity) validateRemoteProcessGroupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProcessGroupStatus) { // not required
		return nil
	}

	if m.RemoteProcessGroupStatus != nil {
		if err := m.RemoteProcessGroupStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteProcessGroupStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteProcessGroupStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this remote process group status entity based on the context it is used
func (m *RemoteProcessGroupStatusEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRemoteProcessGroupStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteProcessGroupStatusEntity) contextValidateRemoteProcessGroupStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteProcessGroupStatus != nil {
		if err := m.RemoteProcessGroupStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteProcessGroupStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteProcessGroupStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteProcessGroupStatusEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteProcessGroupStatusEntity) UnmarshalBinary(b []byte) error {
	var res RemoteProcessGroupStatusEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RepositoryUsageDTO repository usage d t o
//
// swagger:model RepositoryUsageDTO
type RepositoryUsageDTO struct {

	// A SHA-256 hash of the File Store name/path that is used to store the repository's data. This information is exposed as a hash in order to avoid exposing potentially sensitive information that is not generally relevant. What is typically relevant is whether or not multiple repositories on the same node are using the same File Store, as this indicates that the repositories are competing for the resources of the backing disk/storage mechanism.
	FileStoreHash string `json:"fileStoreHash,omitempty"`

	// Amount of free space.
	FreeSpace string `json:"freeSpace,omitempty"`

	// The number of bytes of free space.
	FreeSpaceBytes int64 `json:"freeSpaceBytes,omitempty"`

	// The name of the repository
	Name string `json:"name,omitempty"`

	// Amount of total space.
	TotalSpace string `json:"totalSpace,omitempty"`

	// The number of bytes of total space.
	TotalSpaceBytes int64 `json:"totalSpaceBytes,omitempty"`

	// Utilization of this storage location.
	Utilization string `json:"utilization,omitempty"`
}

// Validate validates this repository usage d t o
func (m *RepositoryUsageDTO) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this repository usage d t o based on context it is used
func (m *RepositoryUsageDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryUsageDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryUsageDTO) UnmarshalBinary(b []byte) error {
	var res RepositoryUsageDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

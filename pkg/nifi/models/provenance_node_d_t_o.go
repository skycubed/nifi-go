// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvenanceNodeDTO provenance node d t o
//
// swagger:model ProvenanceNodeDTO
type ProvenanceNodeDTO struct {

	// The uuid of the childrent flowfiles of the provenance event.
	ChildUuids []string `json:"childUuids"`

	// The identifier of the node that this event/flowfile originated from.
	ClusterNodeIdentifier string `json:"clusterNodeIdentifier,omitempty"`

	// If the type is EVENT, this is the type of event.
	EventType string `json:"eventType,omitempty"`

	// The uuid of the flowfile associated with the provenance event.
	FlowFileUUID string `json:"flowFileUuid,omitempty"`

	// The id of the node.
	ID string `json:"id,omitempty"`

	// The timestamp of the node in milliseconds.
	Millis int64 `json:"millis,omitempty"`

	// The uuid of the parent flowfiles of the provenance event.
	ParentUuids []string `json:"parentUuids"`

	// The timestamp of the node formatted.
	Timestamp string `json:"timestamp,omitempty"`

	// The type of the node.
	// Enum: [FLOWFILE EVENT]
	Type string `json:"type,omitempty"`
}

// Validate validates this provenance node d t o
func (m *ProvenanceNodeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provenanceNodeDTOTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FLOWFILE","EVENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provenanceNodeDTOTypeTypePropEnum = append(provenanceNodeDTOTypeTypePropEnum, v)
	}
}

const (

	// ProvenanceNodeDTOTypeFLOWFILE captures enum value "FLOWFILE"
	ProvenanceNodeDTOTypeFLOWFILE string = "FLOWFILE"

	// ProvenanceNodeDTOTypeEVENT captures enum value "EVENT"
	ProvenanceNodeDTOTypeEVENT string = "EVENT"
)

// prop value enum
func (m *ProvenanceNodeDTO) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provenanceNodeDTOTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProvenanceNodeDTO) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provenance node d t o based on context it is used
func (m *ProvenanceNodeDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProvenanceNodeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvenanceNodeDTO) UnmarshalBinary(b []byte) error {
	var res ProvenanceNodeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

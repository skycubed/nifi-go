// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnippetDTO snippet d t o
//
// swagger:model SnippetDTO
type SnippetDTO struct {

	// The ids of the connections in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	Connections map[string]RevisionDTO `json:"connections,omitempty"`

	// The ids of the funnels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	Funnels map[string]RevisionDTO `json:"funnels,omitempty"`

	// The id of the snippet.
	ID string `json:"id,omitempty"`

	// The ids of the input ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	InputPorts map[string]RevisionDTO `json:"inputPorts,omitempty"`

	// The ids of the labels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	Labels map[string]RevisionDTO `json:"labels,omitempty"`

	// The ids of the output ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	OutputPorts map[string]RevisionDTO `json:"outputPorts,omitempty"`

	// The group id for the components in the snippet.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// The ids of the process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	ProcessGroups map[string]RevisionDTO `json:"processGroups,omitempty"`

	// The ids of the processors in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	Processors map[string]RevisionDTO `json:"processors,omitempty"`

	// The ids of the remote process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
	RemoteProcessGroups map[string]RevisionDTO `json:"remoteProcessGroups,omitempty"`

	// The URI of the snippet.
	URI string `json:"uri,omitempty"`
}

// Validate validates this snippet d t o
func (m *SnippetDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunnels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteProcessGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnippetDTO) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for k := range m.Connections {

		if err := validate.Required("connections"+"."+k, "body", m.Connections[k]); err != nil {
			return err
		}
		if val, ok := m.Connections[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateFunnels(formats strfmt.Registry) error {
	if swag.IsZero(m.Funnels) { // not required
		return nil
	}

	for k := range m.Funnels {

		if err := validate.Required("funnels"+"."+k, "body", m.Funnels[k]); err != nil {
			return err
		}
		if val, ok := m.Funnels[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funnels" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("funnels" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateInputPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.InputPorts) { // not required
		return nil
	}

	for k := range m.InputPorts {

		if err := validate.Required("inputPorts"+"."+k, "body", m.InputPorts[k]); err != nil {
			return err
		}
		if val, ok := m.InputPorts[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputPorts" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputPorts" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for k := range m.Labels {

		if err := validate.Required("labels"+"."+k, "body", m.Labels[k]); err != nil {
			return err
		}
		if val, ok := m.Labels[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateOutputPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputPorts) { // not required
		return nil
	}

	for k := range m.OutputPorts {

		if err := validate.Required("outputPorts"+"."+k, "body", m.OutputPorts[k]); err != nil {
			return err
		}
		if val, ok := m.OutputPorts[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputPorts" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputPorts" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateProcessGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessGroups) { // not required
		return nil
	}

	for k := range m.ProcessGroups {

		if err := validate.Required("processGroups"+"."+k, "body", m.ProcessGroups[k]); err != nil {
			return err
		}
		if val, ok := m.ProcessGroups[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processGroups" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processGroups" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateProcessors(formats strfmt.Registry) error {
	if swag.IsZero(m.Processors) { // not required
		return nil
	}

	for k := range m.Processors {

		if err := validate.Required("processors"+"."+k, "body", m.Processors[k]); err != nil {
			return err
		}
		if val, ok := m.Processors[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) validateRemoteProcessGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProcessGroups) { // not required
		return nil
	}

	for k := range m.RemoteProcessGroups {

		if err := validate.Required("remoteProcessGroups"+"."+k, "body", m.RemoteProcessGroups[k]); err != nil {
			return err
		}
		if val, ok := m.RemoteProcessGroups[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteProcessGroups" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteProcessGroups" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this snippet d t o based on the context it is used
func (m *SnippetDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunnels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteProcessGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnippetDTO) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Connections {

		if val, ok := m.Connections[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateFunnels(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Funnels {

		if val, ok := m.Funnels[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateInputPorts(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.InputPorts {

		if val, ok := m.InputPorts[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Labels {

		if val, ok := m.Labels[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateOutputPorts(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.OutputPorts {

		if val, ok := m.OutputPorts[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateProcessGroups(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ProcessGroups {

		if val, ok := m.ProcessGroups[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateProcessors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Processors {

		if val, ok := m.Processors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnippetDTO) contextValidateRemoteProcessGroups(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.RemoteProcessGroups {

		if val, ok := m.RemoteProcessGroups[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnippetDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnippetDTO) UnmarshalBinary(b []byte) error {
	var res SnippetDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

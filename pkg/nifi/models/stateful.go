// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stateful stateful
//
// swagger:model Stateful
type Stateful struct {

	// Description of what information is being stored in the StateManager
	Description string `json:"description,omitempty"`

	// Indicates the Scope(s) associated with the State that is stored and retrieved
	// Unique: true
	Scopes []string `json:"scopes"`
}

// Validate validates this stateful
func (m *Stateful) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statefulScopesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","LOCAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statefulScopesItemsEnum = append(statefulScopesItemsEnum, v)
	}
}

func (m *Stateful) validateScopesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, statefulScopesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stateful) validateScopes(formats strfmt.Registry) error {
	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	if err := validate.UniqueItems("scopes", "body", m.Scopes); err != nil {
		return err
	}

	for i := 0; i < len(m.Scopes); i++ {

		// value enum
		if err := m.validateScopesItemsEnum("scopes"+"."+strconv.Itoa(i), "body", m.Scopes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this stateful based on context it is used
func (m *Stateful) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Stateful) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stateful) UnmarshalBinary(b []byte) error {
	var res Stateful
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

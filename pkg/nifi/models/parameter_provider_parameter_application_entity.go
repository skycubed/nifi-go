// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParameterProviderParameterApplicationEntity parameter provider parameter application entity
//
// swagger:model ParameterProviderParameterApplicationEntity
type ParameterProviderParameterApplicationEntity struct {

	// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
	DisconnectedNodeAcknowledged bool `json:"disconnectedNodeAcknowledged,omitempty"`

	// The id of the parameter provider.
	ID string `json:"id,omitempty"`

	// Configuration for the fetched Parameter Groups
	ParameterGroupConfigurations []*ParameterGroupConfigurationEntity `json:"parameterGroupConfigurations"`

	// The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
	Revision *RevisionDTO `json:"revision,omitempty"`
}

// Validate validates this parameter provider parameter application entity
func (m *ParameterProviderParameterApplicationEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameterGroupConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterProviderParameterApplicationEntity) validateParameterGroupConfigurations(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterGroupConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterGroupConfigurations); i++ {
		if swag.IsZero(m.ParameterGroupConfigurations[i]) { // not required
			continue
		}

		if m.ParameterGroupConfigurations[i] != nil {
			if err := m.ParameterGroupConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderParameterApplicationEntity) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this parameter provider parameter application entity based on the context it is used
func (m *ParameterProviderParameterApplicationEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameterGroupConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterProviderParameterApplicationEntity) contextValidateParameterGroupConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParameterGroupConfigurations); i++ {

		if m.ParameterGroupConfigurations[i] != nil {
			if err := m.ParameterGroupConfigurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterGroupConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterProviderParameterApplicationEntity) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {
		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterProviderParameterApplicationEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterProviderParameterApplicationEntity) UnmarshalBinary(b []byte) error {
	var res ParameterProviderParameterApplicationEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

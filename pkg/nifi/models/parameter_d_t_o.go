// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterDTO parameter d t o
//
// swagger:model ParameterDTO
type ParameterDTO struct {

	// The description of the Parameter
	Description string `json:"description,omitempty"`

	// Whether or not the Parameter is inherited from another context
	Inherited bool `json:"inherited,omitempty"`

	// The name of the Parameter
	Name string `json:"name,omitempty"`

	// A reference to the Parameter Context that contains this one
	ParameterContext *ParameterContextReferenceEntity `json:"parameterContext,omitempty"`

	// The set of all components in the flow that are referencing this Parameter
	// Unique: true
	ReferencingComponents []*AffectedComponentEntity `json:"referencingComponents"`

	// Whether or not the Parameter is sensitive
	Sensitive bool `json:"sensitive,omitempty"`

	// The value of the Parameter
	Value string `json:"value,omitempty"`

	// Whether or not the value of the Parameter was removed. When a request is made to change a parameter, the value may be null. The absence of the value may be used either to indicate that the value is not to be changed, or that the value is to be set to null (i.e., removed). This denotes which of the two scenarios is being encountered.
	ValueRemoved bool `json:"valueRemoved,omitempty"`
}

// Validate validates this parameter d t o
func (m *ParameterDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameterContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencingComponents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterDTO) validateParameterContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterContext) { // not required
		return nil
	}

	if m.ParameterContext != nil {
		if err := m.ParameterContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContext")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterDTO) validateReferencingComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencingComponents) { // not required
		return nil
	}

	if err := validate.UniqueItems("referencingComponents", "body", m.ReferencingComponents); err != nil {
		return err
	}

	for i := 0; i < len(m.ReferencingComponents); i++ {
		if swag.IsZero(m.ReferencingComponents[i]) { // not required
			continue
		}

		if m.ReferencingComponents[i] != nil {
			if err := m.ReferencingComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this parameter d t o based on the context it is used
func (m *ParameterDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameterContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferencingComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterDTO) contextValidateParameterContext(ctx context.Context, formats strfmt.Registry) error {

	if m.ParameterContext != nil {

		if swag.IsZero(m.ParameterContext) { // not required
			return nil
		}

		if err := m.ParameterContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameterContext")
			}
			return err
		}
	}

	return nil
}

func (m *ParameterDTO) contextValidateReferencingComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferencingComponents); i++ {

		if m.ReferencingComponents[i] != nil {

			if swag.IsZero(m.ReferencingComponents[i]) { // not required
				return nil
			}

			if err := m.ReferencingComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterDTO) UnmarshalBinary(b []byte) error {
	var res ParameterDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

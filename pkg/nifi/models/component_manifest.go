// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComponentManifest component manifest
//
// swagger:model ComponentManifest
type ComponentManifest struct {

	// Public interfaces defined in this bundle
	Apis []*DefinedType `json:"apis"`

	// Controller Services provided in this bundle
	ControllerServices []*ControllerServiceDefinition `json:"controllerServices"`

	// Processors provided in this bundle
	Processors []*ProcessorDefinition `json:"processors"`

	// Reporting Tasks provided in this bundle
	ReportingTasks []*ReportingTaskDefinition `json:"reportingTasks"`
}

// Validate validates this component manifest
func (m *ComponentManifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportingTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentManifest) validateApis(formats strfmt.Registry) error {
	if swag.IsZero(m.Apis) { // not required
		return nil
	}

	for i := 0; i < len(m.Apis); i++ {
		if swag.IsZero(m.Apis[i]) { // not required
			continue
		}

		if m.Apis[i] != nil {
			if err := m.Apis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComponentManifest) validateControllerServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ControllerServices); i++ {
		if swag.IsZero(m.ControllerServices[i]) { // not required
			continue
		}

		if m.ControllerServices[i] != nil {
			if err := m.ControllerServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComponentManifest) validateProcessors(formats strfmt.Registry) error {
	if swag.IsZero(m.Processors) { // not required
		return nil
	}

	for i := 0; i < len(m.Processors); i++ {
		if swag.IsZero(m.Processors[i]) { // not required
			continue
		}

		if m.Processors[i] != nil {
			if err := m.Processors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComponentManifest) validateReportingTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportingTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.ReportingTasks); i++ {
		if swag.IsZero(m.ReportingTasks[i]) { // not required
			continue
		}

		if m.ReportingTasks[i] != nil {
			if err := m.ReportingTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reportingTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reportingTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this component manifest based on the context it is used
func (m *ComponentManifest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReportingTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentManifest) contextValidateApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Apis); i++ {

		if m.Apis[i] != nil {
			if err := m.Apis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComponentManifest) contextValidateControllerServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerServices); i++ {

		if m.ControllerServices[i] != nil {
			if err := m.ControllerServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComponentManifest) contextValidateProcessors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Processors); i++ {

		if m.Processors[i] != nil {
			if err := m.Processors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComponentManifest) contextValidateReportingTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReportingTasks); i++ {

		if m.ReportingTasks[i] != nil {
			if err := m.ReportingTasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reportingTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reportingTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComponentManifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentManifest) UnmarshalBinary(b []byte) error {
	var res ComponentManifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

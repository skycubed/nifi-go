// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessPolicySummaryDTO access policy summary d t o
//
// swagger:model AccessPolicySummaryDTO
type AccessPolicySummaryDTO struct {

	// The action associated with this access policy.
	// Enum: [read write]
	Action string `json:"action,omitempty"`

	// Component this policy references if applicable.
	ComponentReference *ComponentReferenceEntity `json:"componentReference,omitempty"`

	// Whether this policy is configurable.
	Configurable bool `json:"configurable,omitempty"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// The id of parent process group of this component if applicable.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// The position of this component in the UI if applicable.
	Position *PositionDTO `json:"position,omitempty"`

	// The resource for this access policy.
	Resource string `json:"resource,omitempty"`

	// The ID of the corresponding component that is under version control
	VersionedComponentID string `json:"versionedComponentId,omitempty"`
}

// Validate validates this access policy summary d t o
func (m *AccessPolicySummaryDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accessPolicySummaryDTOTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read","write"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessPolicySummaryDTOTypeActionPropEnum = append(accessPolicySummaryDTOTypeActionPropEnum, v)
	}
}

const (

	// AccessPolicySummaryDTOActionRead captures enum value "read"
	AccessPolicySummaryDTOActionRead string = "read"

	// AccessPolicySummaryDTOActionWrite captures enum value "write"
	AccessPolicySummaryDTOActionWrite string = "write"
)

// prop value enum
func (m *AccessPolicySummaryDTO) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accessPolicySummaryDTOTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccessPolicySummaryDTO) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *AccessPolicySummaryDTO) validateComponentReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentReference) { // not required
		return nil
	}

	if m.ComponentReference != nil {
		if err := m.ComponentReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("componentReference")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPolicySummaryDTO) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access policy summary d t o based on the context it is used
func (m *AccessPolicySummaryDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponentReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessPolicySummaryDTO) contextValidateComponentReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ComponentReference != nil {

		if swag.IsZero(m.ComponentReference) { // not required
			return nil
		}

		if err := m.ComponentReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("componentReference")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPolicySummaryDTO) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessPolicySummaryDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessPolicySummaryDTO) UnmarshalBinary(b []byte) error {
	var res AccessPolicySummaryDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

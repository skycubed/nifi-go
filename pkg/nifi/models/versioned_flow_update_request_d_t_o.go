// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VersionedFlowUpdateRequestDTO versioned flow update request d t o
//
// swagger:model VersionedFlowUpdateRequestDTO
type VersionedFlowUpdateRequestDTO struct {

	// Whether or not this request has completed
	Complete bool `json:"complete,omitempty"`

	// An explanation of why this request failed, or null if this request has not failed
	FailureReason string `json:"failureReason,omitempty"`

	// The last time this request was updated.
	LastUpdated string `json:"lastUpdated,omitempty"`

	// The percentage complete for the request, between 0 and 100
	PercentCompleted int32 `json:"percentCompleted,omitempty"`

	// The unique ID of the Process Group being updated
	ProcessGroupID string `json:"processGroupId,omitempty"`

	// The unique ID of this request.
	RequestID string `json:"requestId,omitempty"`

	// The state of the request
	State string `json:"state,omitempty"`

	// The URI for future requests to this drop request.
	URI string `json:"uri,omitempty"`

	// The VersionControlInformation that describes where the Versioned Flow is located; this may not be populated until the request is completed.
	VersionControlInformation *VersionControlInformationDTO `json:"versionControlInformation,omitempty"`
}

// Validate validates this versioned flow update request d t o
func (m *VersionedFlowUpdateRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionControlInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedFlowUpdateRequestDTO) validateVersionControlInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionControlInformation) { // not required
		return nil
	}

	if m.VersionControlInformation != nil {
		if err := m.VersionControlInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionControlInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionControlInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this versioned flow update request d t o based on the context it is used
func (m *VersionedFlowUpdateRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionControlInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedFlowUpdateRequestDTO) contextValidateVersionControlInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionControlInformation != nil {
		if err := m.VersionControlInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionControlInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionControlInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedFlowUpdateRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedFlowUpdateRequestDTO) UnmarshalBinary(b []byte) error {
	var res VersionedFlowUpdateRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

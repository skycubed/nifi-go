// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RuntimeManifest runtime manifest
//
// swagger:model RuntimeManifest
type RuntimeManifest struct {

	// The type of the runtime binary, e.g., 'minifi-java' or 'minifi-cpp'
	AgentType string `json:"agentType,omitempty"`

	// Build summary for this runtime binary
	BuildInfo *BuildInfo `json:"buildInfo,omitempty"`

	// All extension bundles included with this runtime
	Bundles []*Bundle `json:"bundles"`

	// A unique identifier for the manifest
	Identifier string `json:"identifier,omitempty"`

	// Scheduling defaults for components defined in this manifest
	SchedulingDefaults *SchedulingDefaults `json:"schedulingDefaults,omitempty"`

	// The version of the runtime binary, e.g., '1.0.1'
	Version string `json:"version,omitempty"`
}

// Validate validates this runtime manifest
func (m *RuntimeManifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingDefaults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeManifest) validateBuildInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildInfo) { // not required
		return nil
	}

	if m.BuildInfo != nil {
		if err := m.BuildInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeManifest) validateBundles(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundles) { // not required
		return nil
	}

	for i := 0; i < len(m.Bundles); i++ {
		if swag.IsZero(m.Bundles[i]) { // not required
			continue
		}

		if m.Bundles[i] != nil {
			if err := m.Bundles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuntimeManifest) validateSchedulingDefaults(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedulingDefaults) { // not required
		return nil
	}

	if m.SchedulingDefaults != nil {
		if err := m.SchedulingDefaults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingDefaults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingDefaults")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this runtime manifest based on the context it is used
func (m *RuntimeManifest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBundles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedulingDefaults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeManifest) contextValidateBuildInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildInfo != nil {

		if swag.IsZero(m.BuildInfo) { // not required
			return nil
		}

		if err := m.BuildInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeManifest) contextValidateBundles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bundles); i++ {

		if m.Bundles[i] != nil {

			if swag.IsZero(m.Bundles[i]) { // not required
				return nil
			}

			if err := m.Bundles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuntimeManifest) contextValidateSchedulingDefaults(ctx context.Context, formats strfmt.Registry) error {

	if m.SchedulingDefaults != nil {

		if swag.IsZero(m.SchedulingDefaults) { // not required
			return nil
		}

		if err := m.SchedulingDefaults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingDefaults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingDefaults")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeManifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeManifest) UnmarshalBinary(b []byte) error {
	var res RuntimeManifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

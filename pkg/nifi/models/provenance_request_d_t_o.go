// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvenanceRequestDTO provenance request d t o
//
// swagger:model ProvenanceRequestDTO
type ProvenanceRequestDTO struct {

	// The id of the node in the cluster where this provenance originated.
	ClusterNodeID string `json:"clusterNodeId,omitempty"`

	// The latest event time to include in the query.
	EndDate string `json:"endDate,omitempty"`

	// Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
	IncrementalResults bool `json:"incrementalResults,omitempty"`

	// The maximum number of results to include.
	MaxResults int32 `json:"maxResults,omitempty"`

	// The maximum file size to include in the query.
	MaximumFileSize string `json:"maximumFileSize,omitempty"`

	// The minimum file size to include in the query.
	MinimumFileSize string `json:"minimumFileSize,omitempty"`

	// The search terms used to perform the search.
	SearchTerms map[string]ProvenanceSearchValueDTO `json:"searchTerms,omitempty"`

	// The earliest event time to include in the query.
	StartDate string `json:"startDate,omitempty"`

	// Whether or not to summarize provenance events returned. This property is false by default.
	Summarize bool `json:"summarize,omitempty"`
}

// Validate validates this provenance request d t o
func (m *ProvenanceRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearchTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvenanceRequestDTO) validateSearchTerms(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchTerms) { // not required
		return nil
	}

	for k := range m.SearchTerms {

		if err := validate.Required("searchTerms"+"."+k, "body", m.SearchTerms[k]); err != nil {
			return err
		}
		if val, ok := m.SearchTerms[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchTerms" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchTerms" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this provenance request d t o based on the context it is used
func (m *ProvenanceRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSearchTerms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvenanceRequestDTO) contextValidateSearchTerms(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.SearchTerms {

		if val, ok := m.SearchTerms[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvenanceRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvenanceRequestDTO) UnmarshalBinary(b []byte) error {
	var res ProvenanceRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

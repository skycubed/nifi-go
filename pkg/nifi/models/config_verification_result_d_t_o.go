// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigVerificationResultDTO config verification result d t o
//
// swagger:model ConfigVerificationResultDTO
type ConfigVerificationResultDTO struct {

	// An explanation of why the step was or was not successful
	Explanation string `json:"explanation,omitempty"`

	// The outcome of the verification
	// Enum: [SUCCESSFUL FAILED SKIPPED]
	Outcome string `json:"outcome,omitempty"`

	// The name of the verification step
	VerificationStepName string `json:"verificationStepName,omitempty"`
}

// Validate validates this config verification result d t o
func (m *ConfigVerificationResultDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutcome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var configVerificationResultDTOTypeOutcomePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESSFUL","FAILED","SKIPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configVerificationResultDTOTypeOutcomePropEnum = append(configVerificationResultDTOTypeOutcomePropEnum, v)
	}
}

const (

	// ConfigVerificationResultDTOOutcomeSUCCESSFUL captures enum value "SUCCESSFUL"
	ConfigVerificationResultDTOOutcomeSUCCESSFUL string = "SUCCESSFUL"

	// ConfigVerificationResultDTOOutcomeFAILED captures enum value "FAILED"
	ConfigVerificationResultDTOOutcomeFAILED string = "FAILED"

	// ConfigVerificationResultDTOOutcomeSKIPPED captures enum value "SKIPPED"
	ConfigVerificationResultDTOOutcomeSKIPPED string = "SKIPPED"
)

// prop value enum
func (m *ConfigVerificationResultDTO) validateOutcomeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, configVerificationResultDTOTypeOutcomePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConfigVerificationResultDTO) validateOutcome(formats strfmt.Registry) error {
	if swag.IsZero(m.Outcome) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutcomeEnum("outcome", "body", m.Outcome); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this config verification result d t o based on context it is used
func (m *ConfigVerificationResultDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigVerificationResultDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigVerificationResultDTO) UnmarshalBinary(b []byte) error {
	var res ConfigVerificationResultDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

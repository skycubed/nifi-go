// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeIdentifier node identifier
//
// swagger:model NodeIdentifier
type NodeIdentifier struct {

	// api address
	APIAddress string `json:"apiAddress,omitempty"`

	// api port
	APIPort int32 `json:"apiPort,omitempty"`

	// full description
	FullDescription string `json:"fullDescription,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// load balance address
	LoadBalanceAddress string `json:"loadBalanceAddress,omitempty"`

	// load balance port
	LoadBalancePort int32 `json:"loadBalancePort,omitempty"`

	// node identities
	// Unique: true
	NodeIdentities []string `json:"nodeIdentities"`

	// site to site address
	SiteToSiteAddress string `json:"siteToSiteAddress,omitempty"`

	// site to site Http Api port
	SiteToSiteHTTPAPIPort int32 `json:"siteToSiteHttpApiPort,omitempty"`

	// site to site port
	SiteToSitePort int32 `json:"siteToSitePort,omitempty"`

	// site to site secure
	SiteToSiteSecure bool `json:"siteToSiteSecure,omitempty"`

	// socket address
	SocketAddress string `json:"socketAddress,omitempty"`

	// socket port
	SocketPort int32 `json:"socketPort,omitempty"`
}

// Validate validates this node identifier
func (m *NodeIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeIdentities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeIdentifier) validateNodeIdentities(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeIdentities) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeIdentities", "body", m.NodeIdentities); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this node identifier based on context it is used
func (m *NodeIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeIdentifier) UnmarshalBinary(b []byte) error {
	var res NodeIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

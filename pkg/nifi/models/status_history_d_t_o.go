// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StatusHistoryDTO status history d t o
//
// swagger:model StatusHistoryDTO
type StatusHistoryDTO struct {

	// A list of StatusSnapshotDTO objects that provide the actual metric values for the component. If the NiFi instance is clustered, this will represent the aggregate status across all nodes. If the NiFi instance is not clustered, this will represent the status of the entire NiFi instance.
	AggregateSnapshots []*StatusSnapshotDTO `json:"aggregateSnapshots"`

	// A Map of key/value pairs that describe the component that the status history belongs to
	ComponentDetails map[string]string `json:"componentDetails,omitempty"`

	// The Descriptors that provide information on each of the metrics provided in the status history
	FieldDescriptors []*StatusDescriptorDTO `json:"fieldDescriptors"`

	// When the status history was generated.
	Generated string `json:"generated,omitempty"`

	// The NodeStatusSnapshotsDTO objects that provide the actual metric values for the component, for each node. If the NiFi instance is not clustered, this value will be null.
	NodeSnapshots []*NodeStatusSnapshotsDTO `json:"nodeSnapshots"`
}

// Validate validates this status history d t o
func (m *StatusHistoryDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusHistoryDTO) validateAggregateSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregateSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.AggregateSnapshots); i++ {
		if swag.IsZero(m.AggregateSnapshots[i]) { // not required
			continue
		}

		if m.AggregateSnapshots[i] != nil {
			if err := m.AggregateSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregateSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregateSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StatusHistoryDTO) validateFieldDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldDescriptors); i++ {
		if swag.IsZero(m.FieldDescriptors[i]) { // not required
			continue
		}

		if m.FieldDescriptors[i] != nil {
			if err := m.FieldDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fieldDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StatusHistoryDTO) validateNodeSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeSnapshots); i++ {
		if swag.IsZero(m.NodeSnapshots[i]) { // not required
			continue
		}

		if m.NodeSnapshots[i] != nil {
			if err := m.NodeSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this status history d t o based on the context it is used
func (m *StatusHistoryDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFieldDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusHistoryDTO) contextValidateAggregateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AggregateSnapshots); i++ {

		if m.AggregateSnapshots[i] != nil {

			if swag.IsZero(m.AggregateSnapshots[i]) { // not required
				return nil
			}

			if err := m.AggregateSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregateSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregateSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StatusHistoryDTO) contextValidateFieldDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FieldDescriptors); i++ {

		if m.FieldDescriptors[i] != nil {

			if swag.IsZero(m.FieldDescriptors[i]) { // not required
				return nil
			}

			if err := m.FieldDescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fieldDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StatusHistoryDTO) contextValidateNodeSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeSnapshots); i++ {

		if m.NodeSnapshots[i] != nil {

			if swag.IsZero(m.NodeSnapshots[i]) { // not required
				return nil
			}

			if err := m.NodeSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusHistoryDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusHistoryDTO) UnmarshalBinary(b []byte) error {
	var res StatusHistoryDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ControllerServiceDiagnosticsDTO controller service diagnostics d t o
//
// swagger:model ControllerServiceDiagnosticsDTO
type ControllerServiceDiagnosticsDTO struct {

	// Information about the Controller Service's Class Loader
	ClassLoaderDiagnostics *ClassLoaderDiagnosticsDTO `json:"classLoaderDiagnostics,omitempty"`

	// The Controller Service
	ControllerService *ControllerServiceEntity `json:"controllerService,omitempty"`
}

// Validate validates this controller service diagnostics d t o
func (m *ControllerServiceDiagnosticsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassLoaderDiagnostics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerServiceDiagnosticsDTO) validateClassLoaderDiagnostics(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassLoaderDiagnostics) { // not required
		return nil
	}

	if m.ClassLoaderDiagnostics != nil {
		if err := m.ClassLoaderDiagnostics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoaderDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoaderDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerServiceDiagnosticsDTO) validateControllerService(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerService) { // not required
		return nil
	}

	if m.ControllerService != nil {
		if err := m.ControllerService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerService")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this controller service diagnostics d t o based on the context it is used
func (m *ControllerServiceDiagnosticsDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassLoaderDiagnostics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerServiceDiagnosticsDTO) contextValidateClassLoaderDiagnostics(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassLoaderDiagnostics != nil {

		if swag.IsZero(m.ClassLoaderDiagnostics) { // not required
			return nil
		}

		if err := m.ClassLoaderDiagnostics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoaderDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoaderDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerServiceDiagnosticsDTO) contextValidateControllerService(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerService != nil {

		if swag.IsZero(m.ControllerService) { // not required
			return nil
		}

		if err := m.ControllerService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerService")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControllerServiceDiagnosticsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControllerServiceDiagnosticsDTO) UnmarshalBinary(b []byte) error {
	var res ControllerServiceDiagnosticsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

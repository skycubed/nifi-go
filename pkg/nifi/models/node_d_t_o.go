// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeDTO node d t o
//
// swagger:model NodeDTO
type NodeDTO struct {

	// The active threads for the NiFi on the node.
	ActiveThreadCount int32 `json:"activeThreadCount,omitempty"`

	// The node's host/ip address.
	Address string `json:"address,omitempty"`

	// The port the node is listening for API requests.
	APIPort int32 `json:"apiPort,omitempty"`

	// The time of the node's last connection request.
	ConnectionRequested string `json:"connectionRequested,omitempty"`

	// The node's events.
	Events []*NodeEventDTO `json:"events"`

	// the time of the nodes's last heartbeat.
	Heartbeat string `json:"heartbeat,omitempty"`

	// The id of the node.
	NodeID string `json:"nodeId,omitempty"`

	// The time at which this Node was last refreshed.
	NodeStartTime string `json:"nodeStartTime,omitempty"`

	// The queue the NiFi on the node.
	Queued string `json:"queued,omitempty"`

	// The roles of this node.
	// Unique: true
	Roles []string `json:"roles"`

	// The node's status.
	Status string `json:"status,omitempty"`
}

// Validate validates this node d t o
func (m *NodeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeDTO) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeDTO) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this node d t o based on the context it is used
func (m *NodeDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeDTO) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {

			if swag.IsZero(m.Events[i]) { // not required
				return nil
			}

			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeDTO) UnmarshalBinary(b []byte) error {
	var res NodeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

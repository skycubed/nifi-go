// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ControllerServiceDTO controller service d t o
//
// swagger:model ControllerServiceDTO
type ControllerServiceDTO struct {

	// The annotation for the controller service. This is how the custom UI relays configuration to the controller service.
	AnnotationData string `json:"annotationData,omitempty"`

	// The level at which the controller service will report bulletins.
	BulletinLevel string `json:"bulletinLevel,omitempty"`

	// The details of the artifact that bundled this processor type.
	Bundle *BundleDTO `json:"bundle,omitempty"`

	// The comments for the controller service.
	Comments string `json:"comments,omitempty"`

	// Lists the APIs this Controller Service implements.
	ControllerServiceApis []*ControllerServiceAPIDTO `json:"controllerServiceApis"`

	// The URL for the controller services custom configuration UI if applicable.
	CustomUIURL string `json:"customUiUrl,omitempty"`

	// Whether the ontroller service has been deprecated.
	Deprecated bool `json:"deprecated,omitempty"`

	// The descriptors for the controller service properties.
	Descriptors map[string]PropertyDescriptorDTO `json:"descriptors,omitempty"`

	// Whether the underlying extension is missing.
	ExtensionMissing bool `json:"extensionMissing,omitempty"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// Whether the controller service has multiple versions available.
	MultipleVersionsAvailable bool `json:"multipleVersionsAvailable,omitempty"`

	// The name of the controller service.
	Name string `json:"name,omitempty"`

	// The id of parent process group of this component if applicable.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// Whether the controller service persists state.
	PersistsState bool `json:"persistsState,omitempty"`

	// The position of this component in the UI if applicable.
	Position *PositionDTO `json:"position,omitempty"`

	// The properties of the controller service.
	Properties map[string]string `json:"properties,omitempty"`

	// All components referencing this controller service.
	// Unique: true
	ReferencingComponents []*ControllerServiceReferencingComponentEntity `json:"referencingComponents"`

	// Whether the controller service requires elevated privileges.
	Restricted bool `json:"restricted,omitempty"`

	// Set of sensitive dynamic property names
	// Unique: true
	SensitiveDynamicPropertyNames []string `json:"sensitiveDynamicPropertyNames"`

	// The state of the controller service.
	// Enum: [ENABLED ENABLING DISABLED DISABLING]
	State string `json:"state,omitempty"`

	// Whether the controller service supports sensitive dynamic properties.
	SupportsSensitiveDynamicProperties bool `json:"supportsSensitiveDynamicProperties,omitempty"`

	// The type of the controller service.
	Type string `json:"type,omitempty"`

	// The validation errors from the controller service. These validation errors represent the problems with the controller service that must be resolved before it can be enabled.
	ValidationErrors []string `json:"validationErrors"`

	// Indicates whether the ControllerService is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the ControllerService is valid)
	// Enum: [VALID INVALID VALIDATING]
	ValidationStatus string `json:"validationStatus,omitempty"`

	// The ID of the corresponding component that is under version control
	VersionedComponentID string `json:"versionedComponentId,omitempty"`
}

// Validate validates this controller service d t o
func (m *ControllerServiceDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerServiceApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencingComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensitiveDynamicPropertyNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerServiceDTO) validateBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.Bundle) { // not required
		return nil
	}

	if m.Bundle != nil {
		if err := m.Bundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerServiceDTO) validateControllerServiceApis(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerServiceApis) { // not required
		return nil
	}

	for i := 0; i < len(m.ControllerServiceApis); i++ {
		if swag.IsZero(m.ControllerServiceApis[i]) { // not required
			continue
		}

		if m.ControllerServiceApis[i] != nil {
			if err := m.ControllerServiceApis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ControllerServiceDTO) validateDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.Descriptors) { // not required
		return nil
	}

	for k := range m.Descriptors {

		if err := validate.Required("descriptors"+"."+k, "body", m.Descriptors[k]); err != nil {
			return err
		}
		if val, ok := m.Descriptors[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("descriptors" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("descriptors" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ControllerServiceDTO) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerServiceDTO) validateReferencingComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencingComponents) { // not required
		return nil
	}

	if err := validate.UniqueItems("referencingComponents", "body", m.ReferencingComponents); err != nil {
		return err
	}

	for i := 0; i < len(m.ReferencingComponents); i++ {
		if swag.IsZero(m.ReferencingComponents[i]) { // not required
			continue
		}

		if m.ReferencingComponents[i] != nil {
			if err := m.ReferencingComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ControllerServiceDTO) validateSensitiveDynamicPropertyNames(formats strfmt.Registry) error {
	if swag.IsZero(m.SensitiveDynamicPropertyNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("sensitiveDynamicPropertyNames", "body", m.SensitiveDynamicPropertyNames); err != nil {
		return err
	}

	return nil
}

var controllerServiceDTOTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","ENABLING","DISABLED","DISABLING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controllerServiceDTOTypeStatePropEnum = append(controllerServiceDTOTypeStatePropEnum, v)
	}
}

const (

	// ControllerServiceDTOStateENABLED captures enum value "ENABLED"
	ControllerServiceDTOStateENABLED string = "ENABLED"

	// ControllerServiceDTOStateENABLING captures enum value "ENABLING"
	ControllerServiceDTOStateENABLING string = "ENABLING"

	// ControllerServiceDTOStateDISABLED captures enum value "DISABLED"
	ControllerServiceDTOStateDISABLED string = "DISABLED"

	// ControllerServiceDTOStateDISABLING captures enum value "DISABLING"
	ControllerServiceDTOStateDISABLING string = "DISABLING"
)

// prop value enum
func (m *ControllerServiceDTO) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, controllerServiceDTOTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ControllerServiceDTO) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var controllerServiceDTOTypeValidationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","INVALID","VALIDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controllerServiceDTOTypeValidationStatusPropEnum = append(controllerServiceDTOTypeValidationStatusPropEnum, v)
	}
}

const (

	// ControllerServiceDTOValidationStatusVALID captures enum value "VALID"
	ControllerServiceDTOValidationStatusVALID string = "VALID"

	// ControllerServiceDTOValidationStatusINVALID captures enum value "INVALID"
	ControllerServiceDTOValidationStatusINVALID string = "INVALID"

	// ControllerServiceDTOValidationStatusVALIDATING captures enum value "VALIDATING"
	ControllerServiceDTOValidationStatusVALIDATING string = "VALIDATING"
)

// prop value enum
func (m *ControllerServiceDTO) validateValidationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, controllerServiceDTOTypeValidationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ControllerServiceDTO) validateValidationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationStatusEnum("validationStatus", "body", m.ValidationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this controller service d t o based on the context it is used
func (m *ControllerServiceDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerServiceApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferencingComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerServiceDTO) contextValidateBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.Bundle != nil {

		if swag.IsZero(m.Bundle) { // not required
			return nil
		}

		if err := m.Bundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundle")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerServiceDTO) contextValidateControllerServiceApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerServiceApis); i++ {

		if m.ControllerServiceApis[i] != nil {

			if swag.IsZero(m.ControllerServiceApis[i]) { // not required
				return nil
			}

			if err := m.ControllerServiceApis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controllerServiceApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ControllerServiceDTO) contextValidateDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Descriptors {

		if val, ok := m.Descriptors[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ControllerServiceDTO) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerServiceDTO) contextValidateReferencingComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferencingComponents); i++ {

		if m.ReferencingComponents[i] != nil {

			if swag.IsZero(m.ReferencingComponents[i]) { // not required
				return nil
			}

			if err := m.ReferencingComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencingComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControllerServiceDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControllerServiceDTO) UnmarshalBinary(b []byte) error {
	var res ControllerServiceDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

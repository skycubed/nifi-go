// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessorDiagnosticsDTO processor diagnostics d t o
//
// swagger:model ProcessorDiagnosticsDTO
type ProcessorDiagnosticsDTO struct {

	// Information about the Controller Service's Class Loader
	ClassLoaderDiagnostics *ClassLoaderDiagnosticsDTO `json:"classLoaderDiagnostics,omitempty"`

	// Diagnostic Information about all incoming Connections
	// Unique: true
	IncomingConnections []*ConnectionDiagnosticsDTO `json:"incomingConnections"`

	// Diagnostic Information about the JVM and system-level diagnostics
	JvmDiagnostics *JVMDiagnosticsDTO `json:"jvmDiagnostics,omitempty"`

	// Diagnostic Information about all outgoing Connections
	// Unique: true
	OutgoingConnections []*ConnectionDiagnosticsDTO `json:"outgoingConnections"`

	// Information about the Processor for which the Diagnostic Report is generated
	Processor *ProcessorDTO `json:"processor,omitempty"`

	// The Status for the Processor for which the Diagnostic Report is generated
	ProcessorStatus *ProcessorStatusDTO `json:"processorStatus,omitempty"`

	// Diagnostic Information about all Controller Services that the Processor is referencing
	// Unique: true
	ReferencedControllerServices []*ControllerServiceDiagnosticsDTO `json:"referencedControllerServices"`

	// Thread Dumps that were taken of the threads that are active in the Processor
	ThreadDumps []*ThreadDumpDTO `json:"threadDumps"`
}

// Validate validates this processor diagnostics d t o
func (m *ProcessorDiagnosticsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassLoaderDiagnostics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncomingConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJvmDiagnostics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutgoingConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencedControllerServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreadDumps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorDiagnosticsDTO) validateClassLoaderDiagnostics(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassLoaderDiagnostics) { // not required
		return nil
	}

	if m.ClassLoaderDiagnostics != nil {
		if err := m.ClassLoaderDiagnostics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoaderDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoaderDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateIncomingConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.IncomingConnections) { // not required
		return nil
	}

	if err := validate.UniqueItems("incomingConnections", "body", m.IncomingConnections); err != nil {
		return err
	}

	for i := 0; i < len(m.IncomingConnections); i++ {
		if swag.IsZero(m.IncomingConnections[i]) { // not required
			continue
		}

		if m.IncomingConnections[i] != nil {
			if err := m.IncomingConnections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incomingConnections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incomingConnections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateJvmDiagnostics(formats strfmt.Registry) error {
	if swag.IsZero(m.JvmDiagnostics) { // not required
		return nil
	}

	if m.JvmDiagnostics != nil {
		if err := m.JvmDiagnostics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jvmDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jvmDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateOutgoingConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.OutgoingConnections) { // not required
		return nil
	}

	if err := validate.UniqueItems("outgoingConnections", "body", m.OutgoingConnections); err != nil {
		return err
	}

	for i := 0; i < len(m.OutgoingConnections); i++ {
		if swag.IsZero(m.OutgoingConnections[i]) { // not required
			continue
		}

		if m.OutgoingConnections[i] != nil {
			if err := m.OutgoingConnections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outgoingConnections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outgoingConnections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateProcessor(formats strfmt.Registry) error {
	if swag.IsZero(m.Processor) { // not required
		return nil
	}

	if m.Processor != nil {
		if err := m.Processor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processor")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateProcessorStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessorStatus) { // not required
		return nil
	}

	if m.ProcessorStatus != nil {
		if err := m.ProcessorStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processorStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateReferencedControllerServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencedControllerServices) { // not required
		return nil
	}

	if err := validate.UniqueItems("referencedControllerServices", "body", m.ReferencedControllerServices); err != nil {
		return err
	}

	for i := 0; i < len(m.ReferencedControllerServices); i++ {
		if swag.IsZero(m.ReferencedControllerServices[i]) { // not required
			continue
		}

		if m.ReferencedControllerServices[i] != nil {
			if err := m.ReferencedControllerServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencedControllerServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencedControllerServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) validateThreadDumps(formats strfmt.Registry) error {
	if swag.IsZero(m.ThreadDumps) { // not required
		return nil
	}

	for i := 0; i < len(m.ThreadDumps); i++ {
		if swag.IsZero(m.ThreadDumps[i]) { // not required
			continue
		}

		if m.ThreadDumps[i] != nil {
			if err := m.ThreadDumps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("threadDumps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("threadDumps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this processor diagnostics d t o based on the context it is used
func (m *ProcessorDiagnosticsDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassLoaderDiagnostics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncomingConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJvmDiagnostics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutgoingConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessorStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferencedControllerServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThreadDumps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateClassLoaderDiagnostics(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassLoaderDiagnostics != nil {

		if swag.IsZero(m.ClassLoaderDiagnostics) { // not required
			return nil
		}

		if err := m.ClassLoaderDiagnostics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoaderDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoaderDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateIncomingConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncomingConnections); i++ {

		if m.IncomingConnections[i] != nil {

			if swag.IsZero(m.IncomingConnections[i]) { // not required
				return nil
			}

			if err := m.IncomingConnections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incomingConnections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incomingConnections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateJvmDiagnostics(ctx context.Context, formats strfmt.Registry) error {

	if m.JvmDiagnostics != nil {

		if swag.IsZero(m.JvmDiagnostics) { // not required
			return nil
		}

		if err := m.JvmDiagnostics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jvmDiagnostics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jvmDiagnostics")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateOutgoingConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutgoingConnections); i++ {

		if m.OutgoingConnections[i] != nil {

			if swag.IsZero(m.OutgoingConnections[i]) { // not required
				return nil
			}

			if err := m.OutgoingConnections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outgoingConnections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outgoingConnections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateProcessor(ctx context.Context, formats strfmt.Registry) error {

	if m.Processor != nil {

		if swag.IsZero(m.Processor) { // not required
			return nil
		}

		if err := m.Processor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processor")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateProcessorStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ProcessorStatus != nil {

		if swag.IsZero(m.ProcessorStatus) { // not required
			return nil
		}

		if err := m.ProcessorStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processorStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateReferencedControllerServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferencedControllerServices); i++ {

		if m.ReferencedControllerServices[i] != nil {

			if swag.IsZero(m.ReferencedControllerServices[i]) { // not required
				return nil
			}

			if err := m.ReferencedControllerServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencedControllerServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencedControllerServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessorDiagnosticsDTO) contextValidateThreadDumps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ThreadDumps); i++ {

		if m.ThreadDumps[i] != nil {

			if swag.IsZero(m.ThreadDumps[i]) { // not required
				return nil
			}

			if err := m.ThreadDumps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("threadDumps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("threadDumps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessorDiagnosticsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessorDiagnosticsDTO) UnmarshalBinary(b []byte) error {
	var res ProcessorDiagnosticsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

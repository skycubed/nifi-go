// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Bundle bundle
//
// swagger:model Bundle
type Bundle struct {

	// The artifact id of the bundle
	// Required: true
	Artifact *string `json:"artifact"`

	// The full specification of the bundle contents
	ComponentManifest *ComponentManifest `json:"componentManifest,omitempty"`

	// The group id of the bundle
	// Required: true
	Group *string `json:"group"`

	// The version of the bundle artifact
	Version string `json:"version,omitempty"`
}

// Validate validates this bundle
func (m *Bundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bundle) validateArtifact(formats strfmt.Registry) error {

	if err := validate.Required("artifact", "body", m.Artifact); err != nil {
		return err
	}

	return nil
}

func (m *Bundle) validateComponentManifest(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentManifest) { // not required
		return nil
	}

	if m.ComponentManifest != nil {
		if err := m.ComponentManifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentManifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("componentManifest")
			}
			return err
		}
	}

	return nil
}

func (m *Bundle) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bundle based on the context it is used
func (m *Bundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponentManifest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bundle) contextValidateComponentManifest(ctx context.Context, formats strfmt.Registry) error {

	if m.ComponentManifest != nil {

		if swag.IsZero(m.ComponentManifest) { // not required
			return nil
		}

		if err := m.ComponentManifest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentManifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("componentManifest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Bundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bundle) UnmarshalBinary(b []byte) error {
	var res Bundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

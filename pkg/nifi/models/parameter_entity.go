// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParameterEntity parameter entity
//
// swagger:model ParameterEntity
type ParameterEntity struct {

	// Indicates whether the user can write a given resource.
	CanWrite bool `json:"canWrite,omitempty"`

	// The parameter information
	Parameter *ParameterDTO `json:"parameter,omitempty"`
}

// Validate validates this parameter entity
func (m *ParameterEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterEntity) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	if m.Parameter != nil {
		if err := m.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this parameter entity based on the context it is used
func (m *ParameterEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterEntity) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameter != nil {

		if swag.IsZero(m.Parameter) { // not required
			return nil
		}

		if err := m.Parameter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterEntity) UnmarshalBinary(b []byte) error {
	var res ParameterEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PortStatusSnapshotDTO port status snapshot d t o
//
// swagger:model PortStatusSnapshotDTO
type PortStatusSnapshotDTO struct {

	// The active thread count for the port.
	ActiveThreadCount int32 `json:"activeThreadCount,omitempty"`

	// The size of hte FlowFiles that have been accepted in the last 5 minutes.
	BytesIn int64 `json:"bytesIn,omitempty"`

	// The number of bytes that have been processed in the last 5 minutes.
	BytesOut int64 `json:"bytesOut,omitempty"`

	// The number of FlowFiles that have been accepted in the last 5 minutes.
	FlowFilesIn int32 `json:"flowFilesIn,omitempty"`

	// The number of FlowFiles that have been processed in the last 5 minutes.
	FlowFilesOut int32 `json:"flowFilesOut,omitempty"`

	// The id of the parent process group of the port.
	GroupID string `json:"groupId,omitempty"`

	// The id of the port.
	ID string `json:"id,omitempty"`

	// The count/size of flowfiles that have been accepted in the last 5 minutes.
	Input string `json:"input,omitempty"`

	// The name of the port.
	Name string `json:"name,omitempty"`

	// The count/size of flowfiles that have been processed in the last 5 minutes.
	Output string `json:"output,omitempty"`

	// The run status of the port.
	// Enum: [Running Stopped Validating Disabled Invalid]
	RunStatus string `json:"runStatus,omitempty"`

	// Whether the port has incoming or outgoing connections to a remote NiFi.
	Transmitting bool `json:"transmitting,omitempty"`
}

// Validate validates this port status snapshot d t o
func (m *PortStatusSnapshotDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var portStatusSnapshotDTOTypeRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Stopped","Validating","Disabled","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portStatusSnapshotDTOTypeRunStatusPropEnum = append(portStatusSnapshotDTOTypeRunStatusPropEnum, v)
	}
}

const (

	// PortStatusSnapshotDTORunStatusRunning captures enum value "Running"
	PortStatusSnapshotDTORunStatusRunning string = "Running"

	// PortStatusSnapshotDTORunStatusStopped captures enum value "Stopped"
	PortStatusSnapshotDTORunStatusStopped string = "Stopped"

	// PortStatusSnapshotDTORunStatusValidating captures enum value "Validating"
	PortStatusSnapshotDTORunStatusValidating string = "Validating"

	// PortStatusSnapshotDTORunStatusDisabled captures enum value "Disabled"
	PortStatusSnapshotDTORunStatusDisabled string = "Disabled"

	// PortStatusSnapshotDTORunStatusInvalid captures enum value "Invalid"
	PortStatusSnapshotDTORunStatusInvalid string = "Invalid"
)

// prop value enum
func (m *PortStatusSnapshotDTO) validateRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portStatusSnapshotDTOTypeRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PortStatusSnapshotDTO) validateRunStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunStatusEnum("runStatus", "body", m.RunStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this port status snapshot d t o based on context it is used
func (m *PortStatusSnapshotDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortStatusSnapshotDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortStatusSnapshotDTO) UnmarshalBinary(b []byte) error {
	var res PortStatusSnapshotDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowBreadcrumbEntity flow breadcrumb entity
//
// swagger:model FlowBreadcrumbEntity
type FlowBreadcrumbEntity struct {

	// This breadcrumb.
	Breadcrumb *FlowBreadcrumbDTO `json:"breadcrumb,omitempty"`

	// The id of this ancestor ProcessGroup.
	ID string `json:"id,omitempty"`

	// The parent breadcrumb for this breadcrumb.
	ParentBreadcrumb *FlowBreadcrumbEntity `json:"parentBreadcrumb,omitempty"`

	// The permissions for this ancestor ProcessGroup.
	Permissions *PermissionsDTO `json:"permissions,omitempty"`

	// The current state of the Process Group, as it relates to the Versioned Flow
	// Enum: [LOCALLY_MODIFIED STALE LOCALLY_MODIFIED_AND_STALE UP_TO_DATE SYNC_FAILURE]
	VersionedFlowState string `json:"versionedFlowState,omitempty"`
}

// Validate validates this flow breadcrumb entity
func (m *FlowBreadcrumbEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreadcrumb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentBreadcrumb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionedFlowState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlowBreadcrumbEntity) validateBreadcrumb(formats strfmt.Registry) error {
	if swag.IsZero(m.Breadcrumb) { // not required
		return nil
	}

	if m.Breadcrumb != nil {
		if err := m.Breadcrumb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breadcrumb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breadcrumb")
			}
			return err
		}
	}

	return nil
}

func (m *FlowBreadcrumbEntity) validateParentBreadcrumb(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentBreadcrumb) { // not required
		return nil
	}

	if m.ParentBreadcrumb != nil {
		if err := m.ParentBreadcrumb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentBreadcrumb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentBreadcrumb")
			}
			return err
		}
	}

	return nil
}

func (m *FlowBreadcrumbEntity) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

var flowBreadcrumbEntityTypeVersionedFlowStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCALLY_MODIFIED","STALE","LOCALLY_MODIFIED_AND_STALE","UP_TO_DATE","SYNC_FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowBreadcrumbEntityTypeVersionedFlowStatePropEnum = append(flowBreadcrumbEntityTypeVersionedFlowStatePropEnum, v)
	}
}

const (

	// FlowBreadcrumbEntityVersionedFlowStateLOCALLYMODIFIED captures enum value "LOCALLY_MODIFIED"
	FlowBreadcrumbEntityVersionedFlowStateLOCALLYMODIFIED string = "LOCALLY_MODIFIED"

	// FlowBreadcrumbEntityVersionedFlowStateSTALE captures enum value "STALE"
	FlowBreadcrumbEntityVersionedFlowStateSTALE string = "STALE"

	// FlowBreadcrumbEntityVersionedFlowStateLOCALLYMODIFIEDANDSTALE captures enum value "LOCALLY_MODIFIED_AND_STALE"
	FlowBreadcrumbEntityVersionedFlowStateLOCALLYMODIFIEDANDSTALE string = "LOCALLY_MODIFIED_AND_STALE"

	// FlowBreadcrumbEntityVersionedFlowStateUPTODATE captures enum value "UP_TO_DATE"
	FlowBreadcrumbEntityVersionedFlowStateUPTODATE string = "UP_TO_DATE"

	// FlowBreadcrumbEntityVersionedFlowStateSYNCFAILURE captures enum value "SYNC_FAILURE"
	FlowBreadcrumbEntityVersionedFlowStateSYNCFAILURE string = "SYNC_FAILURE"
)

// prop value enum
func (m *FlowBreadcrumbEntity) validateVersionedFlowStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowBreadcrumbEntityTypeVersionedFlowStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlowBreadcrumbEntity) validateVersionedFlowState(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionedFlowState) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionedFlowStateEnum("versionedFlowState", "body", m.VersionedFlowState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this flow breadcrumb entity based on the context it is used
func (m *FlowBreadcrumbEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreadcrumb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentBreadcrumb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlowBreadcrumbEntity) contextValidateBreadcrumb(ctx context.Context, formats strfmt.Registry) error {

	if m.Breadcrumb != nil {

		if swag.IsZero(m.Breadcrumb) { // not required
			return nil
		}

		if err := m.Breadcrumb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breadcrumb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breadcrumb")
			}
			return err
		}
	}

	return nil
}

func (m *FlowBreadcrumbEntity) contextValidateParentBreadcrumb(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentBreadcrumb != nil {

		if swag.IsZero(m.ParentBreadcrumb) { // not required
			return nil
		}

		if err := m.ParentBreadcrumb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentBreadcrumb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentBreadcrumb")
			}
			return err
		}
	}

	return nil
}

func (m *FlowBreadcrumbEntity) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.Permissions != nil {

		if swag.IsZero(m.Permissions) { // not required
			return nil
		}

		if err := m.Permissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowBreadcrumbEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowBreadcrumbEntity) UnmarshalBinary(b []byte) error {
	var res FlowBreadcrumbEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

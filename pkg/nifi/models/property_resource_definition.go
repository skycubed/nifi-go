// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PropertyResourceDefinition property resource definition
//
// swagger:model PropertyResourceDefinition
type PropertyResourceDefinition struct {

	// The cardinality of the resource definition (i.e. single or multiple)
	// Enum: [SINGLE MULTIPLE]
	Cardinality string `json:"cardinality,omitempty"`

	// The types of resources that can be referenced
	// Unique: true
	ResourceTypes []string `json:"resourceTypes"`
}

// Validate validates this property resource definition
func (m *PropertyResourceDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardinality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var propertyResourceDefinitionTypeCardinalityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SINGLE","MULTIPLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		propertyResourceDefinitionTypeCardinalityPropEnum = append(propertyResourceDefinitionTypeCardinalityPropEnum, v)
	}
}

const (

	// PropertyResourceDefinitionCardinalitySINGLE captures enum value "SINGLE"
	PropertyResourceDefinitionCardinalitySINGLE string = "SINGLE"

	// PropertyResourceDefinitionCardinalityMULTIPLE captures enum value "MULTIPLE"
	PropertyResourceDefinitionCardinalityMULTIPLE string = "MULTIPLE"
)

// prop value enum
func (m *PropertyResourceDefinition) validateCardinalityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, propertyResourceDefinitionTypeCardinalityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PropertyResourceDefinition) validateCardinality(formats strfmt.Registry) error {
	if swag.IsZero(m.Cardinality) { // not required
		return nil
	}

	// value enum
	if err := m.validateCardinalityEnum("cardinality", "body", m.Cardinality); err != nil {
		return err
	}

	return nil
}

var propertyResourceDefinitionResourceTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FILE","DIRECTORY","TEXT","URL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		propertyResourceDefinitionResourceTypesItemsEnum = append(propertyResourceDefinitionResourceTypesItemsEnum, v)
	}
}

func (m *PropertyResourceDefinition) validateResourceTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, propertyResourceDefinitionResourceTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PropertyResourceDefinition) validateResourceTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("resourceTypes", "body", m.ResourceTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceTypes); i++ {

		// value enum
		if err := m.validateResourceTypesItemsEnum("resourceTypes"+"."+strconv.Itoa(i), "body", m.ResourceTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this property resource definition based on context it is used
func (m *PropertyResourceDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PropertyResourceDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PropertyResourceDefinition) UnmarshalBinary(b []byte) error {
	var res PropertyResourceDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

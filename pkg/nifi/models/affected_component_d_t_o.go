// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffectedComponentDTO affected component d t o
//
// swagger:model AffectedComponentDTO
type AffectedComponentDTO struct {

	// The number of active threads for the referencing component.
	ActiveThreadCount int32 `json:"activeThreadCount,omitempty"`

	// The UUID of this component
	ID string `json:"id,omitempty"`

	// The name of this component.
	Name string `json:"name,omitempty"`

	// The UUID of the Process Group that this component is in
	ProcessGroupID string `json:"processGroupId,omitempty"`

	// The type of this component
	// Enum: [PROCESSOR CONTROLLER_SERVICE INPUT_PORT OUTPUT_PORT REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT]
	ReferenceType string `json:"referenceType,omitempty"`

	// The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state.
	State string `json:"state,omitempty"`

	// The validation errors for the component.
	ValidationErrors []string `json:"validationErrors"`
}

// Validate validates this affected component d t o
func (m *AffectedComponentDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReferenceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var affectedComponentDTOTypeReferenceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSOR","CONTROLLER_SERVICE","INPUT_PORT","OUTPUT_PORT","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		affectedComponentDTOTypeReferenceTypePropEnum = append(affectedComponentDTOTypeReferenceTypePropEnum, v)
	}
}

const (

	// AffectedComponentDTOReferenceTypePROCESSOR captures enum value "PROCESSOR"
	AffectedComponentDTOReferenceTypePROCESSOR string = "PROCESSOR"

	// AffectedComponentDTOReferenceTypeCONTROLLERSERVICE captures enum value "CONTROLLER_SERVICE"
	AffectedComponentDTOReferenceTypeCONTROLLERSERVICE string = "CONTROLLER_SERVICE"

	// AffectedComponentDTOReferenceTypeINPUTPORT captures enum value "INPUT_PORT"
	AffectedComponentDTOReferenceTypeINPUTPORT string = "INPUT_PORT"

	// AffectedComponentDTOReferenceTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	AffectedComponentDTOReferenceTypeOUTPUTPORT string = "OUTPUT_PORT"

	// AffectedComponentDTOReferenceTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	AffectedComponentDTOReferenceTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// AffectedComponentDTOReferenceTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	AffectedComponentDTOReferenceTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"
)

// prop value enum
func (m *AffectedComponentDTO) validateReferenceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, affectedComponentDTOTypeReferenceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AffectedComponentDTO) validateReferenceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReferenceTypeEnum("referenceType", "body", m.ReferenceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this affected component d t o based on context it is used
func (m *AffectedComponentDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AffectedComponentDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffectedComponentDTO) UnmarshalBinary(b []byte) error {
	var res AffectedComponentDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PortDTO port d t o
//
// swagger:model PortDTO
type PortDTO struct {

	// Whether this port can be accessed remotely via Site-to-Site protocol.
	AllowRemoteAccess bool `json:"allowRemoteAccess,omitempty"`

	// The comments for the port.
	Comments string `json:"comments,omitempty"`

	// The number of tasks that should be concurrently scheduled for the port.
	ConcurrentlySchedulableTaskCount int32 `json:"concurrentlySchedulableTaskCount,omitempty"`

	// The user groups that are allowed to access the port.
	// Unique: true
	GroupAccessControl []string `json:"groupAccessControl"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// The name of the port.
	Name string `json:"name,omitempty"`

	// The id of parent process group of this component if applicable.
	ParentGroupID string `json:"parentGroupId,omitempty"`

	// The position of this component in the UI if applicable.
	Position *PositionDTO `json:"position,omitempty"`

	// The state of the port.
	// Enum: [RUNNING STOPPED DISABLED]
	State string `json:"state,omitempty"`

	// Whether the port has incoming or output connections to a remote NiFi. This is only applicable when the port is allowed to be accessed remotely.
	Transmitting bool `json:"transmitting,omitempty"`

	// The type of port.
	// Enum: [INPUT_PORT OUTPUT_PORT]
	Type string `json:"type,omitempty"`

	// The users that are allowed to access the port.
	// Unique: true
	UserAccessControl []string `json:"userAccessControl"`

	// Gets the validation errors from this port. These validation errors represent the problems with the port that must be resolved before it can be started.
	ValidationErrors []string `json:"validationErrors"`

	// The ID of the corresponding component that is under version control
	VersionedComponentID string `json:"versionedComponentId,omitempty"`
}

// Validate validates this port d t o
func (m *PortDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupAccessControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccessControl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortDTO) validateGroupAccessControl(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupAccessControl) { // not required
		return nil
	}

	if err := validate.UniqueItems("groupAccessControl", "body", m.GroupAccessControl); err != nil {
		return err
	}

	return nil
}

func (m *PortDTO) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

var portDTOTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RUNNING","STOPPED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portDTOTypeStatePropEnum = append(portDTOTypeStatePropEnum, v)
	}
}

const (

	// PortDTOStateRUNNING captures enum value "RUNNING"
	PortDTOStateRUNNING string = "RUNNING"

	// PortDTOStateSTOPPED captures enum value "STOPPED"
	PortDTOStateSTOPPED string = "STOPPED"

	// PortDTOStateDISABLED captures enum value "DISABLED"
	PortDTOStateDISABLED string = "DISABLED"
)

// prop value enum
func (m *PortDTO) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portDTOTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PortDTO) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var portDTOTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPUT_PORT","OUTPUT_PORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portDTOTypeTypePropEnum = append(portDTOTypeTypePropEnum, v)
	}
}

const (

	// PortDTOTypeINPUTPORT captures enum value "INPUT_PORT"
	PortDTOTypeINPUTPORT string = "INPUT_PORT"

	// PortDTOTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	PortDTOTypeOUTPUTPORT string = "OUTPUT_PORT"
)

// prop value enum
func (m *PortDTO) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portDTOTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PortDTO) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PortDTO) validateUserAccessControl(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAccessControl) { // not required
		return nil
	}

	if err := validate.UniqueItems("userAccessControl", "body", m.UserAccessControl); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this port d t o based on the context it is used
func (m *PortDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortDTO) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortDTO) UnmarshalBinary(b []byte) error {
	var res PortDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LineageRequestDTO lineage request d t o
//
// swagger:model LineageRequestDTO
type LineageRequestDTO struct {

	// The id of the node where this lineage originated if clustered.
	ClusterNodeID string `json:"clusterNodeId,omitempty"`

	// The event id that was used to generate this lineage, if applicable. The event id is allowed for any type of lineageRequestType. If the lineageRequestType is FLOWFILE and the flowfile uuid is also included in the request, the event id will be ignored.
	EventID int64 `json:"eventId,omitempty"`

	// The type of lineage request. PARENTS will return the lineage for the flowfiles that are parents of the specified event. CHILDREN will return the lineage for the flowfiles that are children of the specified event. FLOWFILE will return the lineage for the specified flowfile.
	// Enum: [PARENTS CHILDREN and FLOWFILE]
	LineageRequestType string `json:"lineageRequestType,omitempty"`

	// The flowfile uuid that was used to generate the lineage. The flowfile uuid is only allowed when the lineageRequestType is FLOWFILE and will take precedence over event id.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this lineage request d t o
func (m *LineageRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLineageRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lineageRequestDTOTypeLineageRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARENTS","CHILDREN","and FLOWFILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineageRequestDTOTypeLineageRequestTypePropEnum = append(lineageRequestDTOTypeLineageRequestTypePropEnum, v)
	}
}

const (

	// LineageRequestDTOLineageRequestTypePARENTS captures enum value "PARENTS"
	LineageRequestDTOLineageRequestTypePARENTS string = "PARENTS"

	// LineageRequestDTOLineageRequestTypeCHILDREN captures enum value "CHILDREN"
	LineageRequestDTOLineageRequestTypeCHILDREN string = "CHILDREN"

	// LineageRequestDTOLineageRequestTypeAndFLOWFILE captures enum value "and FLOWFILE"
	LineageRequestDTOLineageRequestTypeAndFLOWFILE string = "and FLOWFILE"
)

// prop value enum
func (m *LineageRequestDTO) validateLineageRequestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lineageRequestDTOTypeLineageRequestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LineageRequestDTO) validateLineageRequestType(formats strfmt.Registry) error {
	if swag.IsZero(m.LineageRequestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLineageRequestTypeEnum("lineageRequestType", "body", m.LineageRequestType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this lineage request d t o based on context it is used
func (m *LineageRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LineageRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LineageRequestDTO) UnmarshalBinary(b []byte) error {
	var res LineageRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

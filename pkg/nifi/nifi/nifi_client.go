// Code generated by go-swagger; DO NOT EDIT.

package nifi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/operations"

	"github.com/skycubed/nifi-go/pkg/nifi/nifi/access"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/accessoidc"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/accesssaml"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/connections"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/controller"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/controller_services"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/counters"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/data_transfer"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/flow"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/flowfile_queues"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/funnel"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/input_ports"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/labels"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/output_ports"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/parameter_contexts"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/policies"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/process_groups"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/processors"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/provenance"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/provenance_events"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/remote_process_groups"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/reporting_tasks"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/resources"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/site_to_site"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/snippets"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/system_diagnostics"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/templates"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/tenants"
	"github.com/skycubed/nifi-go/pkg/nifi/nifi/versions"
)

// Default nifi HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/nifi-api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new nifi HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Nifi {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new nifi HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Nifi {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new nifi client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Nifi {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Nifi)
	cli.Transport = transport
	cli.Access = access.New(transport, formats)
	cli.Accessoidc = accessoidc.New(transport, formats)
	cli.Accesssaml = accesssaml.New(transport, formats)
	cli.Connections = connections.New(transport, formats)
	cli.Controller = controller.New(transport, formats)
	cli.ControllerServices = controller_services.New(transport, formats)
	cli.Counters = counters.New(transport, formats)
	cli.DataTransfer = data_transfer.New(transport, formats)
	cli.Flow = flow.New(transport, formats)
	cli.FlowfileQueues = flowfile_queues.New(transport, formats)
	cli.Funnel = funnel.New(transport, formats)
	cli.InputPorts = input_ports.New(transport, formats)
	cli.Labels = labels.New(transport, formats)
	cli.Operations = operations.New(transport, formats)
	cli.OutputPorts = output_ports.New(transport, formats)
	cli.ParameterContexts = parameter_contexts.New(transport, formats)
	cli.Policies = policies.New(transport, formats)
	cli.ProcessGroups = process_groups.New(transport, formats)
	cli.Processors = processors.New(transport, formats)
	cli.Provenance = provenance.New(transport, formats)
	cli.ProvenanceEvents = provenance_events.New(transport, formats)
	cli.RemoteProcessGroups = remote_process_groups.New(transport, formats)
	cli.ReportingTasks = reporting_tasks.New(transport, formats)
	cli.Resources = resources.New(transport, formats)
	cli.SiteToSite = site_to_site.New(transport, formats)
	cli.Snippets = snippets.New(transport, formats)
	cli.SystemDiagnostics = system_diagnostics.New(transport, formats)
	cli.Templates = templates.New(transport, formats)
	cli.Tenants = tenants.New(transport, formats)
	cli.Versions = versions.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Nifi is a client for nifi
type Nifi struct {
	Access access.ClientService

	Accessoidc accessoidc.ClientService

	Accesssaml accesssaml.ClientService

	Connections connections.ClientService

	Controller controller.ClientService

	ControllerServices controller_services.ClientService

	Counters counters.ClientService

	DataTransfer data_transfer.ClientService

	Flow flow.ClientService

	FlowfileQueues flowfile_queues.ClientService

	Funnel funnel.ClientService

	InputPorts input_ports.ClientService

	Labels labels.ClientService

	Operations operations.ClientService

	OutputPorts output_ports.ClientService

	ParameterContexts parameter_contexts.ClientService

	Policies policies.ClientService

	ProcessGroups process_groups.ClientService

	Processors processors.ClientService

	Provenance provenance.ClientService

	ProvenanceEvents provenance_events.ClientService

	RemoteProcessGroups remote_process_groups.ClientService

	ReportingTasks reporting_tasks.ClientService

	Resources resources.ClientService

	SiteToSite site_to_site.ClientService

	Snippets snippets.ClientService

	SystemDiagnostics system_diagnostics.ClientService

	Templates templates.ClientService

	Tenants tenants.ClientService

	Versions versions.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Nifi) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Access.SetTransport(transport)
	c.Accessoidc.SetTransport(transport)
	c.Accesssaml.SetTransport(transport)
	c.Connections.SetTransport(transport)
	c.Controller.SetTransport(transport)
	c.ControllerServices.SetTransport(transport)
	c.Counters.SetTransport(transport)
	c.DataTransfer.SetTransport(transport)
	c.Flow.SetTransport(transport)
	c.FlowfileQueues.SetTransport(transport)
	c.Funnel.SetTransport(transport)
	c.InputPorts.SetTransport(transport)
	c.Labels.SetTransport(transport)
	c.Operations.SetTransport(transport)
	c.OutputPorts.SetTransport(transport)
	c.ParameterContexts.SetTransport(transport)
	c.Policies.SetTransport(transport)
	c.ProcessGroups.SetTransport(transport)
	c.Processors.SetTransport(transport)
	c.Provenance.SetTransport(transport)
	c.ProvenanceEvents.SetTransport(transport)
	c.RemoteProcessGroups.SetTransport(transport)
	c.ReportingTasks.SetTransport(transport)
	c.Resources.SetTransport(transport)
	c.SiteToSite.SetTransport(transport)
	c.Snippets.SetTransport(transport)
	c.SystemDiagnostics.SetTransport(transport)
	c.Templates.SetTransport(transport)
	c.Tenants.SetTransport(transport)
	c.Versions.SetTransport(transport)
}

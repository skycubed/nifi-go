// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetAccessTokenExpirationReader is a Reader for the GetAccessTokenExpiration structure.
type GetAccessTokenExpirationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccessTokenExpirationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccessTokenExpirationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAccessTokenExpirationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetAccessTokenExpirationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /access/token/expiration] getAccessTokenExpiration", response, response.Code())
	}
}

// NewGetAccessTokenExpirationOK creates a GetAccessTokenExpirationOK with default headers values
func NewGetAccessTokenExpirationOK() *GetAccessTokenExpirationOK {
	return &GetAccessTokenExpirationOK{}
}

/*
GetAccessTokenExpirationOK describes a response with status code 200, with default header values.

Access Token Expiration found
*/
type GetAccessTokenExpirationOK struct {
	Payload *models.AccessTokenExpirationEntity
}

// IsSuccess returns true when this get access token expiration o k response has a 2xx status code
func (o *GetAccessTokenExpirationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get access token expiration o k response has a 3xx status code
func (o *GetAccessTokenExpirationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access token expiration o k response has a 4xx status code
func (o *GetAccessTokenExpirationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access token expiration o k response has a 5xx status code
func (o *GetAccessTokenExpirationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get access token expiration o k response a status code equal to that given
func (o *GetAccessTokenExpirationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get access token expiration o k response
func (o *GetAccessTokenExpirationOK) Code() int {
	return 200
}

func (o *GetAccessTokenExpirationOK) Error() string {
	return fmt.Sprintf("[GET /access/token/expiration][%d] getAccessTokenExpirationOK  %+v", 200, o.Payload)
}

func (o *GetAccessTokenExpirationOK) String() string {
	return fmt.Sprintf("[GET /access/token/expiration][%d] getAccessTokenExpirationOK  %+v", 200, o.Payload)
}

func (o *GetAccessTokenExpirationOK) GetPayload() *models.AccessTokenExpirationEntity {
	return o.Payload
}

func (o *GetAccessTokenExpirationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessTokenExpirationEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessTokenExpirationUnauthorized creates a GetAccessTokenExpirationUnauthorized with default headers values
func NewGetAccessTokenExpirationUnauthorized() *GetAccessTokenExpirationUnauthorized {
	return &GetAccessTokenExpirationUnauthorized{}
}

/*
GetAccessTokenExpirationUnauthorized describes a response with status code 401, with default header values.

Access Token not authorized
*/
type GetAccessTokenExpirationUnauthorized struct {
}

// IsSuccess returns true when this get access token expiration unauthorized response has a 2xx status code
func (o *GetAccessTokenExpirationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access token expiration unauthorized response has a 3xx status code
func (o *GetAccessTokenExpirationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access token expiration unauthorized response has a 4xx status code
func (o *GetAccessTokenExpirationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access token expiration unauthorized response has a 5xx status code
func (o *GetAccessTokenExpirationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get access token expiration unauthorized response a status code equal to that given
func (o *GetAccessTokenExpirationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get access token expiration unauthorized response
func (o *GetAccessTokenExpirationUnauthorized) Code() int {
	return 401
}

func (o *GetAccessTokenExpirationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /access/token/expiration][%d] getAccessTokenExpirationUnauthorized ", 401)
}

func (o *GetAccessTokenExpirationUnauthorized) String() string {
	return fmt.Sprintf("[GET /access/token/expiration][%d] getAccessTokenExpirationUnauthorized ", 401)
}

func (o *GetAccessTokenExpirationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessTokenExpirationConflict creates a GetAccessTokenExpirationConflict with default headers values
func NewGetAccessTokenExpirationConflict() *GetAccessTokenExpirationConflict {
	return &GetAccessTokenExpirationConflict{}
}

/*
GetAccessTokenExpirationConflict describes a response with status code 409, with default header values.

Access Token not resolved
*/
type GetAccessTokenExpirationConflict struct {
}

// IsSuccess returns true when this get access token expiration conflict response has a 2xx status code
func (o *GetAccessTokenExpirationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access token expiration conflict response has a 3xx status code
func (o *GetAccessTokenExpirationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access token expiration conflict response has a 4xx status code
func (o *GetAccessTokenExpirationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access token expiration conflict response has a 5xx status code
func (o *GetAccessTokenExpirationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get access token expiration conflict response a status code equal to that given
func (o *GetAccessTokenExpirationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get access token expiration conflict response
func (o *GetAccessTokenExpirationConflict) Code() int {
	return 409
}

func (o *GetAccessTokenExpirationConflict) Error() string {
	return fmt.Sprintf("[GET /access/token/expiration][%d] getAccessTokenExpirationConflict ", 409)
}

func (o *GetAccessTokenExpirationConflict) String() string {
	return fmt.Sprintf("[GET /access/token/expiration][%d] getAccessTokenExpirationConflict ", 409)
}

func (o *GetAccessTokenExpirationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProvenanceParams creates a new GetProvenanceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProvenanceParams() *GetProvenanceParams {
	return &GetProvenanceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProvenanceParamsWithTimeout creates a new GetProvenanceParams object
// with the ability to set a timeout on a request.
func NewGetProvenanceParamsWithTimeout(timeout time.Duration) *GetProvenanceParams {
	return &GetProvenanceParams{
		timeout: timeout,
	}
}

// NewGetProvenanceParamsWithContext creates a new GetProvenanceParams object
// with the ability to set a context for a request.
func NewGetProvenanceParamsWithContext(ctx context.Context) *GetProvenanceParams {
	return &GetProvenanceParams{
		Context: ctx,
	}
}

// NewGetProvenanceParamsWithHTTPClient creates a new GetProvenanceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProvenanceParamsWithHTTPClient(client *http.Client) *GetProvenanceParams {
	return &GetProvenanceParams{
		HTTPClient: client,
	}
}

/* GetProvenanceParams contains all the parameters to send to the API endpoint
   for the get provenance operation.

   Typically these are written to a http.Request.
*/
type GetProvenanceParams struct {

	/* ClusterNodeID.

	   The id of the node where this query exists if clustered.
	*/
	ClusterNodeID *string

	/* ID.

	   The id of the provenance query.
	*/
	ID string

	/* IncrementalResults.

	   Whether or not to summarize provenance events returned. This property is false by default.

	   Default: true
	*/
	IncrementalResults *bool

	/* Summarize.

	   Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
	*/
	Summarize *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get provenance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProvenanceParams) WithDefaults() *GetProvenanceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get provenance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProvenanceParams) SetDefaults() {
	var (
		incrementalResultsDefault = bool(true)

		summarizeDefault = bool(false)
	)

	val := GetProvenanceParams{
		IncrementalResults: &incrementalResultsDefault,
		Summarize:          &summarizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get provenance params
func (o *GetProvenanceParams) WithTimeout(timeout time.Duration) *GetProvenanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get provenance params
func (o *GetProvenanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get provenance params
func (o *GetProvenanceParams) WithContext(ctx context.Context) *GetProvenanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get provenance params
func (o *GetProvenanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get provenance params
func (o *GetProvenanceParams) WithHTTPClient(client *http.Client) *GetProvenanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get provenance params
func (o *GetProvenanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterNodeID adds the clusterNodeID to the get provenance params
func (o *GetProvenanceParams) WithClusterNodeID(clusterNodeID *string) *GetProvenanceParams {
	o.SetClusterNodeID(clusterNodeID)
	return o
}

// SetClusterNodeID adds the clusterNodeId to the get provenance params
func (o *GetProvenanceParams) SetClusterNodeID(clusterNodeID *string) {
	o.ClusterNodeID = clusterNodeID
}

// WithID adds the id to the get provenance params
func (o *GetProvenanceParams) WithID(id string) *GetProvenanceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get provenance params
func (o *GetProvenanceParams) SetID(id string) {
	o.ID = id
}

// WithIncrementalResults adds the incrementalResults to the get provenance params
func (o *GetProvenanceParams) WithIncrementalResults(incrementalResults *bool) *GetProvenanceParams {
	o.SetIncrementalResults(incrementalResults)
	return o
}

// SetIncrementalResults adds the incrementalResults to the get provenance params
func (o *GetProvenanceParams) SetIncrementalResults(incrementalResults *bool) {
	o.IncrementalResults = incrementalResults
}

// WithSummarize adds the summarize to the get provenance params
func (o *GetProvenanceParams) WithSummarize(summarize *bool) *GetProvenanceParams {
	o.SetSummarize(summarize)
	return o
}

// SetSummarize adds the summarize to the get provenance params
func (o *GetProvenanceParams) SetSummarize(summarize *bool) {
	o.Summarize = summarize
}

// WriteToRequest writes these params to a swagger request
func (o *GetProvenanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterNodeID != nil {

		// query param clusterNodeId
		var qrClusterNodeID string

		if o.ClusterNodeID != nil {
			qrClusterNodeID = *o.ClusterNodeID
		}
		qClusterNodeID := qrClusterNodeID
		if qClusterNodeID != "" {

			if err := r.SetQueryParam("clusterNodeId", qClusterNodeID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncrementalResults != nil {

		// query param incrementalResults
		var qrIncrementalResults bool

		if o.IncrementalResults != nil {
			qrIncrementalResults = *o.IncrementalResults
		}
		qIncrementalResults := swag.FormatBool(qrIncrementalResults)
		if qIncrementalResults != "" {

			if err := r.SetQueryParam("incrementalResults", qIncrementalResults); err != nil {
				return err
			}
		}
	}

	if o.Summarize != nil {

		// query param summarize
		var qrSummarize bool

		if o.Summarize != nil {
			qrSummarize = *o.Summarize
		}
		qSummarize := swag.FormatBool(qrSummarize)
		if qSummarize != "" {

			if err := r.SetQueryParam("summarize", qSummarize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

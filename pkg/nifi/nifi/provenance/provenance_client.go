// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new provenance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provenance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLineage(params *DeleteLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLineageOK, error)

	DeleteProvenance(params *DeleteProvenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProvenanceOK, error)

	GetLineage(params *GetLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLineageOK, error)

	GetProvenance(params *GetProvenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvenanceOK, error)

	GetSearchOptions(params *GetSearchOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSearchOptionsOK, error)

	SubmitLineageRequest(params *SubmitLineageRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitLineageRequestCreated, error)

	SubmitProvenanceRequest(params *SubmitProvenanceRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitProvenanceRequestCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLineage deletes a lineage query
*/
func (a *Client) DeleteLineage(params *DeleteLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLineageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLineageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLineage",
		Method:             "DELETE",
		PathPattern:        "/provenance/lineage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLineageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLineage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProvenance deletes a provenance query
*/
func (a *Client) DeleteProvenance(params *DeleteProvenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProvenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvenanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProvenance",
		Method:             "DELETE",
		PathPattern:        "/provenance/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProvenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProvenanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProvenance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLineage gets a lineage query
*/
func (a *Client) GetLineage(params *GetLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLineageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLineageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLineage",
		Method:             "GET",
		PathPattern:        "/provenance/lineage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLineageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLineage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvenance gets a provenance query
*/
func (a *Client) GetProvenance(params *GetProvenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvenanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProvenance",
		Method:             "GET",
		PathPattern:        "/provenance/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProvenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvenanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProvenance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSearchOptions gets the searchable attributes for provenance events
*/
func (a *Client) GetSearchOptions(params *GetSearchOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSearchOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSearchOptions",
		Method:             "GET",
		PathPattern:        "/provenance/search-options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSearchOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSearchOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSearchOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitLineageRequest submits a lineage query

  Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
*/
func (a *Client) SubmitLineageRequest(params *SubmitLineageRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitLineageRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitLineageRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitLineageRequest",
		Method:             "POST",
		PathPattern:        "/provenance/lineage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitLineageRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitLineageRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitLineageRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitProvenanceRequest submits a provenance query

  Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
*/
func (a *Client) SubmitProvenanceRequest(params *SubmitProvenanceRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitProvenanceRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitProvenanceRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitProvenanceRequest",
		Method:             "POST",
		PathPattern:        "/provenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitProvenanceRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitProvenanceRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitProvenanceRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

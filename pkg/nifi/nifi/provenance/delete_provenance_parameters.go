// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteProvenanceParams creates a new DeleteProvenanceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteProvenanceParams() *DeleteProvenanceParams {
	return &DeleteProvenanceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProvenanceParamsWithTimeout creates a new DeleteProvenanceParams object
// with the ability to set a timeout on a request.
func NewDeleteProvenanceParamsWithTimeout(timeout time.Duration) *DeleteProvenanceParams {
	return &DeleteProvenanceParams{
		timeout: timeout,
	}
}

// NewDeleteProvenanceParamsWithContext creates a new DeleteProvenanceParams object
// with the ability to set a context for a request.
func NewDeleteProvenanceParamsWithContext(ctx context.Context) *DeleteProvenanceParams {
	return &DeleteProvenanceParams{
		Context: ctx,
	}
}

// NewDeleteProvenanceParamsWithHTTPClient creates a new DeleteProvenanceParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteProvenanceParamsWithHTTPClient(client *http.Client) *DeleteProvenanceParams {
	return &DeleteProvenanceParams{
		HTTPClient: client,
	}
}

/* DeleteProvenanceParams contains all the parameters to send to the API endpoint
   for the delete provenance operation.

   Typically these are written to a http.Request.
*/
type DeleteProvenanceParams struct {

	/* ClusterNodeID.

	   The id of the node where this query exists if clustered.
	*/
	ClusterNodeID *string

	/* ID.

	   The id of the provenance query.
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete provenance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteProvenanceParams) WithDefaults() *DeleteProvenanceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete provenance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteProvenanceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete provenance params
func (o *DeleteProvenanceParams) WithTimeout(timeout time.Duration) *DeleteProvenanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete provenance params
func (o *DeleteProvenanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete provenance params
func (o *DeleteProvenanceParams) WithContext(ctx context.Context) *DeleteProvenanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete provenance params
func (o *DeleteProvenanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete provenance params
func (o *DeleteProvenanceParams) WithHTTPClient(client *http.Client) *DeleteProvenanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete provenance params
func (o *DeleteProvenanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterNodeID adds the clusterNodeID to the delete provenance params
func (o *DeleteProvenanceParams) WithClusterNodeID(clusterNodeID *string) *DeleteProvenanceParams {
	o.SetClusterNodeID(clusterNodeID)
	return o
}

// SetClusterNodeID adds the clusterNodeId to the delete provenance params
func (o *DeleteProvenanceParams) SetClusterNodeID(clusterNodeID *string) {
	o.ClusterNodeID = clusterNodeID
}

// WithID adds the id to the delete provenance params
func (o *DeleteProvenanceParams) WithID(id string) *DeleteProvenanceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete provenance params
func (o *DeleteProvenanceParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProvenanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterNodeID != nil {

		// query param clusterNodeId
		var qrClusterNodeID string

		if o.ClusterNodeID != nil {
			qrClusterNodeID = *o.ClusterNodeID
		}
		qClusterNodeID := qrClusterNodeID
		if qClusterNodeID != "" {

			if err := r.SetQueryParam("clusterNodeId", qClusterNodeID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

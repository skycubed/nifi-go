// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// DeleteProvenanceReader is a Reader for the DeleteProvenance structure.
type DeleteProvenanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteProvenanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteProvenanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteProvenanceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteProvenanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteProvenanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteProvenanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteProvenanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteProvenanceOK creates a DeleteProvenanceOK with default headers values
func NewDeleteProvenanceOK() *DeleteProvenanceOK {
	return &DeleteProvenanceOK{}
}

/* DeleteProvenanceOK describes a response with status code 200, with default header values.

successful operation
*/
type DeleteProvenanceOK struct {
	Payload *models.ProvenanceEntity
}

func (o *DeleteProvenanceOK) Error() string {
	return fmt.Sprintf("[DELETE /provenance/{id}][%d] deleteProvenanceOK  %+v", 200, o.Payload)
}
func (o *DeleteProvenanceOK) GetPayload() *models.ProvenanceEntity {
	return o.Payload
}

func (o *DeleteProvenanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvenanceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteProvenanceBadRequest creates a DeleteProvenanceBadRequest with default headers values
func NewDeleteProvenanceBadRequest() *DeleteProvenanceBadRequest {
	return &DeleteProvenanceBadRequest{}
}

/* DeleteProvenanceBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type DeleteProvenanceBadRequest struct {
}

func (o *DeleteProvenanceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /provenance/{id}][%d] deleteProvenanceBadRequest ", 400)
}

func (o *DeleteProvenanceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProvenanceUnauthorized creates a DeleteProvenanceUnauthorized with default headers values
func NewDeleteProvenanceUnauthorized() *DeleteProvenanceUnauthorized {
	return &DeleteProvenanceUnauthorized{}
}

/* DeleteProvenanceUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type DeleteProvenanceUnauthorized struct {
}

func (o *DeleteProvenanceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /provenance/{id}][%d] deleteProvenanceUnauthorized ", 401)
}

func (o *DeleteProvenanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProvenanceForbidden creates a DeleteProvenanceForbidden with default headers values
func NewDeleteProvenanceForbidden() *DeleteProvenanceForbidden {
	return &DeleteProvenanceForbidden{}
}

/* DeleteProvenanceForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type DeleteProvenanceForbidden struct {
}

func (o *DeleteProvenanceForbidden) Error() string {
	return fmt.Sprintf("[DELETE /provenance/{id}][%d] deleteProvenanceForbidden ", 403)
}

func (o *DeleteProvenanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProvenanceNotFound creates a DeleteProvenanceNotFound with default headers values
func NewDeleteProvenanceNotFound() *DeleteProvenanceNotFound {
	return &DeleteProvenanceNotFound{}
}

/* DeleteProvenanceNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type DeleteProvenanceNotFound struct {
}

func (o *DeleteProvenanceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /provenance/{id}][%d] deleteProvenanceNotFound ", 404)
}

func (o *DeleteProvenanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProvenanceConflict creates a DeleteProvenanceConflict with default headers values
func NewDeleteProvenanceConflict() *DeleteProvenanceConflict {
	return &DeleteProvenanceConflict{}
}

/* DeleteProvenanceConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type DeleteProvenanceConflict struct {
}

func (o *DeleteProvenanceConflict) Error() string {
	return fmt.Sprintf("[DELETE /provenance/{id}][%d] deleteProvenanceConflict ", 409)
}

func (o *DeleteProvenanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

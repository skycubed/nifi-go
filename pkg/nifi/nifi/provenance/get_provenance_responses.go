// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetProvenanceReader is a Reader for the GetProvenance structure.
type GetProvenanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProvenanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProvenanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProvenanceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProvenanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProvenanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProvenanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetProvenanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /provenance/{id}] getProvenance", response, response.Code())
	}
}

// NewGetProvenanceOK creates a GetProvenanceOK with default headers values
func NewGetProvenanceOK() *GetProvenanceOK {
	return &GetProvenanceOK{}
}

/*
GetProvenanceOK describes a response with status code 200, with default header values.

successful operation
*/
type GetProvenanceOK struct {
	Payload *models.ProvenanceEntity
}

// IsSuccess returns true when this get provenance o k response has a 2xx status code
func (o *GetProvenanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get provenance o k response has a 3xx status code
func (o *GetProvenanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get provenance o k response has a 4xx status code
func (o *GetProvenanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get provenance o k response has a 5xx status code
func (o *GetProvenanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get provenance o k response a status code equal to that given
func (o *GetProvenanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get provenance o k response
func (o *GetProvenanceOK) Code() int {
	return 200
}

func (o *GetProvenanceOK) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceOK  %+v", 200, o.Payload)
}

func (o *GetProvenanceOK) String() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceOK  %+v", 200, o.Payload)
}

func (o *GetProvenanceOK) GetPayload() *models.ProvenanceEntity {
	return o.Payload
}

func (o *GetProvenanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvenanceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProvenanceBadRequest creates a GetProvenanceBadRequest with default headers values
func NewGetProvenanceBadRequest() *GetProvenanceBadRequest {
	return &GetProvenanceBadRequest{}
}

/*
GetProvenanceBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetProvenanceBadRequest struct {
}

// IsSuccess returns true when this get provenance bad request response has a 2xx status code
func (o *GetProvenanceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get provenance bad request response has a 3xx status code
func (o *GetProvenanceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get provenance bad request response has a 4xx status code
func (o *GetProvenanceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get provenance bad request response has a 5xx status code
func (o *GetProvenanceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get provenance bad request response a status code equal to that given
func (o *GetProvenanceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get provenance bad request response
func (o *GetProvenanceBadRequest) Code() int {
	return 400
}

func (o *GetProvenanceBadRequest) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceBadRequest ", 400)
}

func (o *GetProvenanceBadRequest) String() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceBadRequest ", 400)
}

func (o *GetProvenanceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceUnauthorized creates a GetProvenanceUnauthorized with default headers values
func NewGetProvenanceUnauthorized() *GetProvenanceUnauthorized {
	return &GetProvenanceUnauthorized{}
}

/*
GetProvenanceUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetProvenanceUnauthorized struct {
}

// IsSuccess returns true when this get provenance unauthorized response has a 2xx status code
func (o *GetProvenanceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get provenance unauthorized response has a 3xx status code
func (o *GetProvenanceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get provenance unauthorized response has a 4xx status code
func (o *GetProvenanceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get provenance unauthorized response has a 5xx status code
func (o *GetProvenanceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get provenance unauthorized response a status code equal to that given
func (o *GetProvenanceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get provenance unauthorized response
func (o *GetProvenanceUnauthorized) Code() int {
	return 401
}

func (o *GetProvenanceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceUnauthorized ", 401)
}

func (o *GetProvenanceUnauthorized) String() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceUnauthorized ", 401)
}

func (o *GetProvenanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceForbidden creates a GetProvenanceForbidden with default headers values
func NewGetProvenanceForbidden() *GetProvenanceForbidden {
	return &GetProvenanceForbidden{}
}

/*
GetProvenanceForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetProvenanceForbidden struct {
}

// IsSuccess returns true when this get provenance forbidden response has a 2xx status code
func (o *GetProvenanceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get provenance forbidden response has a 3xx status code
func (o *GetProvenanceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get provenance forbidden response has a 4xx status code
func (o *GetProvenanceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get provenance forbidden response has a 5xx status code
func (o *GetProvenanceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get provenance forbidden response a status code equal to that given
func (o *GetProvenanceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get provenance forbidden response
func (o *GetProvenanceForbidden) Code() int {
	return 403
}

func (o *GetProvenanceForbidden) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceForbidden ", 403)
}

func (o *GetProvenanceForbidden) String() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceForbidden ", 403)
}

func (o *GetProvenanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceNotFound creates a GetProvenanceNotFound with default headers values
func NewGetProvenanceNotFound() *GetProvenanceNotFound {
	return &GetProvenanceNotFound{}
}

/*
GetProvenanceNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetProvenanceNotFound struct {
}

// IsSuccess returns true when this get provenance not found response has a 2xx status code
func (o *GetProvenanceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get provenance not found response has a 3xx status code
func (o *GetProvenanceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get provenance not found response has a 4xx status code
func (o *GetProvenanceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get provenance not found response has a 5xx status code
func (o *GetProvenanceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get provenance not found response a status code equal to that given
func (o *GetProvenanceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get provenance not found response
func (o *GetProvenanceNotFound) Code() int {
	return 404
}

func (o *GetProvenanceNotFound) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceNotFound ", 404)
}

func (o *GetProvenanceNotFound) String() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceNotFound ", 404)
}

func (o *GetProvenanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceConflict creates a GetProvenanceConflict with default headers values
func NewGetProvenanceConflict() *GetProvenanceConflict {
	return &GetProvenanceConflict{}
}

/*
GetProvenanceConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetProvenanceConflict struct {
}

// IsSuccess returns true when this get provenance conflict response has a 2xx status code
func (o *GetProvenanceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get provenance conflict response has a 3xx status code
func (o *GetProvenanceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get provenance conflict response has a 4xx status code
func (o *GetProvenanceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get provenance conflict response has a 5xx status code
func (o *GetProvenanceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get provenance conflict response a status code equal to that given
func (o *GetProvenanceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get provenance conflict response
func (o *GetProvenanceConflict) Code() int {
	return 409
}

func (o *GetProvenanceConflict) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceConflict ", 409)
}

func (o *GetProvenanceConflict) String() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceConflict ", 409)
}

func (o *GetProvenanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

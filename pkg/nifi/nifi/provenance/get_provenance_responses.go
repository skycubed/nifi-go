// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetProvenanceReader is a Reader for the GetProvenance structure.
type GetProvenanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProvenanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProvenanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProvenanceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProvenanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProvenanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProvenanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetProvenanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProvenanceOK creates a GetProvenanceOK with default headers values
func NewGetProvenanceOK() *GetProvenanceOK {
	return &GetProvenanceOK{}
}

/* GetProvenanceOK describes a response with status code 200, with default header values.

successful operation
*/
type GetProvenanceOK struct {
	Payload *models.ProvenanceEntity
}

func (o *GetProvenanceOK) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceOK  %+v", 200, o.Payload)
}
func (o *GetProvenanceOK) GetPayload() *models.ProvenanceEntity {
	return o.Payload
}

func (o *GetProvenanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvenanceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProvenanceBadRequest creates a GetProvenanceBadRequest with default headers values
func NewGetProvenanceBadRequest() *GetProvenanceBadRequest {
	return &GetProvenanceBadRequest{}
}

/* GetProvenanceBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetProvenanceBadRequest struct {
}

func (o *GetProvenanceBadRequest) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceBadRequest ", 400)
}

func (o *GetProvenanceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceUnauthorized creates a GetProvenanceUnauthorized with default headers values
func NewGetProvenanceUnauthorized() *GetProvenanceUnauthorized {
	return &GetProvenanceUnauthorized{}
}

/* GetProvenanceUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetProvenanceUnauthorized struct {
}

func (o *GetProvenanceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceUnauthorized ", 401)
}

func (o *GetProvenanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceForbidden creates a GetProvenanceForbidden with default headers values
func NewGetProvenanceForbidden() *GetProvenanceForbidden {
	return &GetProvenanceForbidden{}
}

/* GetProvenanceForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetProvenanceForbidden struct {
}

func (o *GetProvenanceForbidden) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceForbidden ", 403)
}

func (o *GetProvenanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceNotFound creates a GetProvenanceNotFound with default headers values
func NewGetProvenanceNotFound() *GetProvenanceNotFound {
	return &GetProvenanceNotFound{}
}

/* GetProvenanceNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetProvenanceNotFound struct {
}

func (o *GetProvenanceNotFound) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceNotFound ", 404)
}

func (o *GetProvenanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProvenanceConflict creates a GetProvenanceConflict with default headers values
func NewGetProvenanceConflict() *GetProvenanceConflict {
	return &GetProvenanceConflict{}
}

/* GetProvenanceConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetProvenanceConflict struct {
}

func (o *GetProvenanceConflict) Error() string {
	return fmt.Sprintf("[GET /provenance/{id}][%d] getProvenanceConflict ", 409)
}

func (o *GetProvenanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

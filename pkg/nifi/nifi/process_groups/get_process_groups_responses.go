// Code generated by go-swagger; DO NOT EDIT.

package process_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetProcessGroupsReader is a Reader for the GetProcessGroups structure.
type GetProcessGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProcessGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProcessGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProcessGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProcessGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProcessGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProcessGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetProcessGroupsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProcessGroupsOK creates a GetProcessGroupsOK with default headers values
func NewGetProcessGroupsOK() *GetProcessGroupsOK {
	return &GetProcessGroupsOK{}
}

/* GetProcessGroupsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetProcessGroupsOK struct {
	Payload *models.ProcessGroupsEntity
}

func (o *GetProcessGroupsOK) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/process-groups][%d] getProcessGroupsOK  %+v", 200, o.Payload)
}
func (o *GetProcessGroupsOK) GetPayload() *models.ProcessGroupsEntity {
	return o.Payload
}

func (o *GetProcessGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProcessGroupsEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProcessGroupsBadRequest creates a GetProcessGroupsBadRequest with default headers values
func NewGetProcessGroupsBadRequest() *GetProcessGroupsBadRequest {
	return &GetProcessGroupsBadRequest{}
}

/* GetProcessGroupsBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetProcessGroupsBadRequest struct {
}

func (o *GetProcessGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/process-groups][%d] getProcessGroupsBadRequest ", 400)
}

func (o *GetProcessGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessGroupsUnauthorized creates a GetProcessGroupsUnauthorized with default headers values
func NewGetProcessGroupsUnauthorized() *GetProcessGroupsUnauthorized {
	return &GetProcessGroupsUnauthorized{}
}

/* GetProcessGroupsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetProcessGroupsUnauthorized struct {
}

func (o *GetProcessGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/process-groups][%d] getProcessGroupsUnauthorized ", 401)
}

func (o *GetProcessGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessGroupsForbidden creates a GetProcessGroupsForbidden with default headers values
func NewGetProcessGroupsForbidden() *GetProcessGroupsForbidden {
	return &GetProcessGroupsForbidden{}
}

/* GetProcessGroupsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetProcessGroupsForbidden struct {
}

func (o *GetProcessGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/process-groups][%d] getProcessGroupsForbidden ", 403)
}

func (o *GetProcessGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessGroupsNotFound creates a GetProcessGroupsNotFound with default headers values
func NewGetProcessGroupsNotFound() *GetProcessGroupsNotFound {
	return &GetProcessGroupsNotFound{}
}

/* GetProcessGroupsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetProcessGroupsNotFound struct {
}

func (o *GetProcessGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/process-groups][%d] getProcessGroupsNotFound ", 404)
}

func (o *GetProcessGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessGroupsConflict creates a GetProcessGroupsConflict with default headers values
func NewGetProcessGroupsConflict() *GetProcessGroupsConflict {
	return &GetProcessGroupsConflict{}
}

/* GetProcessGroupsConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetProcessGroupsConflict struct {
}

func (o *GetProcessGroupsConflict) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/process-groups][%d] getProcessGroupsConflict ", 409)
}

func (o *GetProcessGroupsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package process_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetConnectionsReader is a Reader for the GetConnections structure.
type GetConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConnectionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetConnectionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConnectionsOK creates a GetConnectionsOK with default headers values
func NewGetConnectionsOK() *GetConnectionsOK {
	return &GetConnectionsOK{}
}

/* GetConnectionsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetConnectionsOK struct {
	Payload *models.ConnectionsEntity
}

func (o *GetConnectionsOK) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/connections][%d] getConnectionsOK  %+v", 200, o.Payload)
}
func (o *GetConnectionsOK) GetPayload() *models.ConnectionsEntity {
	return o.Payload
}

func (o *GetConnectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionsEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsBadRequest creates a GetConnectionsBadRequest with default headers values
func NewGetConnectionsBadRequest() *GetConnectionsBadRequest {
	return &GetConnectionsBadRequest{}
}

/* GetConnectionsBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetConnectionsBadRequest struct {
}

func (o *GetConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/connections][%d] getConnectionsBadRequest ", 400)
}

func (o *GetConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionsUnauthorized creates a GetConnectionsUnauthorized with default headers values
func NewGetConnectionsUnauthorized() *GetConnectionsUnauthorized {
	return &GetConnectionsUnauthorized{}
}

/* GetConnectionsUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetConnectionsUnauthorized struct {
}

func (o *GetConnectionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/connections][%d] getConnectionsUnauthorized ", 401)
}

func (o *GetConnectionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionsForbidden creates a GetConnectionsForbidden with default headers values
func NewGetConnectionsForbidden() *GetConnectionsForbidden {
	return &GetConnectionsForbidden{}
}

/* GetConnectionsForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetConnectionsForbidden struct {
}

func (o *GetConnectionsForbidden) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/connections][%d] getConnectionsForbidden ", 403)
}

func (o *GetConnectionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionsNotFound creates a GetConnectionsNotFound with default headers values
func NewGetConnectionsNotFound() *GetConnectionsNotFound {
	return &GetConnectionsNotFound{}
}

/* GetConnectionsNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetConnectionsNotFound struct {
}

func (o *GetConnectionsNotFound) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/connections][%d] getConnectionsNotFound ", 404)
}

func (o *GetConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionsConflict creates a GetConnectionsConflict with default headers values
func NewGetConnectionsConflict() *GetConnectionsConflict {
	return &GetConnectionsConflict{}
}

/* GetConnectionsConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetConnectionsConflict struct {
}

func (o *GetConnectionsConflict) Error() string {
	return fmt.Sprintf("[GET /process-groups/{id}/connections][%d] getConnectionsConflict ", 409)
}

func (o *GetConnectionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

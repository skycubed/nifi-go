// Code generated by go-swagger; DO NOT EDIT.

package process_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new process groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for process groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CopySnippet(params *CopySnippetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CopySnippetOK, error)

	CreateConnection(params *CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateConnectionOK, error)

	CreateControllerService(params *CreateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateControllerServiceOK, error)

	CreateEmptyAllConnectionsRequest(params *CreateEmptyAllConnectionsRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmptyAllConnectionsRequestOK, *CreateEmptyAllConnectionsRequestAccepted, error)

	CreateFunnel(params *CreateFunnelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFunnelOK, error)

	CreateInputPort(params *CreateInputPortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInputPortOK, error)

	CreateLabel(params *CreateLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLabelOK, error)

	CreateOutputPort(params *CreateOutputPortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOutputPortOK, error)

	CreateProcessGroup(params *CreateProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProcessGroupOK, error)

	CreateProcessor(params *CreateProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProcessorOK, error)

	CreateRemoteProcessGroup(params *CreateRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteProcessGroupOK, error)

	CreateTemplate(params *CreateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTemplateOK, error)

	DeleteReplaceProcessGroupRequest(params *DeleteReplaceProcessGroupRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReplaceProcessGroupRequestOK, error)

	DeleteVariableRegistryUpdateRequest(params *DeleteVariableRegistryUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVariableRegistryUpdateRequestOK, error)

	ExportProcessGroup(params *ExportProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportProcessGroupOK, error)

	GetConnections(params *GetConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionsOK, error)

	GetDropAllFlowfilesRequest(params *GetDropAllFlowfilesRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDropAllFlowfilesRequestOK, error)

	GetFunnels(params *GetFunnelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFunnelsOK, error)

	GetInputPorts(params *GetInputPortsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInputPortsOK, error)

	GetLabels(params *GetLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLabelsOK, error)

	GetLocalModifications(params *GetLocalModificationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLocalModificationsOK, error)

	GetOutputPorts(params *GetOutputPortsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputPortsOK, error)

	GetProcessGroup(params *GetProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupOK, error)

	GetProcessGroups(params *GetProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupsOK, error)

	GetProcessors(params *GetProcessorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorsOK, error)

	GetRemoteProcessGroups(params *GetRemoteProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteProcessGroupsOK, error)

	GetReplaceProcessGroupRequest(params *GetReplaceProcessGroupRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplaceProcessGroupRequestOK, error)

	GetVariableRegistry(params *GetVariableRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableRegistryOK, error)

	GetVariableRegistryUpdateRequest(params *GetVariableRegistryUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableRegistryUpdateRequestOK, error)

	ImportProcessGroup(params *ImportProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportProcessGroupOK, error)

	ImportTemplate(params *ImportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportTemplateOK, error)

	InitiateReplaceProcessGroup(params *InitiateReplaceProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateReplaceProcessGroupOK, error)

	InstantiateTemplate(params *InstantiateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantiateTemplateOK, error)

	RemoveDropRequest(params *RemoveDropRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDropRequestOK, error)

	RemoveProcessGroup(params *RemoveProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveProcessGroupOK, error)

	ReplaceProcessGroup(params *ReplaceProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceProcessGroupOK, error)

	SubmitUpdateVariableRegistryRequest(params *SubmitUpdateVariableRegistryRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitUpdateVariableRegistryRequestOK, error)

	UpdateProcessGroup(params *UpdateProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProcessGroupOK, error)

	UpdateVariableRegistry(params *UpdateVariableRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVariableRegistryOK, error)

	UploadProcessGroup(params *UploadProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadProcessGroupOK, error)

	UploadTemplate(params *UploadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CopySnippet copies a snippet and discards it
*/
func (a *Client) CopySnippet(params *CopySnippetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CopySnippetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopySnippetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "copySnippet",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/snippet-instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CopySnippetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CopySnippetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for copySnippet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateConnection creates a connection
*/
func (a *Client) CreateConnection(params *CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createConnection",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateControllerService creates a new controller service
*/
func (a *Client) CreateControllerService(params *CreateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateControllerServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createControllerService",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateControllerServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createControllerService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEmptyAllConnectionsRequest creates a request to drop all flowfiles of all connection queues in this process group
*/
func (a *Client) CreateEmptyAllConnectionsRequest(params *CreateEmptyAllConnectionsRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmptyAllConnectionsRequestOK, *CreateEmptyAllConnectionsRequestAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmptyAllConnectionsRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEmptyAllConnectionsRequest",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/empty-all-connections-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateEmptyAllConnectionsRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEmptyAllConnectionsRequestOK:
		return value, nil, nil
	case *CreateEmptyAllConnectionsRequestAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for process_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFunnel creates a funnel
*/
func (a *Client) CreateFunnel(params *CreateFunnelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFunnelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFunnelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFunnel",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/funnels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFunnelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFunnelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFunnel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateInputPort creates an input port
*/
func (a *Client) CreateInputPort(params *CreateInputPortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInputPortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInputPort",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/input-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateInputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInputPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInputPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLabel creates a label
*/
func (a *Client) CreateLabel(params *CreateLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createLabel",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOutputPort creates an output port
*/
func (a *Client) CreateOutputPort(params *CreateOutputPortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOutputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOutputPortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOutputPort",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/output-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOutputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutputPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOutputPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProcessGroup creates a process group
*/
func (a *Client) CreateProcessGroup(params *CreateProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProcessor creates a new processor
*/
func (a *Client) CreateProcessor(params *CreateProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProcessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProcessor",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/processors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRemoteProcessGroup creates a new process group
*/
func (a *Client) CreateRemoteProcessGroup(params *CreateRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRemoteProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/remote-process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRemoteProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRemoteProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTemplate creates a template and discards the specified snippet
*/
func (a *Client) CreateTemplate(params *CreateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteReplaceProcessGroupRequest deletes the replace request with the given ID

  Deletes the Replace Request with the given ID. After a request is created via a POST to /process-groups/{id}/replace-requests, it is expected that the client will properly clean up the request by DELETE'ing it, once the Replace process has completed. If the request is deleted before the request completes, then the Replace request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteReplaceProcessGroupRequest(params *DeleteReplaceProcessGroupRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReplaceProcessGroupRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReplaceProcessGroupRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteReplaceProcessGroupRequest",
		Method:             "DELETE",
		PathPattern:        "/process-groups/replace-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReplaceProcessGroupRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReplaceProcessGroupRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReplaceProcessGroupRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVariableRegistryUpdateRequest deletes an update request for a process group s variable registry if the request is not yet complete it will automatically be cancelled

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteVariableRegistryUpdateRequest(params *DeleteVariableRegistryUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVariableRegistryUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVariableRegistryUpdateRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVariableRegistryUpdateRequest",
		Method:             "DELETE",
		PathPattern:        "/process-groups/{groupId}/variable-registry/update-requests/{updateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteVariableRegistryUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVariableRegistryUpdateRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVariableRegistryUpdateRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportProcessGroup gets a process group for download
*/
func (a *Client) ExportProcessGroup(params *ExportProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportProcessGroup",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConnections gets all connections
*/
func (a *Client) GetConnections(params *GetConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnections",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDropAllFlowfilesRequest gets the current status of a drop all flowfiles request
*/
func (a *Client) GetDropAllFlowfilesRequest(params *GetDropAllFlowfilesRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDropAllFlowfilesRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDropAllFlowfilesRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDropAllFlowfilesRequest",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/empty-all-connections-requests/{drop-request-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDropAllFlowfilesRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDropAllFlowfilesRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDropAllFlowfilesRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFunnels gets all funnels
*/
func (a *Client) GetFunnels(params *GetFunnelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFunnelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunnelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFunnels",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/funnels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFunnelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFunnelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFunnels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInputPorts gets all input ports
*/
func (a *Client) GetInputPorts(params *GetInputPortsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInputPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInputPortsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInputPorts",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/input-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInputPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInputPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInputPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLabels gets all labels
*/
func (a *Client) GetLabels(params *GetLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLabels",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLocalModifications gets a list of local modifications to the process group since it was last synchronized with the flow registry
*/
func (a *Client) GetLocalModifications(params *GetLocalModificationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLocalModificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocalModificationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLocalModifications",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/local-modifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLocalModificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLocalModificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLocalModifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOutputPorts gets all output ports
*/
func (a *Client) GetOutputPorts(params *GetOutputPortsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputPortsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputPorts",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/output-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutputPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessGroup gets a process group
*/
func (a *Client) GetProcessGroup(params *GetProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessGroup",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessGroups gets all process groups
*/
func (a *Client) GetProcessGroups(params *GetProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessGroups",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessors gets all processors
*/
func (a *Client) GetProcessors(params *GetProcessorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessors",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/processors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRemoteProcessGroups gets all remote process groups
*/
func (a *Client) GetRemoteProcessGroups(params *GetRemoteProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteProcessGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRemoteProcessGroups",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/remote-process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteProcessGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteProcessGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReplaceProcessGroupRequest returns the replace request with the given ID

  Returns the Replace Request with the given ID. Once a Replace Request has been created by performing a POST to /process-groups/{id}/replace-requests, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetReplaceProcessGroupRequest(params *GetReplaceProcessGroupRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplaceProcessGroupRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReplaceProcessGroupRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReplaceProcessGroupRequest",
		Method:             "GET",
		PathPattern:        "/process-groups/replace-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReplaceProcessGroupRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReplaceProcessGroupRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReplaceProcessGroupRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVariableRegistry gets a process group s variable registry

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetVariableRegistry(params *GetVariableRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariableRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVariableRegistry",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/variable-registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVariableRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariableRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVariableRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVariableRegistryUpdateRequest gets a process group s variable registry

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetVariableRegistryUpdateRequest(params *GetVariableRegistryUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableRegistryUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariableRegistryUpdateRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVariableRegistryUpdateRequest",
		Method:             "GET",
		PathPattern:        "/process-groups/{groupId}/variable-registry/update-requests/{updateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVariableRegistryUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariableRegistryUpdateRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVariableRegistryUpdateRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportProcessGroup imports a specified process group
*/
func (a *Client) ImportProcessGroup(params *ImportProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/process-groups/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportTemplate imports a template
*/
func (a *Client) ImportTemplate(params *ImportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/templates/import",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InitiateReplaceProcessGroup initiates the replace request of a process group with the given ID

  This will initiate the action of replacing a process group with the given process group. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a ProcessGroupReplaceRequestEntity, and the process of replacing the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /process-groups/replace-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /process-groups/replace-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) InitiateReplaceProcessGroup(params *InitiateReplaceProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateReplaceProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateReplaceProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initiateReplaceProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/replace-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitiateReplaceProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitiateReplaceProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initiateReplaceProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantiateTemplate instantiates a template
*/
func (a *Client) InstantiateTemplate(params *InstantiateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantiateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantiateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "instantiateTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/template-instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstantiateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantiateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instantiateTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveDropRequest cancels and or removes a request to drop all flowfiles
*/
func (a *Client) RemoveDropRequest(params *RemoveDropRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDropRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDropRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDropRequest",
		Method:             "DELETE",
		PathPattern:        "/process-groups/{id}/empty-all-connections-requests/{drop-request-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveDropRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveDropRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeDropRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveProcessGroup deletes a process group
*/
func (a *Client) RemoveProcessGroup(params *RemoveProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeProcessGroup",
		Method:             "DELETE",
		PathPattern:        "/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceProcessGroup replaces process group contents with the given ID with the specified process group contents

  This endpoint is used for replication within a cluster, when replacing a flow with a new flow. It expects that the flow beingreplaced is not under version control and that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) ReplaceProcessGroup(params *ReplaceProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceProcessGroup",
		Method:             "PUT",
		PathPattern:        "/process-groups/{id}/flow-contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitUpdateVariableRegistryRequest submits a request to update a process group s variable registry

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SubmitUpdateVariableRegistryRequest(params *SubmitUpdateVariableRegistryRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitUpdateVariableRegistryRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitUpdateVariableRegistryRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitUpdateVariableRegistryRequest",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/variable-registry/update-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitUpdateVariableRegistryRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitUpdateVariableRegistryRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitUpdateVariableRegistryRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProcessGroup updates a process group
*/
func (a *Client) UpdateProcessGroup(params *UpdateProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProcessGroup",
		Method:             "PUT",
		PathPattern:        "/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVariableRegistry updates the contents of a process group s variable registry

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateVariableRegistry(params *UpdateVariableRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVariableRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVariableRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVariableRegistry",
		Method:             "PUT",
		PathPattern:        "/process-groups/{id}/variable-registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateVariableRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVariableRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVariableRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadProcessGroup uploads a versioned flow definition and creates a process group
*/
func (a *Client) UploadProcessGroup(params *UploadProcessGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadProcessGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/process-groups/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadTemplate uploads a template
*/
func (a *Client) UploadTemplate(params *UploadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/templates/upload",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reporting tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reporting tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AnalyzeConfiguration(params *AnalyzeConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeConfigurationOK, error)

	ClearState(params *ClearStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClearStateOK, error)

	DeleteValidationRequest(params *DeleteValidationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteValidationRequestOK, error)

	GetPropertyDescriptor(params *GetPropertyDescriptorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPropertyDescriptorOK, error)

	GetReportingTask(params *GetReportingTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportingTaskOK, error)

	GetState(params *GetStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStateOK, error)

	GetVerificationRequest(params *GetVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVerificationRequestOK, error)

	RemoveReportingTask(params *RemoveReportingTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveReportingTaskOK, error)

	SubmitConfigVerificationRequest(params *SubmitConfigVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitConfigVerificationRequestOK, error)

	UpdateReportingTask(params *UpdateReportingTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReportingTaskOK, error)

	UpdateRunStatus(params *UpdateRunStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AnalyzeConfiguration performs analysis of the component s configuration providing information about which attributes are referenced
*/
func (a *Client) AnalyzeConfiguration(params *AnalyzeConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyzeConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "analyzeConfiguration",
		Method:             "POST",
		PathPattern:        "/reporting-tasks/{id}/config/analysis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AnalyzeConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyzeConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for analyzeConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClearState clears the state for a reporting task
*/
func (a *Client) ClearState(params *ClearStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClearStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clearState",
		Method:             "POST",
		PathPattern:        "/reporting-tasks/{id}/state/clear-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClearStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClearStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clearState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteValidationRequest deletes the verification request with the given ID

  Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE'ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.
*/
func (a *Client) DeleteValidationRequest(params *DeleteValidationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteValidationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteValidationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteValidationRequest",
		Method:             "DELETE",
		PathPattern:        "/reporting-tasks/{id}/config/verification-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteValidationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteValidationRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteValidationRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPropertyDescriptor gets a reporting task property descriptor
*/
func (a *Client) GetPropertyDescriptor(params *GetPropertyDescriptorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPropertyDescriptorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPropertyDescriptorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPropertyDescriptor",
		Method:             "GET",
		PathPattern:        "/reporting-tasks/{id}/descriptors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPropertyDescriptorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPropertyDescriptorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPropertyDescriptor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportingTask gets a reporting task
*/
func (a *Client) GetReportingTask(params *GetReportingTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportingTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportingTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReportingTask",
		Method:             "GET",
		PathPattern:        "/reporting-tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReportingTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportingTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportingTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetState gets the state for a reporting task
*/
func (a *Client) GetState(params *GetStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getState",
		Method:             "GET",
		PathPattern:        "/reporting-tasks/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVerificationRequest returns the verification request with the given ID

  Returns the Verification Request with the given ID. Once an Verification Request has been created, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures.
*/
func (a *Client) GetVerificationRequest(params *GetVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVerificationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVerificationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVerificationRequest",
		Method:             "GET",
		PathPattern:        "/reporting-tasks/{id}/config/verification-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVerificationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVerificationRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVerificationRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveReportingTask deletes a reporting task
*/
func (a *Client) RemoveReportingTask(params *RemoveReportingTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveReportingTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveReportingTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeReportingTask",
		Method:             "DELETE",
		PathPattern:        "/reporting-tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveReportingTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveReportingTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeReportingTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitConfigVerificationRequest performs verification of the reporting task s configuration

  This will initiate the process of verifying a given Reporting Task configuration. This may be a long-running task. As a result, this endpoint will immediately return a ReportingTaskConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /reporting-tasks/{serviceId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /reporting-tasks/{serviceId}/verification-requests/{requestId}.
*/
func (a *Client) SubmitConfigVerificationRequest(params *SubmitConfigVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitConfigVerificationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitConfigVerificationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitConfigVerificationRequest",
		Method:             "POST",
		PathPattern:        "/reporting-tasks/{id}/config/verification-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitConfigVerificationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitConfigVerificationRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitConfigVerificationRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReportingTask updates a reporting task
*/
func (a *Client) UpdateReportingTask(params *UpdateReportingTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReportingTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportingTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReportingTask",
		Method:             "PUT",
		PathPattern:        "/reporting-tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateReportingTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReportingTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReportingTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunStatus updates run status of a reporting task
*/
func (a *Client) UpdateRunStatus(params *UpdateRunStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRunStatus",
		Method:             "PUT",
		PathPattern:        "/reporting-tasks/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetReportingTaskReader is a Reader for the GetReportingTask structure.
type GetReportingTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportingTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportingTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportingTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReportingTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportingTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportingTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetReportingTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /reporting-tasks/{id}] getReportingTask", response, response.Code())
	}
}

// NewGetReportingTaskOK creates a GetReportingTaskOK with default headers values
func NewGetReportingTaskOK() *GetReportingTaskOK {
	return &GetReportingTaskOK{}
}

/*
GetReportingTaskOK describes a response with status code 200, with default header values.

successful operation
*/
type GetReportingTaskOK struct {
	Payload *models.ReportingTaskEntity
}

// IsSuccess returns true when this get reporting task o k response has a 2xx status code
func (o *GetReportingTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get reporting task o k response has a 3xx status code
func (o *GetReportingTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting task o k response has a 4xx status code
func (o *GetReportingTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get reporting task o k response has a 5xx status code
func (o *GetReportingTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting task o k response a status code equal to that given
func (o *GetReportingTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get reporting task o k response
func (o *GetReportingTaskOK) Code() int {
	return 200
}

func (o *GetReportingTaskOK) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskOK  %+v", 200, o.Payload)
}

func (o *GetReportingTaskOK) String() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskOK  %+v", 200, o.Payload)
}

func (o *GetReportingTaskOK) GetPayload() *models.ReportingTaskEntity {
	return o.Payload
}

func (o *GetReportingTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTaskEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportingTaskBadRequest creates a GetReportingTaskBadRequest with default headers values
func NewGetReportingTaskBadRequest() *GetReportingTaskBadRequest {
	return &GetReportingTaskBadRequest{}
}

/*
GetReportingTaskBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetReportingTaskBadRequest struct {
}

// IsSuccess returns true when this get reporting task bad request response has a 2xx status code
func (o *GetReportingTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting task bad request response has a 3xx status code
func (o *GetReportingTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting task bad request response has a 4xx status code
func (o *GetReportingTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting task bad request response has a 5xx status code
func (o *GetReportingTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting task bad request response a status code equal to that given
func (o *GetReportingTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get reporting task bad request response
func (o *GetReportingTaskBadRequest) Code() int {
	return 400
}

func (o *GetReportingTaskBadRequest) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskBadRequest ", 400)
}

func (o *GetReportingTaskBadRequest) String() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskBadRequest ", 400)
}

func (o *GetReportingTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskUnauthorized creates a GetReportingTaskUnauthorized with default headers values
func NewGetReportingTaskUnauthorized() *GetReportingTaskUnauthorized {
	return &GetReportingTaskUnauthorized{}
}

/*
GetReportingTaskUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetReportingTaskUnauthorized struct {
}

// IsSuccess returns true when this get reporting task unauthorized response has a 2xx status code
func (o *GetReportingTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting task unauthorized response has a 3xx status code
func (o *GetReportingTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting task unauthorized response has a 4xx status code
func (o *GetReportingTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting task unauthorized response has a 5xx status code
func (o *GetReportingTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting task unauthorized response a status code equal to that given
func (o *GetReportingTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get reporting task unauthorized response
func (o *GetReportingTaskUnauthorized) Code() int {
	return 401
}

func (o *GetReportingTaskUnauthorized) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskUnauthorized ", 401)
}

func (o *GetReportingTaskUnauthorized) String() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskUnauthorized ", 401)
}

func (o *GetReportingTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskForbidden creates a GetReportingTaskForbidden with default headers values
func NewGetReportingTaskForbidden() *GetReportingTaskForbidden {
	return &GetReportingTaskForbidden{}
}

/*
GetReportingTaskForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetReportingTaskForbidden struct {
}

// IsSuccess returns true when this get reporting task forbidden response has a 2xx status code
func (o *GetReportingTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting task forbidden response has a 3xx status code
func (o *GetReportingTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting task forbidden response has a 4xx status code
func (o *GetReportingTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting task forbidden response has a 5xx status code
func (o *GetReportingTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting task forbidden response a status code equal to that given
func (o *GetReportingTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get reporting task forbidden response
func (o *GetReportingTaskForbidden) Code() int {
	return 403
}

func (o *GetReportingTaskForbidden) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskForbidden ", 403)
}

func (o *GetReportingTaskForbidden) String() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskForbidden ", 403)
}

func (o *GetReportingTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskNotFound creates a GetReportingTaskNotFound with default headers values
func NewGetReportingTaskNotFound() *GetReportingTaskNotFound {
	return &GetReportingTaskNotFound{}
}

/*
GetReportingTaskNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetReportingTaskNotFound struct {
}

// IsSuccess returns true when this get reporting task not found response has a 2xx status code
func (o *GetReportingTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting task not found response has a 3xx status code
func (o *GetReportingTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting task not found response has a 4xx status code
func (o *GetReportingTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting task not found response has a 5xx status code
func (o *GetReportingTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting task not found response a status code equal to that given
func (o *GetReportingTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get reporting task not found response
func (o *GetReportingTaskNotFound) Code() int {
	return 404
}

func (o *GetReportingTaskNotFound) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskNotFound ", 404)
}

func (o *GetReportingTaskNotFound) String() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskNotFound ", 404)
}

func (o *GetReportingTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskConflict creates a GetReportingTaskConflict with default headers values
func NewGetReportingTaskConflict() *GetReportingTaskConflict {
	return &GetReportingTaskConflict{}
}

/*
GetReportingTaskConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetReportingTaskConflict struct {
}

// IsSuccess returns true when this get reporting task conflict response has a 2xx status code
func (o *GetReportingTaskConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting task conflict response has a 3xx status code
func (o *GetReportingTaskConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting task conflict response has a 4xx status code
func (o *GetReportingTaskConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting task conflict response has a 5xx status code
func (o *GetReportingTaskConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting task conflict response a status code equal to that given
func (o *GetReportingTaskConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get reporting task conflict response
func (o *GetReportingTaskConflict) Code() int {
	return 409
}

func (o *GetReportingTaskConflict) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskConflict ", 409)
}

func (o *GetReportingTaskConflict) String() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskConflict ", 409)
}

func (o *GetReportingTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

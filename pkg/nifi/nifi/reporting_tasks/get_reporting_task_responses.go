// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetReportingTaskReader is a Reader for the GetReportingTask structure.
type GetReportingTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportingTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportingTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportingTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReportingTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportingTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportingTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetReportingTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetReportingTaskOK creates a GetReportingTaskOK with default headers values
func NewGetReportingTaskOK() *GetReportingTaskOK {
	return &GetReportingTaskOK{}
}

/* GetReportingTaskOK describes a response with status code 200, with default header values.

successful operation
*/
type GetReportingTaskOK struct {
	Payload *models.ReportingTaskEntity
}

func (o *GetReportingTaskOK) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskOK  %+v", 200, o.Payload)
}
func (o *GetReportingTaskOK) GetPayload() *models.ReportingTaskEntity {
	return o.Payload
}

func (o *GetReportingTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTaskEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportingTaskBadRequest creates a GetReportingTaskBadRequest with default headers values
func NewGetReportingTaskBadRequest() *GetReportingTaskBadRequest {
	return &GetReportingTaskBadRequest{}
}

/* GetReportingTaskBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetReportingTaskBadRequest struct {
}

func (o *GetReportingTaskBadRequest) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskBadRequest ", 400)
}

func (o *GetReportingTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskUnauthorized creates a GetReportingTaskUnauthorized with default headers values
func NewGetReportingTaskUnauthorized() *GetReportingTaskUnauthorized {
	return &GetReportingTaskUnauthorized{}
}

/* GetReportingTaskUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetReportingTaskUnauthorized struct {
}

func (o *GetReportingTaskUnauthorized) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskUnauthorized ", 401)
}

func (o *GetReportingTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskForbidden creates a GetReportingTaskForbidden with default headers values
func NewGetReportingTaskForbidden() *GetReportingTaskForbidden {
	return &GetReportingTaskForbidden{}
}

/* GetReportingTaskForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetReportingTaskForbidden struct {
}

func (o *GetReportingTaskForbidden) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskForbidden ", 403)
}

func (o *GetReportingTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskNotFound creates a GetReportingTaskNotFound with default headers values
func NewGetReportingTaskNotFound() *GetReportingTaskNotFound {
	return &GetReportingTaskNotFound{}
}

/* GetReportingTaskNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetReportingTaskNotFound struct {
}

func (o *GetReportingTaskNotFound) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskNotFound ", 404)
}

func (o *GetReportingTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTaskConflict creates a GetReportingTaskConflict with default headers values
func NewGetReportingTaskConflict() *GetReportingTaskConflict {
	return &GetReportingTaskConflict{}
}

/* GetReportingTaskConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetReportingTaskConflict struct {
}

func (o *GetReportingTaskConflict) Error() string {
	return fmt.Sprintf("[GET /reporting-tasks/{id}][%d] getReportingTaskConflict ", 409)
}

func (o *GetReportingTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// DeleteVerificationRequestReader is a Reader for the DeleteVerificationRequest structure.
type DeleteVerificationRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVerificationRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVerificationRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVerificationRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteVerificationRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVerificationRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVerificationRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteVerificationRequestConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}] deleteVerificationRequest", response, response.Code())
	}
}

// NewDeleteVerificationRequestOK creates a DeleteVerificationRequestOK with default headers values
func NewDeleteVerificationRequestOK() *DeleteVerificationRequestOK {
	return &DeleteVerificationRequestOK{}
}

/*
DeleteVerificationRequestOK describes a response with status code 200, with default header values.

successful operation
*/
type DeleteVerificationRequestOK struct {
	Payload *models.VerifyConfigRequestEntity
}

// IsSuccess returns true when this delete verification request o k response has a 2xx status code
func (o *DeleteVerificationRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete verification request o k response has a 3xx status code
func (o *DeleteVerificationRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete verification request o k response has a 4xx status code
func (o *DeleteVerificationRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete verification request o k response has a 5xx status code
func (o *DeleteVerificationRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete verification request o k response a status code equal to that given
func (o *DeleteVerificationRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete verification request o k response
func (o *DeleteVerificationRequestOK) Code() int {
	return 200
}

func (o *DeleteVerificationRequestOK) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestOK  %+v", 200, o.Payload)
}

func (o *DeleteVerificationRequestOK) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestOK  %+v", 200, o.Payload)
}

func (o *DeleteVerificationRequestOK) GetPayload() *models.VerifyConfigRequestEntity {
	return o.Payload
}

func (o *DeleteVerificationRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VerifyConfigRequestEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVerificationRequestBadRequest creates a DeleteVerificationRequestBadRequest with default headers values
func NewDeleteVerificationRequestBadRequest() *DeleteVerificationRequestBadRequest {
	return &DeleteVerificationRequestBadRequest{}
}

/*
DeleteVerificationRequestBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type DeleteVerificationRequestBadRequest struct {
}

// IsSuccess returns true when this delete verification request bad request response has a 2xx status code
func (o *DeleteVerificationRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete verification request bad request response has a 3xx status code
func (o *DeleteVerificationRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete verification request bad request response has a 4xx status code
func (o *DeleteVerificationRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete verification request bad request response has a 5xx status code
func (o *DeleteVerificationRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete verification request bad request response a status code equal to that given
func (o *DeleteVerificationRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete verification request bad request response
func (o *DeleteVerificationRequestBadRequest) Code() int {
	return 400
}

func (o *DeleteVerificationRequestBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestBadRequest ", 400)
}

func (o *DeleteVerificationRequestBadRequest) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestBadRequest ", 400)
}

func (o *DeleteVerificationRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVerificationRequestUnauthorized creates a DeleteVerificationRequestUnauthorized with default headers values
func NewDeleteVerificationRequestUnauthorized() *DeleteVerificationRequestUnauthorized {
	return &DeleteVerificationRequestUnauthorized{}
}

/*
DeleteVerificationRequestUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type DeleteVerificationRequestUnauthorized struct {
}

// IsSuccess returns true when this delete verification request unauthorized response has a 2xx status code
func (o *DeleteVerificationRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete verification request unauthorized response has a 3xx status code
func (o *DeleteVerificationRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete verification request unauthorized response has a 4xx status code
func (o *DeleteVerificationRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete verification request unauthorized response has a 5xx status code
func (o *DeleteVerificationRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete verification request unauthorized response a status code equal to that given
func (o *DeleteVerificationRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete verification request unauthorized response
func (o *DeleteVerificationRequestUnauthorized) Code() int {
	return 401
}

func (o *DeleteVerificationRequestUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestUnauthorized ", 401)
}

func (o *DeleteVerificationRequestUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestUnauthorized ", 401)
}

func (o *DeleteVerificationRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVerificationRequestForbidden creates a DeleteVerificationRequestForbidden with default headers values
func NewDeleteVerificationRequestForbidden() *DeleteVerificationRequestForbidden {
	return &DeleteVerificationRequestForbidden{}
}

/*
DeleteVerificationRequestForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type DeleteVerificationRequestForbidden struct {
}

// IsSuccess returns true when this delete verification request forbidden response has a 2xx status code
func (o *DeleteVerificationRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete verification request forbidden response has a 3xx status code
func (o *DeleteVerificationRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete verification request forbidden response has a 4xx status code
func (o *DeleteVerificationRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete verification request forbidden response has a 5xx status code
func (o *DeleteVerificationRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete verification request forbidden response a status code equal to that given
func (o *DeleteVerificationRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete verification request forbidden response
func (o *DeleteVerificationRequestForbidden) Code() int {
	return 403
}

func (o *DeleteVerificationRequestForbidden) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestForbidden ", 403)
}

func (o *DeleteVerificationRequestForbidden) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestForbidden ", 403)
}

func (o *DeleteVerificationRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVerificationRequestNotFound creates a DeleteVerificationRequestNotFound with default headers values
func NewDeleteVerificationRequestNotFound() *DeleteVerificationRequestNotFound {
	return &DeleteVerificationRequestNotFound{}
}

/*
DeleteVerificationRequestNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type DeleteVerificationRequestNotFound struct {
}

// IsSuccess returns true when this delete verification request not found response has a 2xx status code
func (o *DeleteVerificationRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete verification request not found response has a 3xx status code
func (o *DeleteVerificationRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete verification request not found response has a 4xx status code
func (o *DeleteVerificationRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete verification request not found response has a 5xx status code
func (o *DeleteVerificationRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete verification request not found response a status code equal to that given
func (o *DeleteVerificationRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete verification request not found response
func (o *DeleteVerificationRequestNotFound) Code() int {
	return 404
}

func (o *DeleteVerificationRequestNotFound) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestNotFound ", 404)
}

func (o *DeleteVerificationRequestNotFound) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestNotFound ", 404)
}

func (o *DeleteVerificationRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVerificationRequestConflict creates a DeleteVerificationRequestConflict with default headers values
func NewDeleteVerificationRequestConflict() *DeleteVerificationRequestConflict {
	return &DeleteVerificationRequestConflict{}
}

/*
DeleteVerificationRequestConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type DeleteVerificationRequestConflict struct {
}

// IsSuccess returns true when this delete verification request conflict response has a 2xx status code
func (o *DeleteVerificationRequestConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete verification request conflict response has a 3xx status code
func (o *DeleteVerificationRequestConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete verification request conflict response has a 4xx status code
func (o *DeleteVerificationRequestConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete verification request conflict response has a 5xx status code
func (o *DeleteVerificationRequestConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete verification request conflict response a status code equal to that given
func (o *DeleteVerificationRequestConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete verification request conflict response
func (o *DeleteVerificationRequestConflict) Code() int {
	return 409
}

func (o *DeleteVerificationRequestConflict) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestConflict ", 409)
}

func (o *DeleteVerificationRequestConflict) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}/config/verification-requests/{requestId}][%d] deleteVerificationRequestConflict ", 409)
}

func (o *DeleteVerificationRequestConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

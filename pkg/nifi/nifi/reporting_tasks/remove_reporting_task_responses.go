// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// RemoveReportingTaskReader is a Reader for the RemoveReportingTask structure.
type RemoveReportingTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveReportingTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveReportingTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveReportingTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveReportingTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveReportingTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveReportingTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveReportingTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveReportingTaskOK creates a RemoveReportingTaskOK with default headers values
func NewRemoveReportingTaskOK() *RemoveReportingTaskOK {
	return &RemoveReportingTaskOK{}
}

/*
RemoveReportingTaskOK describes a response with status code 200, with default header values.

successful operation
*/
type RemoveReportingTaskOK struct {
	Payload *models.ReportingTaskEntity
}

// IsSuccess returns true when this remove reporting task o k response has a 2xx status code
func (o *RemoveReportingTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove reporting task o k response has a 3xx status code
func (o *RemoveReportingTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove reporting task o k response has a 4xx status code
func (o *RemoveReportingTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove reporting task o k response has a 5xx status code
func (o *RemoveReportingTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove reporting task o k response a status code equal to that given
func (o *RemoveReportingTaskOK) IsCode(code int) bool {
	return code == 200
}

func (o *RemoveReportingTaskOK) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskOK  %+v", 200, o.Payload)
}

func (o *RemoveReportingTaskOK) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskOK  %+v", 200, o.Payload)
}

func (o *RemoveReportingTaskOK) GetPayload() *models.ReportingTaskEntity {
	return o.Payload
}

func (o *RemoveReportingTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTaskEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveReportingTaskBadRequest creates a RemoveReportingTaskBadRequest with default headers values
func NewRemoveReportingTaskBadRequest() *RemoveReportingTaskBadRequest {
	return &RemoveReportingTaskBadRequest{}
}

/*
RemoveReportingTaskBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type RemoveReportingTaskBadRequest struct {
}

// IsSuccess returns true when this remove reporting task bad request response has a 2xx status code
func (o *RemoveReportingTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove reporting task bad request response has a 3xx status code
func (o *RemoveReportingTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove reporting task bad request response has a 4xx status code
func (o *RemoveReportingTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove reporting task bad request response has a 5xx status code
func (o *RemoveReportingTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove reporting task bad request response a status code equal to that given
func (o *RemoveReportingTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RemoveReportingTaskBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskBadRequest ", 400)
}

func (o *RemoveReportingTaskBadRequest) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskBadRequest ", 400)
}

func (o *RemoveReportingTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveReportingTaskUnauthorized creates a RemoveReportingTaskUnauthorized with default headers values
func NewRemoveReportingTaskUnauthorized() *RemoveReportingTaskUnauthorized {
	return &RemoveReportingTaskUnauthorized{}
}

/*
RemoveReportingTaskUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type RemoveReportingTaskUnauthorized struct {
}

// IsSuccess returns true when this remove reporting task unauthorized response has a 2xx status code
func (o *RemoveReportingTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove reporting task unauthorized response has a 3xx status code
func (o *RemoveReportingTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove reporting task unauthorized response has a 4xx status code
func (o *RemoveReportingTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove reporting task unauthorized response has a 5xx status code
func (o *RemoveReportingTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remove reporting task unauthorized response a status code equal to that given
func (o *RemoveReportingTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RemoveReportingTaskUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskUnauthorized ", 401)
}

func (o *RemoveReportingTaskUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskUnauthorized ", 401)
}

func (o *RemoveReportingTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveReportingTaskForbidden creates a RemoveReportingTaskForbidden with default headers values
func NewRemoveReportingTaskForbidden() *RemoveReportingTaskForbidden {
	return &RemoveReportingTaskForbidden{}
}

/*
RemoveReportingTaskForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type RemoveReportingTaskForbidden struct {
}

// IsSuccess returns true when this remove reporting task forbidden response has a 2xx status code
func (o *RemoveReportingTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove reporting task forbidden response has a 3xx status code
func (o *RemoveReportingTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove reporting task forbidden response has a 4xx status code
func (o *RemoveReportingTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove reporting task forbidden response has a 5xx status code
func (o *RemoveReportingTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove reporting task forbidden response a status code equal to that given
func (o *RemoveReportingTaskForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RemoveReportingTaskForbidden) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskForbidden ", 403)
}

func (o *RemoveReportingTaskForbidden) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskForbidden ", 403)
}

func (o *RemoveReportingTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveReportingTaskNotFound creates a RemoveReportingTaskNotFound with default headers values
func NewRemoveReportingTaskNotFound() *RemoveReportingTaskNotFound {
	return &RemoveReportingTaskNotFound{}
}

/*
RemoveReportingTaskNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type RemoveReportingTaskNotFound struct {
}

// IsSuccess returns true when this remove reporting task not found response has a 2xx status code
func (o *RemoveReportingTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove reporting task not found response has a 3xx status code
func (o *RemoveReportingTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove reporting task not found response has a 4xx status code
func (o *RemoveReportingTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove reporting task not found response has a 5xx status code
func (o *RemoveReportingTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove reporting task not found response a status code equal to that given
func (o *RemoveReportingTaskNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RemoveReportingTaskNotFound) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskNotFound ", 404)
}

func (o *RemoveReportingTaskNotFound) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskNotFound ", 404)
}

func (o *RemoveReportingTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveReportingTaskConflict creates a RemoveReportingTaskConflict with default headers values
func NewRemoveReportingTaskConflict() *RemoveReportingTaskConflict {
	return &RemoveReportingTaskConflict{}
}

/*
RemoveReportingTaskConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type RemoveReportingTaskConflict struct {
}

// IsSuccess returns true when this remove reporting task conflict response has a 2xx status code
func (o *RemoveReportingTaskConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove reporting task conflict response has a 3xx status code
func (o *RemoveReportingTaskConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove reporting task conflict response has a 4xx status code
func (o *RemoveReportingTaskConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove reporting task conflict response has a 5xx status code
func (o *RemoveReportingTaskConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this remove reporting task conflict response a status code equal to that given
func (o *RemoveReportingTaskConflict) IsCode(code int) bool {
	return code == 409
}

func (o *RemoveReportingTaskConflict) Error() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskConflict ", 409)
}

func (o *RemoveReportingTaskConflict) String() string {
	return fmt.Sprintf("[DELETE /reporting-tasks/{id}][%d] removeReportingTaskConflict ", 409)
}

func (o *RemoveReportingTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

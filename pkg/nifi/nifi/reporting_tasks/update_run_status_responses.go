// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateRunStatusReader is a Reader for the UpdateRunStatus structure.
type UpdateRunStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRunStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRunStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRunStatusOK creates a UpdateRunStatusOK with default headers values
func NewUpdateRunStatusOK() *UpdateRunStatusOK {
	return &UpdateRunStatusOK{}
}

/*
UpdateRunStatusOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateRunStatusOK struct {
	Payload *models.ReportingTaskEntity
}

// IsSuccess returns true when this update run status o k response has a 2xx status code
func (o *UpdateRunStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update run status o k response has a 3xx status code
func (o *UpdateRunStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update run status o k response has a 4xx status code
func (o *UpdateRunStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update run status o k response has a 5xx status code
func (o *UpdateRunStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update run status o k response a status code equal to that given
func (o *UpdateRunStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateRunStatusOK) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateRunStatusOK) String() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateRunStatusOK) GetPayload() *models.ReportingTaskEntity {
	return o.Payload
}

func (o *UpdateRunStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTaskEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunStatusBadRequest creates a UpdateRunStatusBadRequest with default headers values
func NewUpdateRunStatusBadRequest() *UpdateRunStatusBadRequest {
	return &UpdateRunStatusBadRequest{}
}

/*
UpdateRunStatusBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateRunStatusBadRequest struct {
}

// IsSuccess returns true when this update run status bad request response has a 2xx status code
func (o *UpdateRunStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update run status bad request response has a 3xx status code
func (o *UpdateRunStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update run status bad request response has a 4xx status code
func (o *UpdateRunStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update run status bad request response has a 5xx status code
func (o *UpdateRunStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update run status bad request response a status code equal to that given
func (o *UpdateRunStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateRunStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusBadRequest ", 400)
}

func (o *UpdateRunStatusBadRequest) String() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusBadRequest ", 400)
}

func (o *UpdateRunStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusUnauthorized creates a UpdateRunStatusUnauthorized with default headers values
func NewUpdateRunStatusUnauthorized() *UpdateRunStatusUnauthorized {
	return &UpdateRunStatusUnauthorized{}
}

/*
UpdateRunStatusUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateRunStatusUnauthorized struct {
}

// IsSuccess returns true when this update run status unauthorized response has a 2xx status code
func (o *UpdateRunStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update run status unauthorized response has a 3xx status code
func (o *UpdateRunStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update run status unauthorized response has a 4xx status code
func (o *UpdateRunStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update run status unauthorized response has a 5xx status code
func (o *UpdateRunStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update run status unauthorized response a status code equal to that given
func (o *UpdateRunStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateRunStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusUnauthorized ", 401)
}

func (o *UpdateRunStatusUnauthorized) String() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusUnauthorized ", 401)
}

func (o *UpdateRunStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusForbidden creates a UpdateRunStatusForbidden with default headers values
func NewUpdateRunStatusForbidden() *UpdateRunStatusForbidden {
	return &UpdateRunStatusForbidden{}
}

/*
UpdateRunStatusForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateRunStatusForbidden struct {
}

// IsSuccess returns true when this update run status forbidden response has a 2xx status code
func (o *UpdateRunStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update run status forbidden response has a 3xx status code
func (o *UpdateRunStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update run status forbidden response has a 4xx status code
func (o *UpdateRunStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update run status forbidden response has a 5xx status code
func (o *UpdateRunStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update run status forbidden response a status code equal to that given
func (o *UpdateRunStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateRunStatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusForbidden ", 403)
}

func (o *UpdateRunStatusForbidden) String() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusForbidden ", 403)
}

func (o *UpdateRunStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusNotFound creates a UpdateRunStatusNotFound with default headers values
func NewUpdateRunStatusNotFound() *UpdateRunStatusNotFound {
	return &UpdateRunStatusNotFound{}
}

/*
UpdateRunStatusNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateRunStatusNotFound struct {
}

// IsSuccess returns true when this update run status not found response has a 2xx status code
func (o *UpdateRunStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update run status not found response has a 3xx status code
func (o *UpdateRunStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update run status not found response has a 4xx status code
func (o *UpdateRunStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update run status not found response has a 5xx status code
func (o *UpdateRunStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update run status not found response a status code equal to that given
func (o *UpdateRunStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateRunStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusNotFound ", 404)
}

func (o *UpdateRunStatusNotFound) String() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusNotFound ", 404)
}

func (o *UpdateRunStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusConflict creates a UpdateRunStatusConflict with default headers values
func NewUpdateRunStatusConflict() *UpdateRunStatusConflict {
	return &UpdateRunStatusConflict{}
}

/*
UpdateRunStatusConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateRunStatusConflict struct {
}

// IsSuccess returns true when this update run status conflict response has a 2xx status code
func (o *UpdateRunStatusConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update run status conflict response has a 3xx status code
func (o *UpdateRunStatusConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update run status conflict response has a 4xx status code
func (o *UpdateRunStatusConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update run status conflict response has a 5xx status code
func (o *UpdateRunStatusConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update run status conflict response a status code equal to that given
func (o *UpdateRunStatusConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateRunStatusConflict) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusConflict ", 409)
}

func (o *UpdateRunStatusConflict) String() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] updateRunStatusConflict ", 409)
}

func (o *UpdateRunStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

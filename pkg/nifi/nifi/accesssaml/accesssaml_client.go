// Code generated by go-swagger; DO NOT EDIT.

package accesssaml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accesssaml API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accesssaml API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SamlLocalLogout(params *SamlLocalLogoutParams, opts ...ClientOption) error

	SamlLoginExchange(params *SamlLoginExchangeParams, opts ...ClientOption) (*SamlLoginExchangeOK, error)

	SamlLoginHTTPPostConsumer(params *SamlLoginHTTPPostConsumerParams, opts ...ClientOption) error

	SamlLoginHTTPRedirectConsumer(params *SamlLoginHTTPRedirectConsumerParams, opts ...ClientOption) error

	SamlLoginRequest(params *SamlLoginRequestParams, opts ...ClientOption) error

	SamlMetadata(params *SamlMetadataParams, opts ...ClientOption) error

	SamlSingleLogoutHTTPPostConsumer(params *SamlSingleLogoutHTTPPostConsumerParams, opts ...ClientOption) error

	SamlSingleLogoutHTTPRedirectConsumer(params *SamlSingleLogoutHTTPRedirectConsumerParams, opts ...ClientOption) error

	SamlSingleLogoutRequest(params *SamlSingleLogoutRequestParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  SamlLocalLogout locals logout when s a m l is enabled does not communicate with the ID p

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlLocalLogout(params *SamlLocalLogoutParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlLocalLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlLocalLogout",
		Method:             "GET",
		PathPattern:        "/access/saml/local-logout",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlLocalLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlLoginExchange retrieves a j w t following a successful login sequence using the configured s a m l identity provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlLoginExchange(params *SamlLoginExchangeParams, opts ...ClientOption) (*SamlLoginExchangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlLoginExchangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlLoginExchange",
		Method:             "POST",
		PathPattern:        "/access/saml/login/exchange",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlLoginExchangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SamlLoginExchangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for samlLoginExchange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SamlLoginHTTPPostConsumer processes the s s o response from the s a m l identity provider for HTTP p o s t binding

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlLoginHTTPPostConsumer(params *SamlLoginHTTPPostConsumerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlLoginHTTPPostConsumerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlLoginHttpPostConsumer",
		Method:             "POST",
		PathPattern:        "/access/saml/login/consumer",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlLoginHTTPPostConsumerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlLoginHTTPRedirectConsumer processes the s s o response from the s a m l identity provider for HTTP r e d i r e c t binding

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlLoginHTTPRedirectConsumer(params *SamlLoginHTTPRedirectConsumerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlLoginHTTPRedirectConsumerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlLoginHttpRedirectConsumer",
		Method:             "GET",
		PathPattern:        "/access/saml/login/consumer",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlLoginHTTPRedirectConsumerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlLoginRequest initiates an s s o request to the configured s a m l identity provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlLoginRequest(params *SamlLoginRequestParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlLoginRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlLoginRequest",
		Method:             "GET",
		PathPattern:        "/access/saml/login/request",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlLoginRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlMetadata retrieves the service provider metadata

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlMetadata(params *SamlMetadataParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlMetadata",
		Method:             "GET",
		PathPattern:        "/access/saml/metadata",
		ProducesMediaTypes: []string{"application/samlmetadata+xml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlSingleLogoutHTTPPostConsumer processes a single logout message from the configured s a m l identity provider using the HTTP p o s t binding

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlSingleLogoutHTTPPostConsumer(params *SamlSingleLogoutHTTPPostConsumerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlSingleLogoutHTTPPostConsumerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlSingleLogoutHttpPostConsumer",
		Method:             "POST",
		PathPattern:        "/access/saml/single-logout/consumer",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlSingleLogoutHTTPPostConsumerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlSingleLogoutHTTPRedirectConsumer processes a single logout message from the configured s a m l identity provider using the HTTP r e d i r e c t binding

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlSingleLogoutHTTPRedirectConsumer(params *SamlSingleLogoutHTTPRedirectConsumerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlSingleLogoutHTTPRedirectConsumerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlSingleLogoutHttpRedirectConsumer",
		Method:             "GET",
		PathPattern:        "/access/saml/single-logout/consumer",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlSingleLogoutHTTPRedirectConsumerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SamlSingleLogoutRequest initiates a logout request using the single logout service of the configured s a m l identity provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SamlSingleLogoutRequest(params *SamlSingleLogoutRequestParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSamlSingleLogoutRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "samlSingleLogoutRequest",
		Method:             "GET",
		PathPattern:        "/access/saml/single-logout/request",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SamlSingleLogoutRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

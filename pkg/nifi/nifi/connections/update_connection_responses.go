// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateConnectionReader is a Reader for the UpdateConnection structure.
type UpdateConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateConnectionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /connections/{id}] updateConnection", response, response.Code())
	}
}

// NewUpdateConnectionOK creates a UpdateConnectionOK with default headers values
func NewUpdateConnectionOK() *UpdateConnectionOK {
	return &UpdateConnectionOK{}
}

/*
UpdateConnectionOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateConnectionOK struct {
	Payload *models.ConnectionEntity
}

// IsSuccess returns true when this update connection o k response has a 2xx status code
func (o *UpdateConnectionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update connection o k response has a 3xx status code
func (o *UpdateConnectionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection o k response has a 4xx status code
func (o *UpdateConnectionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update connection o k response has a 5xx status code
func (o *UpdateConnectionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection o k response a status code equal to that given
func (o *UpdateConnectionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update connection o k response
func (o *UpdateConnectionOK) Code() int {
	return 200
}

func (o *UpdateConnectionOK) Error() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionOK  %+v", 200, o.Payload)
}

func (o *UpdateConnectionOK) String() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionOK  %+v", 200, o.Payload)
}

func (o *UpdateConnectionOK) GetPayload() *models.ConnectionEntity {
	return o.Payload
}

func (o *UpdateConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionBadRequest creates a UpdateConnectionBadRequest with default headers values
func NewUpdateConnectionBadRequest() *UpdateConnectionBadRequest {
	return &UpdateConnectionBadRequest{}
}

/*
UpdateConnectionBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateConnectionBadRequest struct {
}

// IsSuccess returns true when this update connection bad request response has a 2xx status code
func (o *UpdateConnectionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection bad request response has a 3xx status code
func (o *UpdateConnectionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection bad request response has a 4xx status code
func (o *UpdateConnectionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection bad request response has a 5xx status code
func (o *UpdateConnectionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection bad request response a status code equal to that given
func (o *UpdateConnectionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update connection bad request response
func (o *UpdateConnectionBadRequest) Code() int {
	return 400
}

func (o *UpdateConnectionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionBadRequest ", 400)
}

func (o *UpdateConnectionBadRequest) String() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionBadRequest ", 400)
}

func (o *UpdateConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConnectionUnauthorized creates a UpdateConnectionUnauthorized with default headers values
func NewUpdateConnectionUnauthorized() *UpdateConnectionUnauthorized {
	return &UpdateConnectionUnauthorized{}
}

/*
UpdateConnectionUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateConnectionUnauthorized struct {
}

// IsSuccess returns true when this update connection unauthorized response has a 2xx status code
func (o *UpdateConnectionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection unauthorized response has a 3xx status code
func (o *UpdateConnectionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection unauthorized response has a 4xx status code
func (o *UpdateConnectionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection unauthorized response has a 5xx status code
func (o *UpdateConnectionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection unauthorized response a status code equal to that given
func (o *UpdateConnectionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update connection unauthorized response
func (o *UpdateConnectionUnauthorized) Code() int {
	return 401
}

func (o *UpdateConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionUnauthorized ", 401)
}

func (o *UpdateConnectionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionUnauthorized ", 401)
}

func (o *UpdateConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConnectionForbidden creates a UpdateConnectionForbidden with default headers values
func NewUpdateConnectionForbidden() *UpdateConnectionForbidden {
	return &UpdateConnectionForbidden{}
}

/*
UpdateConnectionForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateConnectionForbidden struct {
}

// IsSuccess returns true when this update connection forbidden response has a 2xx status code
func (o *UpdateConnectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection forbidden response has a 3xx status code
func (o *UpdateConnectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection forbidden response has a 4xx status code
func (o *UpdateConnectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection forbidden response has a 5xx status code
func (o *UpdateConnectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection forbidden response a status code equal to that given
func (o *UpdateConnectionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update connection forbidden response
func (o *UpdateConnectionForbidden) Code() int {
	return 403
}

func (o *UpdateConnectionForbidden) Error() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionForbidden ", 403)
}

func (o *UpdateConnectionForbidden) String() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionForbidden ", 403)
}

func (o *UpdateConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConnectionNotFound creates a UpdateConnectionNotFound with default headers values
func NewUpdateConnectionNotFound() *UpdateConnectionNotFound {
	return &UpdateConnectionNotFound{}
}

/*
UpdateConnectionNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateConnectionNotFound struct {
}

// IsSuccess returns true when this update connection not found response has a 2xx status code
func (o *UpdateConnectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection not found response has a 3xx status code
func (o *UpdateConnectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection not found response has a 4xx status code
func (o *UpdateConnectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection not found response has a 5xx status code
func (o *UpdateConnectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection not found response a status code equal to that given
func (o *UpdateConnectionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update connection not found response
func (o *UpdateConnectionNotFound) Code() int {
	return 404
}

func (o *UpdateConnectionNotFound) Error() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionNotFound ", 404)
}

func (o *UpdateConnectionNotFound) String() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionNotFound ", 404)
}

func (o *UpdateConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConnectionConflict creates a UpdateConnectionConflict with default headers values
func NewUpdateConnectionConflict() *UpdateConnectionConflict {
	return &UpdateConnectionConflict{}
}

/*
UpdateConnectionConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateConnectionConflict struct {
}

// IsSuccess returns true when this update connection conflict response has a 2xx status code
func (o *UpdateConnectionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection conflict response has a 3xx status code
func (o *UpdateConnectionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection conflict response has a 4xx status code
func (o *UpdateConnectionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection conflict response has a 5xx status code
func (o *UpdateConnectionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection conflict response a status code equal to that given
func (o *UpdateConnectionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update connection conflict response
func (o *UpdateConnectionConflict) Code() int {
	return 409
}

func (o *UpdateConnectionConflict) Error() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionConflict ", 409)
}

func (o *UpdateConnectionConflict) String() string {
	return fmt.Sprintf("[PUT /connections/{id}][%d] updateConnectionConflict ", 409)
}

func (o *UpdateConnectionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

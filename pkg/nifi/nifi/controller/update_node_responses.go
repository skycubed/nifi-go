// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateNodeReader is a Reader for the UpdateNode structure.
type UpdateNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateNodeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNodeOK creates a UpdateNodeOK with default headers values
func NewUpdateNodeOK() *UpdateNodeOK {
	return &UpdateNodeOK{}
}

/* UpdateNodeOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateNodeOK struct {
	Payload *models.NodeEntity
}

func (o *UpdateNodeOK) Error() string {
	return fmt.Sprintf("[PUT /controller/cluster/nodes/{id}][%d] updateNodeOK  %+v", 200, o.Payload)
}
func (o *UpdateNodeOK) GetPayload() *models.NodeEntity {
	return o.Payload
}

func (o *UpdateNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NodeEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNodeBadRequest creates a UpdateNodeBadRequest with default headers values
func NewUpdateNodeBadRequest() *UpdateNodeBadRequest {
	return &UpdateNodeBadRequest{}
}

/* UpdateNodeBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateNodeBadRequest struct {
}

func (o *UpdateNodeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /controller/cluster/nodes/{id}][%d] updateNodeBadRequest ", 400)
}

func (o *UpdateNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeUnauthorized creates a UpdateNodeUnauthorized with default headers values
func NewUpdateNodeUnauthorized() *UpdateNodeUnauthorized {
	return &UpdateNodeUnauthorized{}
}

/* UpdateNodeUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateNodeUnauthorized struct {
}

func (o *UpdateNodeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /controller/cluster/nodes/{id}][%d] updateNodeUnauthorized ", 401)
}

func (o *UpdateNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeForbidden creates a UpdateNodeForbidden with default headers values
func NewUpdateNodeForbidden() *UpdateNodeForbidden {
	return &UpdateNodeForbidden{}
}

/* UpdateNodeForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateNodeForbidden struct {
}

func (o *UpdateNodeForbidden) Error() string {
	return fmt.Sprintf("[PUT /controller/cluster/nodes/{id}][%d] updateNodeForbidden ", 403)
}

func (o *UpdateNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeNotFound creates a UpdateNodeNotFound with default headers values
func NewUpdateNodeNotFound() *UpdateNodeNotFound {
	return &UpdateNodeNotFound{}
}

/* UpdateNodeNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateNodeNotFound struct {
}

func (o *UpdateNodeNotFound) Error() string {
	return fmt.Sprintf("[PUT /controller/cluster/nodes/{id}][%d] updateNodeNotFound ", 404)
}

func (o *UpdateNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeConflict creates a UpdateNodeConflict with default headers values
func NewUpdateNodeConflict() *UpdateNodeConflict {
	return &UpdateNodeConflict{}
}

/* UpdateNodeConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateNodeConflict struct {
}

func (o *UpdateNodeConflict) Error() string {
	return fmt.Sprintf("[PUT /controller/cluster/nodes/{id}][%d] updateNodeConflict ", 409)
}

func (o *UpdateNodeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

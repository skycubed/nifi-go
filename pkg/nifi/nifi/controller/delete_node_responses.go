// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// DeleteNodeReader is a Reader for the DeleteNode structure.
type DeleteNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteNodeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteNodeOK creates a DeleteNodeOK with default headers values
func NewDeleteNodeOK() *DeleteNodeOK {
	return &DeleteNodeOK{}
}

/*
DeleteNodeOK describes a response with status code 200, with default header values.

successful operation
*/
type DeleteNodeOK struct {
	Payload *models.NodeEntity
}

// IsSuccess returns true when this delete node o k response has a 2xx status code
func (o *DeleteNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete node o k response has a 3xx status code
func (o *DeleteNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete node o k response has a 4xx status code
func (o *DeleteNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete node o k response has a 5xx status code
func (o *DeleteNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete node o k response a status code equal to that given
func (o *DeleteNodeOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteNodeOK) Error() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeOK  %+v", 200, o.Payload)
}

func (o *DeleteNodeOK) String() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeOK  %+v", 200, o.Payload)
}

func (o *DeleteNodeOK) GetPayload() *models.NodeEntity {
	return o.Payload
}

func (o *DeleteNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NodeEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNodeBadRequest creates a DeleteNodeBadRequest with default headers values
func NewDeleteNodeBadRequest() *DeleteNodeBadRequest {
	return &DeleteNodeBadRequest{}
}

/*
DeleteNodeBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type DeleteNodeBadRequest struct {
}

// IsSuccess returns true when this delete node bad request response has a 2xx status code
func (o *DeleteNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete node bad request response has a 3xx status code
func (o *DeleteNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete node bad request response has a 4xx status code
func (o *DeleteNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete node bad request response has a 5xx status code
func (o *DeleteNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete node bad request response a status code equal to that given
func (o *DeleteNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteNodeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeBadRequest ", 400)
}

func (o *DeleteNodeBadRequest) String() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeBadRequest ", 400)
}

func (o *DeleteNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeUnauthorized creates a DeleteNodeUnauthorized with default headers values
func NewDeleteNodeUnauthorized() *DeleteNodeUnauthorized {
	return &DeleteNodeUnauthorized{}
}

/*
DeleteNodeUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type DeleteNodeUnauthorized struct {
}

// IsSuccess returns true when this delete node unauthorized response has a 2xx status code
func (o *DeleteNodeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete node unauthorized response has a 3xx status code
func (o *DeleteNodeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete node unauthorized response has a 4xx status code
func (o *DeleteNodeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete node unauthorized response has a 5xx status code
func (o *DeleteNodeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete node unauthorized response a status code equal to that given
func (o *DeleteNodeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteNodeUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeUnauthorized ", 401)
}

func (o *DeleteNodeUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeUnauthorized ", 401)
}

func (o *DeleteNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeForbidden creates a DeleteNodeForbidden with default headers values
func NewDeleteNodeForbidden() *DeleteNodeForbidden {
	return &DeleteNodeForbidden{}
}

/*
DeleteNodeForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type DeleteNodeForbidden struct {
}

// IsSuccess returns true when this delete node forbidden response has a 2xx status code
func (o *DeleteNodeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete node forbidden response has a 3xx status code
func (o *DeleteNodeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete node forbidden response has a 4xx status code
func (o *DeleteNodeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete node forbidden response has a 5xx status code
func (o *DeleteNodeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete node forbidden response a status code equal to that given
func (o *DeleteNodeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteNodeForbidden) Error() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeForbidden ", 403)
}

func (o *DeleteNodeForbidden) String() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeForbidden ", 403)
}

func (o *DeleteNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeNotFound creates a DeleteNodeNotFound with default headers values
func NewDeleteNodeNotFound() *DeleteNodeNotFound {
	return &DeleteNodeNotFound{}
}

/*
DeleteNodeNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type DeleteNodeNotFound struct {
}

// IsSuccess returns true when this delete node not found response has a 2xx status code
func (o *DeleteNodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete node not found response has a 3xx status code
func (o *DeleteNodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete node not found response has a 4xx status code
func (o *DeleteNodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete node not found response has a 5xx status code
func (o *DeleteNodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete node not found response a status code equal to that given
func (o *DeleteNodeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteNodeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeNotFound ", 404)
}

func (o *DeleteNodeNotFound) String() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeNotFound ", 404)
}

func (o *DeleteNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeConflict creates a DeleteNodeConflict with default headers values
func NewDeleteNodeConflict() *DeleteNodeConflict {
	return &DeleteNodeConflict{}
}

/*
DeleteNodeConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type DeleteNodeConflict struct {
}

// IsSuccess returns true when this delete node conflict response has a 2xx status code
func (o *DeleteNodeConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete node conflict response has a 3xx status code
func (o *DeleteNodeConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete node conflict response has a 4xx status code
func (o *DeleteNodeConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete node conflict response has a 5xx status code
func (o *DeleteNodeConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete node conflict response a status code equal to that given
func (o *DeleteNodeConflict) IsCode(code int) bool {
	return code == 409
}

func (o *DeleteNodeConflict) Error() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeConflict ", 409)
}

func (o *DeleteNodeConflict) String() string {
	return fmt.Sprintf("[DELETE /controller/cluster/nodes/{id}][%d] deleteNodeConflict ", 409)
}

func (o *DeleteNodeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// CreateReportingTaskReader is a Reader for the CreateReportingTask structure.
type CreateReportingTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateReportingTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateReportingTaskCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateReportingTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateReportingTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateReportingTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateReportingTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /controller/reporting-tasks] createReportingTask", response, response.Code())
	}
}

// NewCreateReportingTaskCreated creates a CreateReportingTaskCreated with default headers values
func NewCreateReportingTaskCreated() *CreateReportingTaskCreated {
	return &CreateReportingTaskCreated{}
}

/*
CreateReportingTaskCreated describes a response with status code 201, with default header values.

successful operation
*/
type CreateReportingTaskCreated struct {
	Payload *models.ReportingTaskEntity
}

// IsSuccess returns true when this create reporting task created response has a 2xx status code
func (o *CreateReportingTaskCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create reporting task created response has a 3xx status code
func (o *CreateReportingTaskCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create reporting task created response has a 4xx status code
func (o *CreateReportingTaskCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create reporting task created response has a 5xx status code
func (o *CreateReportingTaskCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create reporting task created response a status code equal to that given
func (o *CreateReportingTaskCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create reporting task created response
func (o *CreateReportingTaskCreated) Code() int {
	return 201
}

func (o *CreateReportingTaskCreated) Error() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskCreated  %+v", 201, o.Payload)
}

func (o *CreateReportingTaskCreated) String() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskCreated  %+v", 201, o.Payload)
}

func (o *CreateReportingTaskCreated) GetPayload() *models.ReportingTaskEntity {
	return o.Payload
}

func (o *CreateReportingTaskCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTaskEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReportingTaskBadRequest creates a CreateReportingTaskBadRequest with default headers values
func NewCreateReportingTaskBadRequest() *CreateReportingTaskBadRequest {
	return &CreateReportingTaskBadRequest{}
}

/*
CreateReportingTaskBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type CreateReportingTaskBadRequest struct {
}

// IsSuccess returns true when this create reporting task bad request response has a 2xx status code
func (o *CreateReportingTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create reporting task bad request response has a 3xx status code
func (o *CreateReportingTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create reporting task bad request response has a 4xx status code
func (o *CreateReportingTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create reporting task bad request response has a 5xx status code
func (o *CreateReportingTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create reporting task bad request response a status code equal to that given
func (o *CreateReportingTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create reporting task bad request response
func (o *CreateReportingTaskBadRequest) Code() int {
	return 400
}

func (o *CreateReportingTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskBadRequest ", 400)
}

func (o *CreateReportingTaskBadRequest) String() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskBadRequest ", 400)
}

func (o *CreateReportingTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateReportingTaskUnauthorized creates a CreateReportingTaskUnauthorized with default headers values
func NewCreateReportingTaskUnauthorized() *CreateReportingTaskUnauthorized {
	return &CreateReportingTaskUnauthorized{}
}

/*
CreateReportingTaskUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type CreateReportingTaskUnauthorized struct {
}

// IsSuccess returns true when this create reporting task unauthorized response has a 2xx status code
func (o *CreateReportingTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create reporting task unauthorized response has a 3xx status code
func (o *CreateReportingTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create reporting task unauthorized response has a 4xx status code
func (o *CreateReportingTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create reporting task unauthorized response has a 5xx status code
func (o *CreateReportingTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create reporting task unauthorized response a status code equal to that given
func (o *CreateReportingTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create reporting task unauthorized response
func (o *CreateReportingTaskUnauthorized) Code() int {
	return 401
}

func (o *CreateReportingTaskUnauthorized) Error() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskUnauthorized ", 401)
}

func (o *CreateReportingTaskUnauthorized) String() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskUnauthorized ", 401)
}

func (o *CreateReportingTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateReportingTaskForbidden creates a CreateReportingTaskForbidden with default headers values
func NewCreateReportingTaskForbidden() *CreateReportingTaskForbidden {
	return &CreateReportingTaskForbidden{}
}

/*
CreateReportingTaskForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type CreateReportingTaskForbidden struct {
}

// IsSuccess returns true when this create reporting task forbidden response has a 2xx status code
func (o *CreateReportingTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create reporting task forbidden response has a 3xx status code
func (o *CreateReportingTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create reporting task forbidden response has a 4xx status code
func (o *CreateReportingTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create reporting task forbidden response has a 5xx status code
func (o *CreateReportingTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create reporting task forbidden response a status code equal to that given
func (o *CreateReportingTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create reporting task forbidden response
func (o *CreateReportingTaskForbidden) Code() int {
	return 403
}

func (o *CreateReportingTaskForbidden) Error() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskForbidden ", 403)
}

func (o *CreateReportingTaskForbidden) String() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskForbidden ", 403)
}

func (o *CreateReportingTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateReportingTaskConflict creates a CreateReportingTaskConflict with default headers values
func NewCreateReportingTaskConflict() *CreateReportingTaskConflict {
	return &CreateReportingTaskConflict{}
}

/*
CreateReportingTaskConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type CreateReportingTaskConflict struct {
}

// IsSuccess returns true when this create reporting task conflict response has a 2xx status code
func (o *CreateReportingTaskConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create reporting task conflict response has a 3xx status code
func (o *CreateReportingTaskConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create reporting task conflict response has a 4xx status code
func (o *CreateReportingTaskConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create reporting task conflict response has a 5xx status code
func (o *CreateReportingTaskConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create reporting task conflict response a status code equal to that given
func (o *CreateReportingTaskConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create reporting task conflict response
func (o *CreateReportingTaskConflict) Code() int {
	return 409
}

func (o *CreateReportingTaskConflict) Error() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskConflict ", 409)
}

func (o *CreateReportingTaskConflict) String() string {
	return fmt.Sprintf("[POST /controller/reporting-tasks][%d] createReportingTaskConflict ", 409)
}

func (o *CreateReportingTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

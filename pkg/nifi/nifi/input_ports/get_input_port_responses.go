// Code generated by go-swagger; DO NOT EDIT.

package input_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetInputPortReader is a Reader for the GetInputPort structure.
type GetInputPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInputPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInputPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInputPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInputPortUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInputPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInputPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetInputPortConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /input-ports/{id}] getInputPort", response, response.Code())
	}
}

// NewGetInputPortOK creates a GetInputPortOK with default headers values
func NewGetInputPortOK() *GetInputPortOK {
	return &GetInputPortOK{}
}

/*
GetInputPortOK describes a response with status code 200, with default header values.

successful operation
*/
type GetInputPortOK struct {
	Payload *models.PortEntity
}

// IsSuccess returns true when this get input port o k response has a 2xx status code
func (o *GetInputPortOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get input port o k response has a 3xx status code
func (o *GetInputPortOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get input port o k response has a 4xx status code
func (o *GetInputPortOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get input port o k response has a 5xx status code
func (o *GetInputPortOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get input port o k response a status code equal to that given
func (o *GetInputPortOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get input port o k response
func (o *GetInputPortOK) Code() int {
	return 200
}

func (o *GetInputPortOK) Error() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortOK  %+v", 200, o.Payload)
}

func (o *GetInputPortOK) String() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortOK  %+v", 200, o.Payload)
}

func (o *GetInputPortOK) GetPayload() *models.PortEntity {
	return o.Payload
}

func (o *GetInputPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInputPortBadRequest creates a GetInputPortBadRequest with default headers values
func NewGetInputPortBadRequest() *GetInputPortBadRequest {
	return &GetInputPortBadRequest{}
}

/*
GetInputPortBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetInputPortBadRequest struct {
}

// IsSuccess returns true when this get input port bad request response has a 2xx status code
func (o *GetInputPortBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get input port bad request response has a 3xx status code
func (o *GetInputPortBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get input port bad request response has a 4xx status code
func (o *GetInputPortBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get input port bad request response has a 5xx status code
func (o *GetInputPortBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get input port bad request response a status code equal to that given
func (o *GetInputPortBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get input port bad request response
func (o *GetInputPortBadRequest) Code() int {
	return 400
}

func (o *GetInputPortBadRequest) Error() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortBadRequest ", 400)
}

func (o *GetInputPortBadRequest) String() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortBadRequest ", 400)
}

func (o *GetInputPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInputPortUnauthorized creates a GetInputPortUnauthorized with default headers values
func NewGetInputPortUnauthorized() *GetInputPortUnauthorized {
	return &GetInputPortUnauthorized{}
}

/*
GetInputPortUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetInputPortUnauthorized struct {
}

// IsSuccess returns true when this get input port unauthorized response has a 2xx status code
func (o *GetInputPortUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get input port unauthorized response has a 3xx status code
func (o *GetInputPortUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get input port unauthorized response has a 4xx status code
func (o *GetInputPortUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get input port unauthorized response has a 5xx status code
func (o *GetInputPortUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get input port unauthorized response a status code equal to that given
func (o *GetInputPortUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get input port unauthorized response
func (o *GetInputPortUnauthorized) Code() int {
	return 401
}

func (o *GetInputPortUnauthorized) Error() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortUnauthorized ", 401)
}

func (o *GetInputPortUnauthorized) String() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortUnauthorized ", 401)
}

func (o *GetInputPortUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInputPortForbidden creates a GetInputPortForbidden with default headers values
func NewGetInputPortForbidden() *GetInputPortForbidden {
	return &GetInputPortForbidden{}
}

/*
GetInputPortForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetInputPortForbidden struct {
}

// IsSuccess returns true when this get input port forbidden response has a 2xx status code
func (o *GetInputPortForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get input port forbidden response has a 3xx status code
func (o *GetInputPortForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get input port forbidden response has a 4xx status code
func (o *GetInputPortForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get input port forbidden response has a 5xx status code
func (o *GetInputPortForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get input port forbidden response a status code equal to that given
func (o *GetInputPortForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get input port forbidden response
func (o *GetInputPortForbidden) Code() int {
	return 403
}

func (o *GetInputPortForbidden) Error() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortForbidden ", 403)
}

func (o *GetInputPortForbidden) String() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortForbidden ", 403)
}

func (o *GetInputPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInputPortNotFound creates a GetInputPortNotFound with default headers values
func NewGetInputPortNotFound() *GetInputPortNotFound {
	return &GetInputPortNotFound{}
}

/*
GetInputPortNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetInputPortNotFound struct {
}

// IsSuccess returns true when this get input port not found response has a 2xx status code
func (o *GetInputPortNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get input port not found response has a 3xx status code
func (o *GetInputPortNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get input port not found response has a 4xx status code
func (o *GetInputPortNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get input port not found response has a 5xx status code
func (o *GetInputPortNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get input port not found response a status code equal to that given
func (o *GetInputPortNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get input port not found response
func (o *GetInputPortNotFound) Code() int {
	return 404
}

func (o *GetInputPortNotFound) Error() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortNotFound ", 404)
}

func (o *GetInputPortNotFound) String() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortNotFound ", 404)
}

func (o *GetInputPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInputPortConflict creates a GetInputPortConflict with default headers values
func NewGetInputPortConflict() *GetInputPortConflict {
	return &GetInputPortConflict{}
}

/*
GetInputPortConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetInputPortConflict struct {
}

// IsSuccess returns true when this get input port conflict response has a 2xx status code
func (o *GetInputPortConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get input port conflict response has a 3xx status code
func (o *GetInputPortConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get input port conflict response has a 4xx status code
func (o *GetInputPortConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get input port conflict response has a 5xx status code
func (o *GetInputPortConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get input port conflict response a status code equal to that given
func (o *GetInputPortConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get input port conflict response
func (o *GetInputPortConflict) Code() int {
	return 409
}

func (o *GetInputPortConflict) Error() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortConflict ", 409)
}

func (o *GetInputPortConflict) String() string {
	return fmt.Sprintf("[GET /input-ports/{id}][%d] getInputPortConflict ", 409)
}

func (o *GetInputPortConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package input_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateInputPortReader is a Reader for the UpdateInputPort structure.
type UpdateInputPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInputPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInputPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInputPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInputPortUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInputPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInputPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateInputPortConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateInputPortOK creates a UpdateInputPortOK with default headers values
func NewUpdateInputPortOK() *UpdateInputPortOK {
	return &UpdateInputPortOK{}
}

/* UpdateInputPortOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateInputPortOK struct {
	Payload *models.PortEntity
}

func (o *UpdateInputPortOK) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}][%d] updateInputPortOK  %+v", 200, o.Payload)
}
func (o *UpdateInputPortOK) GetPayload() *models.PortEntity {
	return o.Payload
}

func (o *UpdateInputPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInputPortBadRequest creates a UpdateInputPortBadRequest with default headers values
func NewUpdateInputPortBadRequest() *UpdateInputPortBadRequest {
	return &UpdateInputPortBadRequest{}
}

/* UpdateInputPortBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateInputPortBadRequest struct {
}

func (o *UpdateInputPortBadRequest) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}][%d] updateInputPortBadRequest ", 400)
}

func (o *UpdateInputPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInputPortUnauthorized creates a UpdateInputPortUnauthorized with default headers values
func NewUpdateInputPortUnauthorized() *UpdateInputPortUnauthorized {
	return &UpdateInputPortUnauthorized{}
}

/* UpdateInputPortUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateInputPortUnauthorized struct {
}

func (o *UpdateInputPortUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}][%d] updateInputPortUnauthorized ", 401)
}

func (o *UpdateInputPortUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInputPortForbidden creates a UpdateInputPortForbidden with default headers values
func NewUpdateInputPortForbidden() *UpdateInputPortForbidden {
	return &UpdateInputPortForbidden{}
}

/* UpdateInputPortForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateInputPortForbidden struct {
}

func (o *UpdateInputPortForbidden) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}][%d] updateInputPortForbidden ", 403)
}

func (o *UpdateInputPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInputPortNotFound creates a UpdateInputPortNotFound with default headers values
func NewUpdateInputPortNotFound() *UpdateInputPortNotFound {
	return &UpdateInputPortNotFound{}
}

/* UpdateInputPortNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateInputPortNotFound struct {
}

func (o *UpdateInputPortNotFound) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}][%d] updateInputPortNotFound ", 404)
}

func (o *UpdateInputPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInputPortConflict creates a UpdateInputPortConflict with default headers values
func NewUpdateInputPortConflict() *UpdateInputPortConflict {
	return &UpdateInputPortConflict{}
}

/* UpdateInputPortConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateInputPortConflict struct {
}

func (o *UpdateInputPortConflict) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}][%d] updateInputPortConflict ", 409)
}

func (o *UpdateInputPortConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// RemoveUserGroupReader is a Reader for the RemoveUserGroup structure.
type RemoveUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveUserGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveUserGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveUserGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveUserGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveUserGroupOK creates a RemoveUserGroupOK with default headers values
func NewRemoveUserGroupOK() *RemoveUserGroupOK {
	return &RemoveUserGroupOK{}
}

/* RemoveUserGroupOK describes a response with status code 200, with default header values.

successful operation
*/
type RemoveUserGroupOK struct {
	Payload *models.UserGroupEntity
}

func (o *RemoveUserGroupOK) Error() string {
	return fmt.Sprintf("[DELETE /tenants/user-groups/{id}][%d] removeUserGroupOK  %+v", 200, o.Payload)
}
func (o *RemoveUserGroupOK) GetPayload() *models.UserGroupEntity {
	return o.Payload
}

func (o *RemoveUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGroupEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserGroupBadRequest creates a RemoveUserGroupBadRequest with default headers values
func NewRemoveUserGroupBadRequest() *RemoveUserGroupBadRequest {
	return &RemoveUserGroupBadRequest{}
}

/* RemoveUserGroupBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type RemoveUserGroupBadRequest struct {
}

func (o *RemoveUserGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /tenants/user-groups/{id}][%d] removeUserGroupBadRequest ", 400)
}

func (o *RemoveUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveUserGroupUnauthorized creates a RemoveUserGroupUnauthorized with default headers values
func NewRemoveUserGroupUnauthorized() *RemoveUserGroupUnauthorized {
	return &RemoveUserGroupUnauthorized{}
}

/* RemoveUserGroupUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type RemoveUserGroupUnauthorized struct {
}

func (o *RemoveUserGroupUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /tenants/user-groups/{id}][%d] removeUserGroupUnauthorized ", 401)
}

func (o *RemoveUserGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveUserGroupForbidden creates a RemoveUserGroupForbidden with default headers values
func NewRemoveUserGroupForbidden() *RemoveUserGroupForbidden {
	return &RemoveUserGroupForbidden{}
}

/* RemoveUserGroupForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type RemoveUserGroupForbidden struct {
}

func (o *RemoveUserGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /tenants/user-groups/{id}][%d] removeUserGroupForbidden ", 403)
}

func (o *RemoveUserGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveUserGroupNotFound creates a RemoveUserGroupNotFound with default headers values
func NewRemoveUserGroupNotFound() *RemoveUserGroupNotFound {
	return &RemoveUserGroupNotFound{}
}

/* RemoveUserGroupNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type RemoveUserGroupNotFound struct {
}

func (o *RemoveUserGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tenants/user-groups/{id}][%d] removeUserGroupNotFound ", 404)
}

func (o *RemoveUserGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveUserGroupConflict creates a RemoveUserGroupConflict with default headers values
func NewRemoveUserGroupConflict() *RemoveUserGroupConflict {
	return &RemoveUserGroupConflict{}
}

/* RemoveUserGroupConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type RemoveUserGroupConflict struct {
}

func (o *RemoveUserGroupConflict) Error() string {
	return fmt.Sprintf("[DELETE /tenants/user-groups/{id}][%d] removeUserGroupConflict ", 409)
}

func (o *RemoveUserGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetUserReader is a Reader for the GetUser structure.
type GetUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tenants/users/{id}] getUser", response, response.Code())
	}
}

// NewGetUserOK creates a GetUserOK with default headers values
func NewGetUserOK() *GetUserOK {
	return &GetUserOK{}
}

/*
GetUserOK describes a response with status code 200, with default header values.

successful operation
*/
type GetUserOK struct {
	Payload *models.UserEntity
}

// IsSuccess returns true when this get user o k response has a 2xx status code
func (o *GetUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user o k response has a 3xx status code
func (o *GetUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user o k response has a 4xx status code
func (o *GetUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user o k response has a 5xx status code
func (o *GetUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user o k response a status code equal to that given
func (o *GetUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user o k response
func (o *GetUserOK) Code() int {
	return 200
}

func (o *GetUserOK) Error() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) String() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) GetPayload() *models.UserEntity {
	return o.Payload
}

func (o *GetUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserBadRequest creates a GetUserBadRequest with default headers values
func NewGetUserBadRequest() *GetUserBadRequest {
	return &GetUserBadRequest{}
}

/*
GetUserBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetUserBadRequest struct {
}

// IsSuccess returns true when this get user bad request response has a 2xx status code
func (o *GetUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user bad request response has a 3xx status code
func (o *GetUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user bad request response has a 4xx status code
func (o *GetUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user bad request response has a 5xx status code
func (o *GetUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get user bad request response a status code equal to that given
func (o *GetUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get user bad request response
func (o *GetUserBadRequest) Code() int {
	return 400
}

func (o *GetUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserBadRequest ", 400)
}

func (o *GetUserBadRequest) String() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserBadRequest ", 400)
}

func (o *GetUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserUnauthorized creates a GetUserUnauthorized with default headers values
func NewGetUserUnauthorized() *GetUserUnauthorized {
	return &GetUserUnauthorized{}
}

/*
GetUserUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetUserUnauthorized struct {
}

// IsSuccess returns true when this get user unauthorized response has a 2xx status code
func (o *GetUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user unauthorized response has a 3xx status code
func (o *GetUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user unauthorized response has a 4xx status code
func (o *GetUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user unauthorized response has a 5xx status code
func (o *GetUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user unauthorized response a status code equal to that given
func (o *GetUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user unauthorized response
func (o *GetUserUnauthorized) Code() int {
	return 401
}

func (o *GetUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserUnauthorized ", 401)
}

func (o *GetUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserUnauthorized ", 401)
}

func (o *GetUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserForbidden creates a GetUserForbidden with default headers values
func NewGetUserForbidden() *GetUserForbidden {
	return &GetUserForbidden{}
}

/*
GetUserForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetUserForbidden struct {
}

// IsSuccess returns true when this get user forbidden response has a 2xx status code
func (o *GetUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user forbidden response has a 3xx status code
func (o *GetUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user forbidden response has a 4xx status code
func (o *GetUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user forbidden response has a 5xx status code
func (o *GetUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user forbidden response a status code equal to that given
func (o *GetUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user forbidden response
func (o *GetUserForbidden) Code() int {
	return 403
}

func (o *GetUserForbidden) Error() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserForbidden ", 403)
}

func (o *GetUserForbidden) String() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserForbidden ", 403)
}

func (o *GetUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserNotFound creates a GetUserNotFound with default headers values
func NewGetUserNotFound() *GetUserNotFound {
	return &GetUserNotFound{}
}

/*
GetUserNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetUserNotFound struct {
}

// IsSuccess returns true when this get user not found response has a 2xx status code
func (o *GetUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user not found response has a 3xx status code
func (o *GetUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user not found response has a 4xx status code
func (o *GetUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user not found response has a 5xx status code
func (o *GetUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user not found response a status code equal to that given
func (o *GetUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user not found response
func (o *GetUserNotFound) Code() int {
	return 404
}

func (o *GetUserNotFound) Error() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserNotFound ", 404)
}

func (o *GetUserNotFound) String() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserNotFound ", 404)
}

func (o *GetUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserConflict creates a GetUserConflict with default headers values
func NewGetUserConflict() *GetUserConflict {
	return &GetUserConflict{}
}

/*
GetUserConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetUserConflict struct {
}

// IsSuccess returns true when this get user conflict response has a 2xx status code
func (o *GetUserConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user conflict response has a 3xx status code
func (o *GetUserConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user conflict response has a 4xx status code
func (o *GetUserConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user conflict response has a 5xx status code
func (o *GetUserConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get user conflict response a status code equal to that given
func (o *GetUserConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get user conflict response
func (o *GetUserConflict) Code() int {
	return 409
}

func (o *GetUserConflict) Error() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserConflict ", 409)
}

func (o *GetUserConflict) String() string {
	return fmt.Sprintf("[GET /tenants/users/{id}][%d] getUserConflict ", 409)
}

func (o *GetUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateControllerServiceReader is a Reader for the UpdateControllerService structure.
type UpdateControllerServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateControllerServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateControllerServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateControllerServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateControllerServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateControllerServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateControllerServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateControllerServiceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /controller-services/{id}] updateControllerService", response, response.Code())
	}
}

// NewUpdateControllerServiceOK creates a UpdateControllerServiceOK with default headers values
func NewUpdateControllerServiceOK() *UpdateControllerServiceOK {
	return &UpdateControllerServiceOK{}
}

/*
UpdateControllerServiceOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateControllerServiceOK struct {
	Payload *models.ControllerServiceEntity
}

// IsSuccess returns true when this update controller service o k response has a 2xx status code
func (o *UpdateControllerServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update controller service o k response has a 3xx status code
func (o *UpdateControllerServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service o k response has a 4xx status code
func (o *UpdateControllerServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update controller service o k response has a 5xx status code
func (o *UpdateControllerServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service o k response a status code equal to that given
func (o *UpdateControllerServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update controller service o k response
func (o *UpdateControllerServiceOK) Code() int {
	return 200
}

func (o *UpdateControllerServiceOK) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceOK  %+v", 200, o.Payload)
}

func (o *UpdateControllerServiceOK) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceOK  %+v", 200, o.Payload)
}

func (o *UpdateControllerServiceOK) GetPayload() *models.ControllerServiceEntity {
	return o.Payload
}

func (o *UpdateControllerServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ControllerServiceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateControllerServiceBadRequest creates a UpdateControllerServiceBadRequest with default headers values
func NewUpdateControllerServiceBadRequest() *UpdateControllerServiceBadRequest {
	return &UpdateControllerServiceBadRequest{}
}

/*
UpdateControllerServiceBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateControllerServiceBadRequest struct {
}

// IsSuccess returns true when this update controller service bad request response has a 2xx status code
func (o *UpdateControllerServiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service bad request response has a 3xx status code
func (o *UpdateControllerServiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service bad request response has a 4xx status code
func (o *UpdateControllerServiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service bad request response has a 5xx status code
func (o *UpdateControllerServiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service bad request response a status code equal to that given
func (o *UpdateControllerServiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update controller service bad request response
func (o *UpdateControllerServiceBadRequest) Code() int {
	return 400
}

func (o *UpdateControllerServiceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceBadRequest ", 400)
}

func (o *UpdateControllerServiceBadRequest) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceBadRequest ", 400)
}

func (o *UpdateControllerServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceUnauthorized creates a UpdateControllerServiceUnauthorized with default headers values
func NewUpdateControllerServiceUnauthorized() *UpdateControllerServiceUnauthorized {
	return &UpdateControllerServiceUnauthorized{}
}

/*
UpdateControllerServiceUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateControllerServiceUnauthorized struct {
}

// IsSuccess returns true when this update controller service unauthorized response has a 2xx status code
func (o *UpdateControllerServiceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service unauthorized response has a 3xx status code
func (o *UpdateControllerServiceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service unauthorized response has a 4xx status code
func (o *UpdateControllerServiceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service unauthorized response has a 5xx status code
func (o *UpdateControllerServiceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service unauthorized response a status code equal to that given
func (o *UpdateControllerServiceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update controller service unauthorized response
func (o *UpdateControllerServiceUnauthorized) Code() int {
	return 401
}

func (o *UpdateControllerServiceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceUnauthorized ", 401)
}

func (o *UpdateControllerServiceUnauthorized) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceUnauthorized ", 401)
}

func (o *UpdateControllerServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceForbidden creates a UpdateControllerServiceForbidden with default headers values
func NewUpdateControllerServiceForbidden() *UpdateControllerServiceForbidden {
	return &UpdateControllerServiceForbidden{}
}

/*
UpdateControllerServiceForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateControllerServiceForbidden struct {
}

// IsSuccess returns true when this update controller service forbidden response has a 2xx status code
func (o *UpdateControllerServiceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service forbidden response has a 3xx status code
func (o *UpdateControllerServiceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service forbidden response has a 4xx status code
func (o *UpdateControllerServiceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service forbidden response has a 5xx status code
func (o *UpdateControllerServiceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service forbidden response a status code equal to that given
func (o *UpdateControllerServiceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update controller service forbidden response
func (o *UpdateControllerServiceForbidden) Code() int {
	return 403
}

func (o *UpdateControllerServiceForbidden) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceForbidden ", 403)
}

func (o *UpdateControllerServiceForbidden) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceForbidden ", 403)
}

func (o *UpdateControllerServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceNotFound creates a UpdateControllerServiceNotFound with default headers values
func NewUpdateControllerServiceNotFound() *UpdateControllerServiceNotFound {
	return &UpdateControllerServiceNotFound{}
}

/*
UpdateControllerServiceNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateControllerServiceNotFound struct {
}

// IsSuccess returns true when this update controller service not found response has a 2xx status code
func (o *UpdateControllerServiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service not found response has a 3xx status code
func (o *UpdateControllerServiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service not found response has a 4xx status code
func (o *UpdateControllerServiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service not found response has a 5xx status code
func (o *UpdateControllerServiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service not found response a status code equal to that given
func (o *UpdateControllerServiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update controller service not found response
func (o *UpdateControllerServiceNotFound) Code() int {
	return 404
}

func (o *UpdateControllerServiceNotFound) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceNotFound ", 404)
}

func (o *UpdateControllerServiceNotFound) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceNotFound ", 404)
}

func (o *UpdateControllerServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceConflict creates a UpdateControllerServiceConflict with default headers values
func NewUpdateControllerServiceConflict() *UpdateControllerServiceConflict {
	return &UpdateControllerServiceConflict{}
}

/*
UpdateControllerServiceConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateControllerServiceConflict struct {
}

// IsSuccess returns true when this update controller service conflict response has a 2xx status code
func (o *UpdateControllerServiceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service conflict response has a 3xx status code
func (o *UpdateControllerServiceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service conflict response has a 4xx status code
func (o *UpdateControllerServiceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service conflict response has a 5xx status code
func (o *UpdateControllerServiceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service conflict response a status code equal to that given
func (o *UpdateControllerServiceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update controller service conflict response
func (o *UpdateControllerServiceConflict) Code() int {
	return 409
}

func (o *UpdateControllerServiceConflict) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceConflict ", 409)
}

func (o *UpdateControllerServiceConflict) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}][%d] updateControllerServiceConflict ", 409)
}

func (o *UpdateControllerServiceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

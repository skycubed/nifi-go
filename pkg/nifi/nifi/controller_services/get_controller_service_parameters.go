// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetControllerServiceParams creates a new GetControllerServiceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetControllerServiceParams() *GetControllerServiceParams {
	return &GetControllerServiceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetControllerServiceParamsWithTimeout creates a new GetControllerServiceParams object
// with the ability to set a timeout on a request.
func NewGetControllerServiceParamsWithTimeout(timeout time.Duration) *GetControllerServiceParams {
	return &GetControllerServiceParams{
		timeout: timeout,
	}
}

// NewGetControllerServiceParamsWithContext creates a new GetControllerServiceParams object
// with the ability to set a context for a request.
func NewGetControllerServiceParamsWithContext(ctx context.Context) *GetControllerServiceParams {
	return &GetControllerServiceParams{
		Context: ctx,
	}
}

// NewGetControllerServiceParamsWithHTTPClient creates a new GetControllerServiceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetControllerServiceParamsWithHTTPClient(client *http.Client) *GetControllerServiceParams {
	return &GetControllerServiceParams{
		HTTPClient: client,
	}
}

/*
GetControllerServiceParams contains all the parameters to send to the API endpoint

	for the get controller service operation.

	Typically these are written to a http.Request.
*/
type GetControllerServiceParams struct {

	/* ID.

	   The controller service id.
	*/
	ID string

	// UIOnly.
	UIOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get controller service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetControllerServiceParams) WithDefaults() *GetControllerServiceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get controller service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetControllerServiceParams) SetDefaults() {
	var (
		uIOnlyDefault = bool(false)
	)

	val := GetControllerServiceParams{
		UIOnly: &uIOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get controller service params
func (o *GetControllerServiceParams) WithTimeout(timeout time.Duration) *GetControllerServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get controller service params
func (o *GetControllerServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get controller service params
func (o *GetControllerServiceParams) WithContext(ctx context.Context) *GetControllerServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get controller service params
func (o *GetControllerServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get controller service params
func (o *GetControllerServiceParams) WithHTTPClient(client *http.Client) *GetControllerServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get controller service params
func (o *GetControllerServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get controller service params
func (o *GetControllerServiceParams) WithID(id string) *GetControllerServiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get controller service params
func (o *GetControllerServiceParams) SetID(id string) {
	o.ID = id
}

// WithUIOnly adds the uIOnly to the get controller service params
func (o *GetControllerServiceParams) WithUIOnly(uIOnly *bool) *GetControllerServiceParams {
	o.SetUIOnly(uIOnly)
	return o
}

// SetUIOnly adds the uiOnly to the get controller service params
func (o *GetControllerServiceParams) SetUIOnly(uIOnly *bool) {
	o.UIOnly = uIOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetControllerServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.UIOnly != nil {

		// query param uiOnly
		var qrUIOnly bool

		if o.UIOnly != nil {
			qrUIOnly = *o.UIOnly
		}
		qUIOnly := swag.FormatBool(qrUIOnly)
		if qUIOnly != "" {

			if err := r.SetQueryParam("uiOnly", qUIOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateControllerServiceReferencesReader is a Reader for the UpdateControllerServiceReferences structure.
type UpdateControllerServiceReferencesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateControllerServiceReferencesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateControllerServiceReferencesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateControllerServiceReferencesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateControllerServiceReferencesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateControllerServiceReferencesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateControllerServiceReferencesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateControllerServiceReferencesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /controller-services/{id}/references] updateControllerServiceReferences", response, response.Code())
	}
}

// NewUpdateControllerServiceReferencesOK creates a UpdateControllerServiceReferencesOK with default headers values
func NewUpdateControllerServiceReferencesOK() *UpdateControllerServiceReferencesOK {
	return &UpdateControllerServiceReferencesOK{}
}

/*
UpdateControllerServiceReferencesOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateControllerServiceReferencesOK struct {
	Payload *models.ControllerServiceReferencingComponentsEntity
}

// IsSuccess returns true when this update controller service references o k response has a 2xx status code
func (o *UpdateControllerServiceReferencesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update controller service references o k response has a 3xx status code
func (o *UpdateControllerServiceReferencesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service references o k response has a 4xx status code
func (o *UpdateControllerServiceReferencesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update controller service references o k response has a 5xx status code
func (o *UpdateControllerServiceReferencesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service references o k response a status code equal to that given
func (o *UpdateControllerServiceReferencesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update controller service references o k response
func (o *UpdateControllerServiceReferencesOK) Code() int {
	return 200
}

func (o *UpdateControllerServiceReferencesOK) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesOK  %+v", 200, o.Payload)
}

func (o *UpdateControllerServiceReferencesOK) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesOK  %+v", 200, o.Payload)
}

func (o *UpdateControllerServiceReferencesOK) GetPayload() *models.ControllerServiceReferencingComponentsEntity {
	return o.Payload
}

func (o *UpdateControllerServiceReferencesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ControllerServiceReferencingComponentsEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateControllerServiceReferencesBadRequest creates a UpdateControllerServiceReferencesBadRequest with default headers values
func NewUpdateControllerServiceReferencesBadRequest() *UpdateControllerServiceReferencesBadRequest {
	return &UpdateControllerServiceReferencesBadRequest{}
}

/*
UpdateControllerServiceReferencesBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateControllerServiceReferencesBadRequest struct {
}

// IsSuccess returns true when this update controller service references bad request response has a 2xx status code
func (o *UpdateControllerServiceReferencesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service references bad request response has a 3xx status code
func (o *UpdateControllerServiceReferencesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service references bad request response has a 4xx status code
func (o *UpdateControllerServiceReferencesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service references bad request response has a 5xx status code
func (o *UpdateControllerServiceReferencesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service references bad request response a status code equal to that given
func (o *UpdateControllerServiceReferencesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update controller service references bad request response
func (o *UpdateControllerServiceReferencesBadRequest) Code() int {
	return 400
}

func (o *UpdateControllerServiceReferencesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesBadRequest ", 400)
}

func (o *UpdateControllerServiceReferencesBadRequest) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesBadRequest ", 400)
}

func (o *UpdateControllerServiceReferencesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceReferencesUnauthorized creates a UpdateControllerServiceReferencesUnauthorized with default headers values
func NewUpdateControllerServiceReferencesUnauthorized() *UpdateControllerServiceReferencesUnauthorized {
	return &UpdateControllerServiceReferencesUnauthorized{}
}

/*
UpdateControllerServiceReferencesUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateControllerServiceReferencesUnauthorized struct {
}

// IsSuccess returns true when this update controller service references unauthorized response has a 2xx status code
func (o *UpdateControllerServiceReferencesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service references unauthorized response has a 3xx status code
func (o *UpdateControllerServiceReferencesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service references unauthorized response has a 4xx status code
func (o *UpdateControllerServiceReferencesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service references unauthorized response has a 5xx status code
func (o *UpdateControllerServiceReferencesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service references unauthorized response a status code equal to that given
func (o *UpdateControllerServiceReferencesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update controller service references unauthorized response
func (o *UpdateControllerServiceReferencesUnauthorized) Code() int {
	return 401
}

func (o *UpdateControllerServiceReferencesUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesUnauthorized ", 401)
}

func (o *UpdateControllerServiceReferencesUnauthorized) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesUnauthorized ", 401)
}

func (o *UpdateControllerServiceReferencesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceReferencesForbidden creates a UpdateControllerServiceReferencesForbidden with default headers values
func NewUpdateControllerServiceReferencesForbidden() *UpdateControllerServiceReferencesForbidden {
	return &UpdateControllerServiceReferencesForbidden{}
}

/*
UpdateControllerServiceReferencesForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateControllerServiceReferencesForbidden struct {
}

// IsSuccess returns true when this update controller service references forbidden response has a 2xx status code
func (o *UpdateControllerServiceReferencesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service references forbidden response has a 3xx status code
func (o *UpdateControllerServiceReferencesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service references forbidden response has a 4xx status code
func (o *UpdateControllerServiceReferencesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service references forbidden response has a 5xx status code
func (o *UpdateControllerServiceReferencesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service references forbidden response a status code equal to that given
func (o *UpdateControllerServiceReferencesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update controller service references forbidden response
func (o *UpdateControllerServiceReferencesForbidden) Code() int {
	return 403
}

func (o *UpdateControllerServiceReferencesForbidden) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesForbidden ", 403)
}

func (o *UpdateControllerServiceReferencesForbidden) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesForbidden ", 403)
}

func (o *UpdateControllerServiceReferencesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceReferencesNotFound creates a UpdateControllerServiceReferencesNotFound with default headers values
func NewUpdateControllerServiceReferencesNotFound() *UpdateControllerServiceReferencesNotFound {
	return &UpdateControllerServiceReferencesNotFound{}
}

/*
UpdateControllerServiceReferencesNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateControllerServiceReferencesNotFound struct {
}

// IsSuccess returns true when this update controller service references not found response has a 2xx status code
func (o *UpdateControllerServiceReferencesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service references not found response has a 3xx status code
func (o *UpdateControllerServiceReferencesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service references not found response has a 4xx status code
func (o *UpdateControllerServiceReferencesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service references not found response has a 5xx status code
func (o *UpdateControllerServiceReferencesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service references not found response a status code equal to that given
func (o *UpdateControllerServiceReferencesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update controller service references not found response
func (o *UpdateControllerServiceReferencesNotFound) Code() int {
	return 404
}

func (o *UpdateControllerServiceReferencesNotFound) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesNotFound ", 404)
}

func (o *UpdateControllerServiceReferencesNotFound) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesNotFound ", 404)
}

func (o *UpdateControllerServiceReferencesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateControllerServiceReferencesConflict creates a UpdateControllerServiceReferencesConflict with default headers values
func NewUpdateControllerServiceReferencesConflict() *UpdateControllerServiceReferencesConflict {
	return &UpdateControllerServiceReferencesConflict{}
}

/*
UpdateControllerServiceReferencesConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateControllerServiceReferencesConflict struct {
}

// IsSuccess returns true when this update controller service references conflict response has a 2xx status code
func (o *UpdateControllerServiceReferencesConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update controller service references conflict response has a 3xx status code
func (o *UpdateControllerServiceReferencesConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update controller service references conflict response has a 4xx status code
func (o *UpdateControllerServiceReferencesConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update controller service references conflict response has a 5xx status code
func (o *UpdateControllerServiceReferencesConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update controller service references conflict response a status code equal to that given
func (o *UpdateControllerServiceReferencesConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update controller service references conflict response
func (o *UpdateControllerServiceReferencesConflict) Code() int {
	return 409
}

func (o *UpdateControllerServiceReferencesConflict) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesConflict ", 409)
}

func (o *UpdateControllerServiceReferencesConflict) String() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/references][%d] updateControllerServiceReferencesConflict ", 409)
}

func (o *UpdateControllerServiceReferencesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

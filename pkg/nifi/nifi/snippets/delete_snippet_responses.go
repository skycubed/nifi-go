// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// DeleteSnippetReader is a Reader for the DeleteSnippet structure.
type DeleteSnippetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSnippetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSnippetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSnippetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSnippetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSnippetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSnippetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSnippetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /snippets/{id}] deleteSnippet", response, response.Code())
	}
}

// NewDeleteSnippetOK creates a DeleteSnippetOK with default headers values
func NewDeleteSnippetOK() *DeleteSnippetOK {
	return &DeleteSnippetOK{}
}

/*
DeleteSnippetOK describes a response with status code 200, with default header values.

successful operation
*/
type DeleteSnippetOK struct {
	Payload *models.SnippetEntity
}

// IsSuccess returns true when this delete snippet o k response has a 2xx status code
func (o *DeleteSnippetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete snippet o k response has a 3xx status code
func (o *DeleteSnippetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete snippet o k response has a 4xx status code
func (o *DeleteSnippetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete snippet o k response has a 5xx status code
func (o *DeleteSnippetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete snippet o k response a status code equal to that given
func (o *DeleteSnippetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete snippet o k response
func (o *DeleteSnippetOK) Code() int {
	return 200
}

func (o *DeleteSnippetOK) Error() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetOK  %+v", 200, o.Payload)
}

func (o *DeleteSnippetOK) String() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetOK  %+v", 200, o.Payload)
}

func (o *DeleteSnippetOK) GetPayload() *models.SnippetEntity {
	return o.Payload
}

func (o *DeleteSnippetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SnippetEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSnippetBadRequest creates a DeleteSnippetBadRequest with default headers values
func NewDeleteSnippetBadRequest() *DeleteSnippetBadRequest {
	return &DeleteSnippetBadRequest{}
}

/*
DeleteSnippetBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type DeleteSnippetBadRequest struct {
}

// IsSuccess returns true when this delete snippet bad request response has a 2xx status code
func (o *DeleteSnippetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete snippet bad request response has a 3xx status code
func (o *DeleteSnippetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete snippet bad request response has a 4xx status code
func (o *DeleteSnippetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete snippet bad request response has a 5xx status code
func (o *DeleteSnippetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete snippet bad request response a status code equal to that given
func (o *DeleteSnippetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete snippet bad request response
func (o *DeleteSnippetBadRequest) Code() int {
	return 400
}

func (o *DeleteSnippetBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetBadRequest ", 400)
}

func (o *DeleteSnippetBadRequest) String() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetBadRequest ", 400)
}

func (o *DeleteSnippetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSnippetUnauthorized creates a DeleteSnippetUnauthorized with default headers values
func NewDeleteSnippetUnauthorized() *DeleteSnippetUnauthorized {
	return &DeleteSnippetUnauthorized{}
}

/*
DeleteSnippetUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type DeleteSnippetUnauthorized struct {
}

// IsSuccess returns true when this delete snippet unauthorized response has a 2xx status code
func (o *DeleteSnippetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete snippet unauthorized response has a 3xx status code
func (o *DeleteSnippetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete snippet unauthorized response has a 4xx status code
func (o *DeleteSnippetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete snippet unauthorized response has a 5xx status code
func (o *DeleteSnippetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete snippet unauthorized response a status code equal to that given
func (o *DeleteSnippetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete snippet unauthorized response
func (o *DeleteSnippetUnauthorized) Code() int {
	return 401
}

func (o *DeleteSnippetUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetUnauthorized ", 401)
}

func (o *DeleteSnippetUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetUnauthorized ", 401)
}

func (o *DeleteSnippetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSnippetForbidden creates a DeleteSnippetForbidden with default headers values
func NewDeleteSnippetForbidden() *DeleteSnippetForbidden {
	return &DeleteSnippetForbidden{}
}

/*
DeleteSnippetForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type DeleteSnippetForbidden struct {
}

// IsSuccess returns true when this delete snippet forbidden response has a 2xx status code
func (o *DeleteSnippetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete snippet forbidden response has a 3xx status code
func (o *DeleteSnippetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete snippet forbidden response has a 4xx status code
func (o *DeleteSnippetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete snippet forbidden response has a 5xx status code
func (o *DeleteSnippetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete snippet forbidden response a status code equal to that given
func (o *DeleteSnippetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete snippet forbidden response
func (o *DeleteSnippetForbidden) Code() int {
	return 403
}

func (o *DeleteSnippetForbidden) Error() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetForbidden ", 403)
}

func (o *DeleteSnippetForbidden) String() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetForbidden ", 403)
}

func (o *DeleteSnippetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSnippetNotFound creates a DeleteSnippetNotFound with default headers values
func NewDeleteSnippetNotFound() *DeleteSnippetNotFound {
	return &DeleteSnippetNotFound{}
}

/*
DeleteSnippetNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type DeleteSnippetNotFound struct {
}

// IsSuccess returns true when this delete snippet not found response has a 2xx status code
func (o *DeleteSnippetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete snippet not found response has a 3xx status code
func (o *DeleteSnippetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete snippet not found response has a 4xx status code
func (o *DeleteSnippetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete snippet not found response has a 5xx status code
func (o *DeleteSnippetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete snippet not found response a status code equal to that given
func (o *DeleteSnippetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete snippet not found response
func (o *DeleteSnippetNotFound) Code() int {
	return 404
}

func (o *DeleteSnippetNotFound) Error() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetNotFound ", 404)
}

func (o *DeleteSnippetNotFound) String() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetNotFound ", 404)
}

func (o *DeleteSnippetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSnippetConflict creates a DeleteSnippetConflict with default headers values
func NewDeleteSnippetConflict() *DeleteSnippetConflict {
	return &DeleteSnippetConflict{}
}

/*
DeleteSnippetConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type DeleteSnippetConflict struct {
}

// IsSuccess returns true when this delete snippet conflict response has a 2xx status code
func (o *DeleteSnippetConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete snippet conflict response has a 3xx status code
func (o *DeleteSnippetConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete snippet conflict response has a 4xx status code
func (o *DeleteSnippetConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete snippet conflict response has a 5xx status code
func (o *DeleteSnippetConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete snippet conflict response a status code equal to that given
func (o *DeleteSnippetConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete snippet conflict response
func (o *DeleteSnippetConflict) Code() int {
	return 409
}

func (o *DeleteSnippetConflict) Error() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetConflict ", 409)
}

func (o *DeleteSnippetConflict) String() string {
	return fmt.Sprintf("[DELETE /snippets/{id}][%d] deleteSnippetConflict ", 409)
}

func (o *DeleteSnippetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

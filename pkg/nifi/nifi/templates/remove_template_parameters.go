// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRemoveTemplateParams creates a new RemoveTemplateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRemoveTemplateParams() *RemoveTemplateParams {
	return &RemoveTemplateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveTemplateParamsWithTimeout creates a new RemoveTemplateParams object
// with the ability to set a timeout on a request.
func NewRemoveTemplateParamsWithTimeout(timeout time.Duration) *RemoveTemplateParams {
	return &RemoveTemplateParams{
		timeout: timeout,
	}
}

// NewRemoveTemplateParamsWithContext creates a new RemoveTemplateParams object
// with the ability to set a context for a request.
func NewRemoveTemplateParamsWithContext(ctx context.Context) *RemoveTemplateParams {
	return &RemoveTemplateParams{
		Context: ctx,
	}
}

// NewRemoveTemplateParamsWithHTTPClient creates a new RemoveTemplateParams object
// with the ability to set a custom HTTPClient for a request.
func NewRemoveTemplateParamsWithHTTPClient(client *http.Client) *RemoveTemplateParams {
	return &RemoveTemplateParams{
		HTTPClient: client,
	}
}

/*
RemoveTemplateParams contains all the parameters to send to the API endpoint

	for the remove template operation.

	Typically these are written to a http.Request.
*/
type RemoveTemplateParams struct {

	/* DisconnectedNodeAcknowledged.

	   Acknowledges that this node is disconnected to allow for mutable requests to proceed.
	*/
	DisconnectedNodeAcknowledged *bool

	/* ID.

	   The template id.
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the remove template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveTemplateParams) WithDefaults() *RemoveTemplateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the remove template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveTemplateParams) SetDefaults() {
	var (
		disconnectedNodeAcknowledgedDefault = bool(false)
	)

	val := RemoveTemplateParams{
		DisconnectedNodeAcknowledged: &disconnectedNodeAcknowledgedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the remove template params
func (o *RemoveTemplateParams) WithTimeout(timeout time.Duration) *RemoveTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove template params
func (o *RemoveTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove template params
func (o *RemoveTemplateParams) WithContext(ctx context.Context) *RemoveTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove template params
func (o *RemoveTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove template params
func (o *RemoveTemplateParams) WithHTTPClient(client *http.Client) *RemoveTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove template params
func (o *RemoveTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDisconnectedNodeAcknowledged adds the disconnectedNodeAcknowledged to the remove template params
func (o *RemoveTemplateParams) WithDisconnectedNodeAcknowledged(disconnectedNodeAcknowledged *bool) *RemoveTemplateParams {
	o.SetDisconnectedNodeAcknowledged(disconnectedNodeAcknowledged)
	return o
}

// SetDisconnectedNodeAcknowledged adds the disconnectedNodeAcknowledged to the remove template params
func (o *RemoveTemplateParams) SetDisconnectedNodeAcknowledged(disconnectedNodeAcknowledged *bool) {
	o.DisconnectedNodeAcknowledged = disconnectedNodeAcknowledged
}

// WithID adds the id to the remove template params
func (o *RemoveTemplateParams) WithID(id string) *RemoveTemplateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the remove template params
func (o *RemoveTemplateParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DisconnectedNodeAcknowledged != nil {

		// query param disconnectedNodeAcknowledged
		var qrDisconnectedNodeAcknowledged bool

		if o.DisconnectedNodeAcknowledged != nil {
			qrDisconnectedNodeAcknowledged = *o.DisconnectedNodeAcknowledged
		}
		qDisconnectedNodeAcknowledged := swag.FormatBool(qrDisconnectedNodeAcknowledged)
		if qDisconnectedNodeAcknowledged != "" {

			if err := r.SetQueryParam("disconnectedNodeAcknowledged", qDisconnectedNodeAcknowledged); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

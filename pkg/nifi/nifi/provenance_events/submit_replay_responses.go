// Code generated by go-swagger; DO NOT EDIT.

package provenance_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// SubmitReplayReader is a Reader for the SubmitReplay structure.
type SubmitReplayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitReplayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSubmitReplayCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitReplayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubmitReplayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitReplayForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitReplayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewSubmitReplayConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitReplayCreated creates a SubmitReplayCreated with default headers values
func NewSubmitReplayCreated() *SubmitReplayCreated {
	return &SubmitReplayCreated{}
}

/* SubmitReplayCreated describes a response with status code 201, with default header values.

successful operation
*/
type SubmitReplayCreated struct {
	Payload *models.ProvenanceEventEntity
}

func (o *SubmitReplayCreated) Error() string {
	return fmt.Sprintf("[POST /provenance-events/replays][%d] submitReplayCreated  %+v", 201, o.Payload)
}
func (o *SubmitReplayCreated) GetPayload() *models.ProvenanceEventEntity {
	return o.Payload
}

func (o *SubmitReplayCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvenanceEventEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitReplayBadRequest creates a SubmitReplayBadRequest with default headers values
func NewSubmitReplayBadRequest() *SubmitReplayBadRequest {
	return &SubmitReplayBadRequest{}
}

/* SubmitReplayBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type SubmitReplayBadRequest struct {
}

func (o *SubmitReplayBadRequest) Error() string {
	return fmt.Sprintf("[POST /provenance-events/replays][%d] submitReplayBadRequest ", 400)
}

func (o *SubmitReplayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayUnauthorized creates a SubmitReplayUnauthorized with default headers values
func NewSubmitReplayUnauthorized() *SubmitReplayUnauthorized {
	return &SubmitReplayUnauthorized{}
}

/* SubmitReplayUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type SubmitReplayUnauthorized struct {
}

func (o *SubmitReplayUnauthorized) Error() string {
	return fmt.Sprintf("[POST /provenance-events/replays][%d] submitReplayUnauthorized ", 401)
}

func (o *SubmitReplayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayForbidden creates a SubmitReplayForbidden with default headers values
func NewSubmitReplayForbidden() *SubmitReplayForbidden {
	return &SubmitReplayForbidden{}
}

/* SubmitReplayForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type SubmitReplayForbidden struct {
}

func (o *SubmitReplayForbidden) Error() string {
	return fmt.Sprintf("[POST /provenance-events/replays][%d] submitReplayForbidden ", 403)
}

func (o *SubmitReplayForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayNotFound creates a SubmitReplayNotFound with default headers values
func NewSubmitReplayNotFound() *SubmitReplayNotFound {
	return &SubmitReplayNotFound{}
}

/* SubmitReplayNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type SubmitReplayNotFound struct {
}

func (o *SubmitReplayNotFound) Error() string {
	return fmt.Sprintf("[POST /provenance-events/replays][%d] submitReplayNotFound ", 404)
}

func (o *SubmitReplayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayConflict creates a SubmitReplayConflict with default headers values
func NewSubmitReplayConflict() *SubmitReplayConflict {
	return &SubmitReplayConflict{}
}

/* SubmitReplayConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type SubmitReplayConflict struct {
}

func (o *SubmitReplayConflict) Error() string {
	return fmt.Sprintf("[POST /provenance-events/replays][%d] submitReplayConflict ", 409)
}

func (o *SubmitReplayConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

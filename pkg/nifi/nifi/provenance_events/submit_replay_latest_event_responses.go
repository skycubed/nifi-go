// Code generated by go-swagger; DO NOT EDIT.

package provenance_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// SubmitReplayLatestEventReader is a Reader for the SubmitReplayLatestEvent structure.
type SubmitReplayLatestEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitReplayLatestEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubmitReplayLatestEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitReplayLatestEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubmitReplayLatestEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitReplayLatestEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitReplayLatestEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewSubmitReplayLatestEventConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /provenance-events/latest/replays] submitReplayLatestEvent", response, response.Code())
	}
}

// NewSubmitReplayLatestEventOK creates a SubmitReplayLatestEventOK with default headers values
func NewSubmitReplayLatestEventOK() *SubmitReplayLatestEventOK {
	return &SubmitReplayLatestEventOK{}
}

/*
SubmitReplayLatestEventOK describes a response with status code 200, with default header values.

successful operation
*/
type SubmitReplayLatestEventOK struct {
	Payload *models.ReplayLastEventResponseEntity
}

// IsSuccess returns true when this submit replay latest event o k response has a 2xx status code
func (o *SubmitReplayLatestEventOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this submit replay latest event o k response has a 3xx status code
func (o *SubmitReplayLatestEventOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit replay latest event o k response has a 4xx status code
func (o *SubmitReplayLatestEventOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit replay latest event o k response has a 5xx status code
func (o *SubmitReplayLatestEventOK) IsServerError() bool {
	return false
}

// IsCode returns true when this submit replay latest event o k response a status code equal to that given
func (o *SubmitReplayLatestEventOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the submit replay latest event o k response
func (o *SubmitReplayLatestEventOK) Code() int {
	return 200
}

func (o *SubmitReplayLatestEventOK) Error() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventOK  %+v", 200, o.Payload)
}

func (o *SubmitReplayLatestEventOK) String() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventOK  %+v", 200, o.Payload)
}

func (o *SubmitReplayLatestEventOK) GetPayload() *models.ReplayLastEventResponseEntity {
	return o.Payload
}

func (o *SubmitReplayLatestEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReplayLastEventResponseEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitReplayLatestEventBadRequest creates a SubmitReplayLatestEventBadRequest with default headers values
func NewSubmitReplayLatestEventBadRequest() *SubmitReplayLatestEventBadRequest {
	return &SubmitReplayLatestEventBadRequest{}
}

/*
SubmitReplayLatestEventBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type SubmitReplayLatestEventBadRequest struct {
}

// IsSuccess returns true when this submit replay latest event bad request response has a 2xx status code
func (o *SubmitReplayLatestEventBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit replay latest event bad request response has a 3xx status code
func (o *SubmitReplayLatestEventBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit replay latest event bad request response has a 4xx status code
func (o *SubmitReplayLatestEventBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit replay latest event bad request response has a 5xx status code
func (o *SubmitReplayLatestEventBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this submit replay latest event bad request response a status code equal to that given
func (o *SubmitReplayLatestEventBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the submit replay latest event bad request response
func (o *SubmitReplayLatestEventBadRequest) Code() int {
	return 400
}

func (o *SubmitReplayLatestEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventBadRequest ", 400)
}

func (o *SubmitReplayLatestEventBadRequest) String() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventBadRequest ", 400)
}

func (o *SubmitReplayLatestEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayLatestEventUnauthorized creates a SubmitReplayLatestEventUnauthorized with default headers values
func NewSubmitReplayLatestEventUnauthorized() *SubmitReplayLatestEventUnauthorized {
	return &SubmitReplayLatestEventUnauthorized{}
}

/*
SubmitReplayLatestEventUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type SubmitReplayLatestEventUnauthorized struct {
}

// IsSuccess returns true when this submit replay latest event unauthorized response has a 2xx status code
func (o *SubmitReplayLatestEventUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit replay latest event unauthorized response has a 3xx status code
func (o *SubmitReplayLatestEventUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit replay latest event unauthorized response has a 4xx status code
func (o *SubmitReplayLatestEventUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit replay latest event unauthorized response has a 5xx status code
func (o *SubmitReplayLatestEventUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this submit replay latest event unauthorized response a status code equal to that given
func (o *SubmitReplayLatestEventUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the submit replay latest event unauthorized response
func (o *SubmitReplayLatestEventUnauthorized) Code() int {
	return 401
}

func (o *SubmitReplayLatestEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventUnauthorized ", 401)
}

func (o *SubmitReplayLatestEventUnauthorized) String() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventUnauthorized ", 401)
}

func (o *SubmitReplayLatestEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayLatestEventForbidden creates a SubmitReplayLatestEventForbidden with default headers values
func NewSubmitReplayLatestEventForbidden() *SubmitReplayLatestEventForbidden {
	return &SubmitReplayLatestEventForbidden{}
}

/*
SubmitReplayLatestEventForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type SubmitReplayLatestEventForbidden struct {
}

// IsSuccess returns true when this submit replay latest event forbidden response has a 2xx status code
func (o *SubmitReplayLatestEventForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit replay latest event forbidden response has a 3xx status code
func (o *SubmitReplayLatestEventForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit replay latest event forbidden response has a 4xx status code
func (o *SubmitReplayLatestEventForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit replay latest event forbidden response has a 5xx status code
func (o *SubmitReplayLatestEventForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this submit replay latest event forbidden response a status code equal to that given
func (o *SubmitReplayLatestEventForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the submit replay latest event forbidden response
func (o *SubmitReplayLatestEventForbidden) Code() int {
	return 403
}

func (o *SubmitReplayLatestEventForbidden) Error() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventForbidden ", 403)
}

func (o *SubmitReplayLatestEventForbidden) String() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventForbidden ", 403)
}

func (o *SubmitReplayLatestEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayLatestEventNotFound creates a SubmitReplayLatestEventNotFound with default headers values
func NewSubmitReplayLatestEventNotFound() *SubmitReplayLatestEventNotFound {
	return &SubmitReplayLatestEventNotFound{}
}

/*
SubmitReplayLatestEventNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type SubmitReplayLatestEventNotFound struct {
}

// IsSuccess returns true when this submit replay latest event not found response has a 2xx status code
func (o *SubmitReplayLatestEventNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit replay latest event not found response has a 3xx status code
func (o *SubmitReplayLatestEventNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit replay latest event not found response has a 4xx status code
func (o *SubmitReplayLatestEventNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit replay latest event not found response has a 5xx status code
func (o *SubmitReplayLatestEventNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this submit replay latest event not found response a status code equal to that given
func (o *SubmitReplayLatestEventNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the submit replay latest event not found response
func (o *SubmitReplayLatestEventNotFound) Code() int {
	return 404
}

func (o *SubmitReplayLatestEventNotFound) Error() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventNotFound ", 404)
}

func (o *SubmitReplayLatestEventNotFound) String() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventNotFound ", 404)
}

func (o *SubmitReplayLatestEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitReplayLatestEventConflict creates a SubmitReplayLatestEventConflict with default headers values
func NewSubmitReplayLatestEventConflict() *SubmitReplayLatestEventConflict {
	return &SubmitReplayLatestEventConflict{}
}

/*
SubmitReplayLatestEventConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type SubmitReplayLatestEventConflict struct {
}

// IsSuccess returns true when this submit replay latest event conflict response has a 2xx status code
func (o *SubmitReplayLatestEventConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit replay latest event conflict response has a 3xx status code
func (o *SubmitReplayLatestEventConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit replay latest event conflict response has a 4xx status code
func (o *SubmitReplayLatestEventConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit replay latest event conflict response has a 5xx status code
func (o *SubmitReplayLatestEventConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this submit replay latest event conflict response a status code equal to that given
func (o *SubmitReplayLatestEventConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the submit replay latest event conflict response
func (o *SubmitReplayLatestEventConflict) Code() int {
	return 409
}

func (o *SubmitReplayLatestEventConflict) Error() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventConflict ", 409)
}

func (o *SubmitReplayLatestEventConflict) String() string {
	return fmt.Sprintf("[POST /provenance-events/latest/replays][%d] submitReplayLatestEventConflict ", 409)
}

func (o *SubmitReplayLatestEventConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

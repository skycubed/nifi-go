// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new flow API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flow API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateControllerServices(params *ActivateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateControllerServicesOK, error)

	GenerateClientID(params *GenerateClientIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateClientIDOK, error)

	GetAboutInfo(params *GetAboutInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAboutInfoOK, error)

	GetAction(params *GetActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActionOK, error)

	GetBanners(params *GetBannersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBannersOK, error)

	GetBuckets(params *GetBucketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBucketsOK, error)

	GetBulletinBoard(params *GetBulletinBoardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBulletinBoardOK, error)

	GetBulletins(params *GetBulletinsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBulletinsOK, error)

	GetClusterSummary(params *GetClusterSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterSummaryOK, error)

	GetComponentHistory(params *GetComponentHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComponentHistoryOK, error)

	GetConnectionStatistics(params *GetConnectionStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionStatisticsOK, error)

	GetConnectionStatus(params *GetConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionStatusOK, error)

	GetConnectionStatusHistory(params *GetConnectionStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionStatusHistoryOK, error)

	GetControllerServiceTypes(params *GetControllerServiceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerServiceTypesOK, error)

	GetControllerServicesFromController(params *GetControllerServicesFromControllerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerServicesFromControllerOK, error)

	GetControllerServicesFromGroup(params *GetControllerServicesFromGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerServicesFromGroupOK, error)

	GetControllerStatus(params *GetControllerStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerStatusOK, error)

	GetCurrentUser(params *GetCurrentUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserOK, error)

	GetFlow(params *GetFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowOK, error)

	GetFlowConfig(params *GetFlowConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowConfigOK, error)

	GetFlowMetrics(params *GetFlowMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowMetricsOK, error)

	GetFlows(params *GetFlowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowsOK, error)

	GetInputPortStatus(params *GetInputPortStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInputPortStatusOK, error)

	GetOutputPortStatus(params *GetOutputPortStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputPortStatusOK, error)

	GetParameterContexts(params *GetParameterContextsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterContextsOK, error)

	GetPrioritizers(params *GetPrioritizersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPrioritizersOK, error)

	GetProcessGroupStatus(params *GetProcessGroupStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupStatusOK, error)

	GetProcessGroupStatusHistory(params *GetProcessGroupStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupStatusHistoryOK, error)

	GetProcessorStatus(params *GetProcessorStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorStatusOK, error)

	GetProcessorStatusHistory(params *GetProcessorStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorStatusHistoryOK, error)

	GetProcessorTypes(params *GetProcessorTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorTypesOK, error)

	GetRegistries(params *GetRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegistriesOK, error)

	GetRemoteProcessGroupStatus(params *GetRemoteProcessGroupStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteProcessGroupStatusOK, error)

	GetRemoteProcessGroupStatusHistory(params *GetRemoteProcessGroupStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteProcessGroupStatusHistoryOK, error)

	GetReportingTaskTypes(params *GetReportingTaskTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportingTaskTypesOK, error)

	GetReportingTasks(params *GetReportingTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportingTasksOK, error)

	GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplatesOK, error)

	GetVersions(params *GetVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsOK, error)

	QueryHistory(params *QueryHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryHistoryOK, error)

	ScheduleComponents(params *ScheduleComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScheduleComponentsOK, error)

	SearchCluster(params *SearchClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchClusterOK, error)

	SearchFlow(params *SearchFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchFlowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActivateControllerServices enables or disable controller services in the specified process group
*/
func (a *Client) ActivateControllerServices(params *ActivateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateControllerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateControllerServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "activateControllerServices",
		Method:             "PUT",
		PathPattern:        "/flow/process-groups/{id}/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActivateControllerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateControllerServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for activateControllerServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateClientID generates a client id
*/
func (a *Client) GenerateClientID(params *GenerateClientIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateClientIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateClientIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateClientId",
		Method:             "GET",
		PathPattern:        "/flow/client-id",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateClientIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateClientId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAboutInfo retrieves details about this ni fi to put in the about dialog
*/
func (a *Client) GetAboutInfo(params *GetAboutInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAboutInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAboutInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAboutInfo",
		Method:             "GET",
		PathPattern:        "/flow/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAboutInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAboutInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAboutInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAction gets an action

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetAction(params *GetActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAction",
		Method:             "GET",
		PathPattern:        "/flow/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBanners retrieves the banners for this ni fi
*/
func (a *Client) GetBanners(params *GetBannersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBannersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBannersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBanners",
		Method:             "GET",
		PathPattern:        "/flow/banners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBannersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBannersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBanners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuckets gets the buckets from the specified registry for the current user
*/
func (a *Client) GetBuckets(params *GetBucketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBucketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuckets",
		Method:             "GET",
		PathPattern:        "/flow/registries/{id}/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBucketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBucketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuckets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBulletinBoard gets current bulletins
*/
func (a *Client) GetBulletinBoard(params *GetBulletinBoardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBulletinBoardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBulletinBoardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBulletinBoard",
		Method:             "GET",
		PathPattern:        "/flow/bulletin-board",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBulletinBoardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBulletinBoardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBulletinBoard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBulletins retrieves controller level bulletins
*/
func (a *Client) GetBulletins(params *GetBulletinsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBulletinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBulletinsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBulletins",
		Method:             "GET",
		PathPattern:        "/flow/controller/bulletins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBulletinsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBulletinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBulletins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterSummary thes cluster summary for this ni fi
*/
func (a *Client) GetClusterSummary(params *GetClusterSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterSummary",
		Method:             "GET",
		PathPattern:        "/flow/cluster/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetComponentHistory gets configuration history for a component

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetComponentHistory(params *GetComponentHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComponentHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComponentHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getComponentHistory",
		Method:             "GET",
		PathPattern:        "/flow/history/components/{componentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetComponentHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComponentHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getComponentHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConnectionStatistics gets statistics for a connection
*/
func (a *Client) GetConnectionStatistics(params *GetConnectionStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnectionStatistics",
		Method:             "GET",
		PathPattern:        "/flow/connections/{id}/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectionStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnectionStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConnectionStatus gets status for a connection
*/
func (a *Client) GetConnectionStatus(params *GetConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnectionStatus",
		Method:             "GET",
		PathPattern:        "/flow/connections/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnectionStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConnectionStatusHistory gets the status history for a connection
*/
func (a *Client) GetConnectionStatusHistory(params *GetConnectionStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectionStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionStatusHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnectionStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/connections/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectionStatusHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnectionStatusHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerServiceTypes retrieves the types of controller services that this ni fi supports

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetControllerServiceTypes(params *GetControllerServiceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerServiceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServiceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getControllerServiceTypes",
		Method:             "GET",
		PathPattern:        "/flow/controller-service-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServiceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerServiceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerServiceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerServicesFromController gets controller services for reporting tasks
*/
func (a *Client) GetControllerServicesFromController(params *GetControllerServicesFromControllerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerServicesFromControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServicesFromControllerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getControllerServicesFromController",
		Method:             "GET",
		PathPattern:        "/flow/controller/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServicesFromControllerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerServicesFromControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerServicesFromController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerServicesFromGroup gets all controller services
*/
func (a *Client) GetControllerServicesFromGroup(params *GetControllerServicesFromGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerServicesFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServicesFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getControllerServicesFromGroup",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServicesFromGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerServicesFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerServicesFromGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerStatus gets the current status of this ni fi
*/
func (a *Client) GetControllerStatus(params *GetControllerStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getControllerStatus",
		Method:             "GET",
		PathPattern:        "/flow/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentUser retrieves the user identity of the user making the request
*/
func (a *Client) GetCurrentUser(params *GetCurrentUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentUser",
		Method:             "GET",
		PathPattern:        "/flow/current-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCurrentUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFlow gets a process group

  If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
*/
func (a *Client) GetFlow(params *GetFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlow",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFlowConfig retrieves the configuration for this ni fi flow
*/
func (a *Client) GetFlowConfig(params *GetFlowConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlowConfig",
		Method:             "GET",
		PathPattern:        "/flow/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlowConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFlowMetrics gets all metrics for the flow from a particular node
*/
func (a *Client) GetFlowMetrics(params *GetFlowMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlowMetrics",
		Method:             "GET",
		PathPattern:        "/flow/metrics/{producer}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlowMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFlows gets the flows from the specified registry and bucket for the current user
*/
func (a *Client) GetFlows(params *GetFlowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFlows",
		Method:             "GET",
		PathPattern:        "/flow/registries/{registry-id}/buckets/{bucket-id}/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInputPortStatus gets status for an input port
*/
func (a *Client) GetInputPortStatus(params *GetInputPortStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInputPortStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInputPortStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInputPortStatus",
		Method:             "GET",
		PathPattern:        "/flow/input-ports/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInputPortStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInputPortStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInputPortStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOutputPortStatus gets status for an output port
*/
func (a *Client) GetOutputPortStatus(params *GetOutputPortStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputPortStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputPortStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputPortStatus",
		Method:             "GET",
		PathPattern:        "/flow/output-ports/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutputPortStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputPortStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputPortStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParameterContexts gets all parameter contexts
*/
func (a *Client) GetParameterContexts(params *GetParameterContextsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterContextsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterContextsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getParameterContexts",
		Method:             "GET",
		PathPattern:        "/flow/parameter-contexts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterContextsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterContextsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterContexts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrioritizers retrieves the types of prioritizers that this ni fi supports

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetPrioritizers(params *GetPrioritizersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPrioritizersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrioritizersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPrioritizers",
		Method:             "GET",
		PathPattern:        "/flow/prioritizers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrioritizersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrioritizersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPrioritizers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessGroupStatus gets the status for a process group

  The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
*/
func (a *Client) GetProcessGroupStatus(params *GetProcessGroupStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessGroupStatus",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessGroupStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessGroupStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessGroupStatusHistory gets status history for a remote process group
*/
func (a *Client) GetProcessGroupStatusHistory(params *GetProcessGroupStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessGroupStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupStatusHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessGroupStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessGroupStatusHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessGroupStatusHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorStatus gets status for a processor
*/
func (a *Client) GetProcessorStatus(params *GetProcessorStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessorStatus",
		Method:             "GET",
		PathPattern:        "/flow/processors/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorStatusHistory gets status history for a processor
*/
func (a *Client) GetProcessorStatusHistory(params *GetProcessorStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorStatusHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessorStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/processors/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorStatusHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorStatusHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorTypes retrieves the types of processors that this ni fi supports

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetProcessorTypes(params *GetProcessorTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessorTypes",
		Method:             "GET",
		PathPattern:        "/flow/processor-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegistries gets the listing of available registries
*/
func (a *Client) GetRegistries(params *GetRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegistries",
		Method:             "GET",
		PathPattern:        "/flow/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRemoteProcessGroupStatus gets status for a remote process group
*/
func (a *Client) GetRemoteProcessGroupStatus(params *GetRemoteProcessGroupStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteProcessGroupStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRemoteProcessGroupStatus",
		Method:             "GET",
		PathPattern:        "/flow/remote-process-groups/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteProcessGroupStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteProcessGroupStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRemoteProcessGroupStatusHistory gets the status history
*/
func (a *Client) GetRemoteProcessGroupStatusHistory(params *GetRemoteProcessGroupStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteProcessGroupStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupStatusHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRemoteProcessGroupStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/remote-process-groups/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteProcessGroupStatusHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteProcessGroupStatusHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportingTaskTypes retrieves the types of reporting tasks that this ni fi supports

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetReportingTaskTypes(params *GetReportingTaskTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportingTaskTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportingTaskTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReportingTaskTypes",
		Method:             "GET",
		PathPattern:        "/flow/reporting-task-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReportingTaskTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportingTaskTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportingTaskTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportingTasks gets all reporting tasks
*/
func (a *Client) GetReportingTasks(params *GetReportingTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportingTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportingTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReportingTasks",
		Method:             "GET",
		PathPattern:        "/flow/reporting-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReportingTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportingTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportingTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTemplates gets all templates
*/
func (a *Client) GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTemplates",
		Method:             "GET",
		PathPattern:        "/flow/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVersions gets the flow versions from the specified registry and bucket for the specified flow for the current user
*/
func (a *Client) GetVersions(params *GetVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersions",
		Method:             "GET",
		PathPattern:        "/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryHistory gets configuration history

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) QueryHistory(params *QueryHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryHistory",
		Method:             "GET",
		PathPattern:        "/flow/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduleComponents schedules or unschedule components in the specified process group
*/
func (a *Client) ScheduleComponents(params *ScheduleComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScheduleComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scheduleComponents",
		Method:             "PUT",
		PathPattern:        "/flow/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduleComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchCluster searches the cluster for a node with the specified address

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SearchCluster(params *SearchClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCluster",
		Method:             "GET",
		PathPattern:        "/flow/cluster/search-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchFlow performs a search against this ni fi using the specified search term

  Only search results from authorized components will be returned.
*/
func (a *Client) SearchFlow(params *SearchFlowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchFlow",
		Method:             "GET",
		PathPattern:        "/flow/search-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

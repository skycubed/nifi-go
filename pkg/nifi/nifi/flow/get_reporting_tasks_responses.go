// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetReportingTasksReader is a Reader for the GetReportingTasks structure.
type GetReportingTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportingTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportingTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportingTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReportingTasksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportingTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetReportingTasksConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /flow/reporting-tasks] getReportingTasks", response, response.Code())
	}
}

// NewGetReportingTasksOK creates a GetReportingTasksOK with default headers values
func NewGetReportingTasksOK() *GetReportingTasksOK {
	return &GetReportingTasksOK{}
}

/*
GetReportingTasksOK describes a response with status code 200, with default header values.

successful operation
*/
type GetReportingTasksOK struct {
	Payload *models.ReportingTasksEntity
}

// IsSuccess returns true when this get reporting tasks o k response has a 2xx status code
func (o *GetReportingTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get reporting tasks o k response has a 3xx status code
func (o *GetReportingTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting tasks o k response has a 4xx status code
func (o *GetReportingTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get reporting tasks o k response has a 5xx status code
func (o *GetReportingTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting tasks o k response a status code equal to that given
func (o *GetReportingTasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get reporting tasks o k response
func (o *GetReportingTasksOK) Code() int {
	return 200
}

func (o *GetReportingTasksOK) Error() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksOK  %+v", 200, o.Payload)
}

func (o *GetReportingTasksOK) String() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksOK  %+v", 200, o.Payload)
}

func (o *GetReportingTasksOK) GetPayload() *models.ReportingTasksEntity {
	return o.Payload
}

func (o *GetReportingTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTasksEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportingTasksBadRequest creates a GetReportingTasksBadRequest with default headers values
func NewGetReportingTasksBadRequest() *GetReportingTasksBadRequest {
	return &GetReportingTasksBadRequest{}
}

/*
GetReportingTasksBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetReportingTasksBadRequest struct {
}

// IsSuccess returns true when this get reporting tasks bad request response has a 2xx status code
func (o *GetReportingTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting tasks bad request response has a 3xx status code
func (o *GetReportingTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting tasks bad request response has a 4xx status code
func (o *GetReportingTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting tasks bad request response has a 5xx status code
func (o *GetReportingTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting tasks bad request response a status code equal to that given
func (o *GetReportingTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get reporting tasks bad request response
func (o *GetReportingTasksBadRequest) Code() int {
	return 400
}

func (o *GetReportingTasksBadRequest) Error() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksBadRequest ", 400)
}

func (o *GetReportingTasksBadRequest) String() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksBadRequest ", 400)
}

func (o *GetReportingTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTasksUnauthorized creates a GetReportingTasksUnauthorized with default headers values
func NewGetReportingTasksUnauthorized() *GetReportingTasksUnauthorized {
	return &GetReportingTasksUnauthorized{}
}

/*
GetReportingTasksUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetReportingTasksUnauthorized struct {
}

// IsSuccess returns true when this get reporting tasks unauthorized response has a 2xx status code
func (o *GetReportingTasksUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting tasks unauthorized response has a 3xx status code
func (o *GetReportingTasksUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting tasks unauthorized response has a 4xx status code
func (o *GetReportingTasksUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting tasks unauthorized response has a 5xx status code
func (o *GetReportingTasksUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting tasks unauthorized response a status code equal to that given
func (o *GetReportingTasksUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get reporting tasks unauthorized response
func (o *GetReportingTasksUnauthorized) Code() int {
	return 401
}

func (o *GetReportingTasksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksUnauthorized ", 401)
}

func (o *GetReportingTasksUnauthorized) String() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksUnauthorized ", 401)
}

func (o *GetReportingTasksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTasksForbidden creates a GetReportingTasksForbidden with default headers values
func NewGetReportingTasksForbidden() *GetReportingTasksForbidden {
	return &GetReportingTasksForbidden{}
}

/*
GetReportingTasksForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetReportingTasksForbidden struct {
}

// IsSuccess returns true when this get reporting tasks forbidden response has a 2xx status code
func (o *GetReportingTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting tasks forbidden response has a 3xx status code
func (o *GetReportingTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting tasks forbidden response has a 4xx status code
func (o *GetReportingTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting tasks forbidden response has a 5xx status code
func (o *GetReportingTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting tasks forbidden response a status code equal to that given
func (o *GetReportingTasksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get reporting tasks forbidden response
func (o *GetReportingTasksForbidden) Code() int {
	return 403
}

func (o *GetReportingTasksForbidden) Error() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksForbidden ", 403)
}

func (o *GetReportingTasksForbidden) String() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksForbidden ", 403)
}

func (o *GetReportingTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReportingTasksConflict creates a GetReportingTasksConflict with default headers values
func NewGetReportingTasksConflict() *GetReportingTasksConflict {
	return &GetReportingTasksConflict{}
}

/*
GetReportingTasksConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetReportingTasksConflict struct {
}

// IsSuccess returns true when this get reporting tasks conflict response has a 2xx status code
func (o *GetReportingTasksConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reporting tasks conflict response has a 3xx status code
func (o *GetReportingTasksConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reporting tasks conflict response has a 4xx status code
func (o *GetReportingTasksConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reporting tasks conflict response has a 5xx status code
func (o *GetReportingTasksConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get reporting tasks conflict response a status code equal to that given
func (o *GetReportingTasksConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get reporting tasks conflict response
func (o *GetReportingTasksConflict) Code() int {
	return 409
}

func (o *GetReportingTasksConflict) Error() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksConflict ", 409)
}

func (o *GetReportingTasksConflict) String() string {
	return fmt.Sprintf("[GET /flow/reporting-tasks][%d] getReportingTasksConflict ", 409)
}

func (o *GetReportingTasksConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

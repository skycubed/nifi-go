// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// QueryHistoryReader is a Reader for the QueryHistory structure.
type QueryHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewQueryHistoryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /flow/history] queryHistory", response, response.Code())
	}
}

// NewQueryHistoryOK creates a QueryHistoryOK with default headers values
func NewQueryHistoryOK() *QueryHistoryOK {
	return &QueryHistoryOK{}
}

/*
QueryHistoryOK describes a response with status code 200, with default header values.

successful operation
*/
type QueryHistoryOK struct {
	Payload *models.HistoryEntity
}

// IsSuccess returns true when this query history o k response has a 2xx status code
func (o *QueryHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query history o k response has a 3xx status code
func (o *QueryHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query history o k response has a 4xx status code
func (o *QueryHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query history o k response has a 5xx status code
func (o *QueryHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query history o k response a status code equal to that given
func (o *QueryHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query history o k response
func (o *QueryHistoryOK) Code() int {
	return 200
}

func (o *QueryHistoryOK) Error() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryOK  %+v", 200, o.Payload)
}

func (o *QueryHistoryOK) String() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryOK  %+v", 200, o.Payload)
}

func (o *QueryHistoryOK) GetPayload() *models.HistoryEntity {
	return o.Payload
}

func (o *QueryHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HistoryEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryHistoryBadRequest creates a QueryHistoryBadRequest with default headers values
func NewQueryHistoryBadRequest() *QueryHistoryBadRequest {
	return &QueryHistoryBadRequest{}
}

/*
QueryHistoryBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type QueryHistoryBadRequest struct {
}

// IsSuccess returns true when this query history bad request response has a 2xx status code
func (o *QueryHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query history bad request response has a 3xx status code
func (o *QueryHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query history bad request response has a 4xx status code
func (o *QueryHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query history bad request response has a 5xx status code
func (o *QueryHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query history bad request response a status code equal to that given
func (o *QueryHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query history bad request response
func (o *QueryHistoryBadRequest) Code() int {
	return 400
}

func (o *QueryHistoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryBadRequest ", 400)
}

func (o *QueryHistoryBadRequest) String() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryBadRequest ", 400)
}

func (o *QueryHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewQueryHistoryUnauthorized creates a QueryHistoryUnauthorized with default headers values
func NewQueryHistoryUnauthorized() *QueryHistoryUnauthorized {
	return &QueryHistoryUnauthorized{}
}

/*
QueryHistoryUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type QueryHistoryUnauthorized struct {
}

// IsSuccess returns true when this query history unauthorized response has a 2xx status code
func (o *QueryHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query history unauthorized response has a 3xx status code
func (o *QueryHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query history unauthorized response has a 4xx status code
func (o *QueryHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this query history unauthorized response has a 5xx status code
func (o *QueryHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this query history unauthorized response a status code equal to that given
func (o *QueryHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the query history unauthorized response
func (o *QueryHistoryUnauthorized) Code() int {
	return 401
}

func (o *QueryHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryUnauthorized ", 401)
}

func (o *QueryHistoryUnauthorized) String() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryUnauthorized ", 401)
}

func (o *QueryHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewQueryHistoryForbidden creates a QueryHistoryForbidden with default headers values
func NewQueryHistoryForbidden() *QueryHistoryForbidden {
	return &QueryHistoryForbidden{}
}

/*
QueryHistoryForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type QueryHistoryForbidden struct {
}

// IsSuccess returns true when this query history forbidden response has a 2xx status code
func (o *QueryHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query history forbidden response has a 3xx status code
func (o *QueryHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query history forbidden response has a 4xx status code
func (o *QueryHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query history forbidden response has a 5xx status code
func (o *QueryHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query history forbidden response a status code equal to that given
func (o *QueryHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query history forbidden response
func (o *QueryHistoryForbidden) Code() int {
	return 403
}

func (o *QueryHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryForbidden ", 403)
}

func (o *QueryHistoryForbidden) String() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryForbidden ", 403)
}

func (o *QueryHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewQueryHistoryConflict creates a QueryHistoryConflict with default headers values
func NewQueryHistoryConflict() *QueryHistoryConflict {
	return &QueryHistoryConflict{}
}

/*
QueryHistoryConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type QueryHistoryConflict struct {
}

// IsSuccess returns true when this query history conflict response has a 2xx status code
func (o *QueryHistoryConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query history conflict response has a 3xx status code
func (o *QueryHistoryConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query history conflict response has a 4xx status code
func (o *QueryHistoryConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this query history conflict response has a 5xx status code
func (o *QueryHistoryConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this query history conflict response a status code equal to that given
func (o *QueryHistoryConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the query history conflict response
func (o *QueryHistoryConflict) Code() int {
	return 409
}

func (o *QueryHistoryConflict) Error() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryConflict ", 409)
}

func (o *QueryHistoryConflict) String() string {
	return fmt.Sprintf("[GET /flow/history][%d] queryHistoryConflict ", 409)
}

func (o *QueryHistoryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

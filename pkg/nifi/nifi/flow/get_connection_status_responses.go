// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetConnectionStatusReader is a Reader for the GetConnectionStatus structure.
type GetConnectionStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConnectionStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConnectionStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetConnectionStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConnectionStatusOK creates a GetConnectionStatusOK with default headers values
func NewGetConnectionStatusOK() *GetConnectionStatusOK {
	return &GetConnectionStatusOK{}
}

/*
GetConnectionStatusOK describes a response with status code 200, with default header values.

successful operation
*/
type GetConnectionStatusOK struct {
	Payload *models.ConnectionStatusEntity
}

// IsSuccess returns true when this get connection status o k response has a 2xx status code
func (o *GetConnectionStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get connection status o k response has a 3xx status code
func (o *GetConnectionStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status o k response has a 4xx status code
func (o *GetConnectionStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connection status o k response has a 5xx status code
func (o *GetConnectionStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status o k response a status code equal to that given
func (o *GetConnectionStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetConnectionStatusOK) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusOK  %+v", 200, o.Payload)
}

func (o *GetConnectionStatusOK) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusOK  %+v", 200, o.Payload)
}

func (o *GetConnectionStatusOK) GetPayload() *models.ConnectionStatusEntity {
	return o.Payload
}

func (o *GetConnectionStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionStatusEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionStatusBadRequest creates a GetConnectionStatusBadRequest with default headers values
func NewGetConnectionStatusBadRequest() *GetConnectionStatusBadRequest {
	return &GetConnectionStatusBadRequest{}
}

/*
GetConnectionStatusBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetConnectionStatusBadRequest struct {
}

// IsSuccess returns true when this get connection status bad request response has a 2xx status code
func (o *GetConnectionStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status bad request response has a 3xx status code
func (o *GetConnectionStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status bad request response has a 4xx status code
func (o *GetConnectionStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status bad request response has a 5xx status code
func (o *GetConnectionStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status bad request response a status code equal to that given
func (o *GetConnectionStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetConnectionStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusBadRequest ", 400)
}

func (o *GetConnectionStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusBadRequest ", 400)
}

func (o *GetConnectionStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusUnauthorized creates a GetConnectionStatusUnauthorized with default headers values
func NewGetConnectionStatusUnauthorized() *GetConnectionStatusUnauthorized {
	return &GetConnectionStatusUnauthorized{}
}

/*
GetConnectionStatusUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetConnectionStatusUnauthorized struct {
}

// IsSuccess returns true when this get connection status unauthorized response has a 2xx status code
func (o *GetConnectionStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status unauthorized response has a 3xx status code
func (o *GetConnectionStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status unauthorized response has a 4xx status code
func (o *GetConnectionStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status unauthorized response has a 5xx status code
func (o *GetConnectionStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status unauthorized response a status code equal to that given
func (o *GetConnectionStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetConnectionStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusUnauthorized ", 401)
}

func (o *GetConnectionStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusUnauthorized ", 401)
}

func (o *GetConnectionStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusForbidden creates a GetConnectionStatusForbidden with default headers values
func NewGetConnectionStatusForbidden() *GetConnectionStatusForbidden {
	return &GetConnectionStatusForbidden{}
}

/*
GetConnectionStatusForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetConnectionStatusForbidden struct {
}

// IsSuccess returns true when this get connection status forbidden response has a 2xx status code
func (o *GetConnectionStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status forbidden response has a 3xx status code
func (o *GetConnectionStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status forbidden response has a 4xx status code
func (o *GetConnectionStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status forbidden response has a 5xx status code
func (o *GetConnectionStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status forbidden response a status code equal to that given
func (o *GetConnectionStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetConnectionStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusForbidden ", 403)
}

func (o *GetConnectionStatusForbidden) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusForbidden ", 403)
}

func (o *GetConnectionStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusNotFound creates a GetConnectionStatusNotFound with default headers values
func NewGetConnectionStatusNotFound() *GetConnectionStatusNotFound {
	return &GetConnectionStatusNotFound{}
}

/*
GetConnectionStatusNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetConnectionStatusNotFound struct {
}

// IsSuccess returns true when this get connection status not found response has a 2xx status code
func (o *GetConnectionStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status not found response has a 3xx status code
func (o *GetConnectionStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status not found response has a 4xx status code
func (o *GetConnectionStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status not found response has a 5xx status code
func (o *GetConnectionStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status not found response a status code equal to that given
func (o *GetConnectionStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetConnectionStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusNotFound ", 404)
}

func (o *GetConnectionStatusNotFound) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusNotFound ", 404)
}

func (o *GetConnectionStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusConflict creates a GetConnectionStatusConflict with default headers values
func NewGetConnectionStatusConflict() *GetConnectionStatusConflict {
	return &GetConnectionStatusConflict{}
}

/*
GetConnectionStatusConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetConnectionStatusConflict struct {
}

// IsSuccess returns true when this get connection status conflict response has a 2xx status code
func (o *GetConnectionStatusConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status conflict response has a 3xx status code
func (o *GetConnectionStatusConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status conflict response has a 4xx status code
func (o *GetConnectionStatusConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status conflict response has a 5xx status code
func (o *GetConnectionStatusConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status conflict response a status code equal to that given
func (o *GetConnectionStatusConflict) IsCode(code int) bool {
	return code == 409
}

func (o *GetConnectionStatusConflict) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusConflict ", 409)
}

func (o *GetConnectionStatusConflict) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status][%d] getConnectionStatusConflict ", 409)
}

func (o *GetConnectionStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

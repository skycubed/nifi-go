// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInputPortStatusParams creates a new GetInputPortStatusParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInputPortStatusParams() *GetInputPortStatusParams {
	return &GetInputPortStatusParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInputPortStatusParamsWithTimeout creates a new GetInputPortStatusParams object
// with the ability to set a timeout on a request.
func NewGetInputPortStatusParamsWithTimeout(timeout time.Duration) *GetInputPortStatusParams {
	return &GetInputPortStatusParams{
		timeout: timeout,
	}
}

// NewGetInputPortStatusParamsWithContext creates a new GetInputPortStatusParams object
// with the ability to set a context for a request.
func NewGetInputPortStatusParamsWithContext(ctx context.Context) *GetInputPortStatusParams {
	return &GetInputPortStatusParams{
		Context: ctx,
	}
}

// NewGetInputPortStatusParamsWithHTTPClient creates a new GetInputPortStatusParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInputPortStatusParamsWithHTTPClient(client *http.Client) *GetInputPortStatusParams {
	return &GetInputPortStatusParams{
		HTTPClient: client,
	}
}

/*
GetInputPortStatusParams contains all the parameters to send to the API endpoint

	for the get input port status operation.

	Typically these are written to a http.Request.
*/
type GetInputPortStatusParams struct {

	/* ClusterNodeID.

	   The id of the node where to get the status.
	*/
	ClusterNodeID *string

	/* ID.

	   The input port id.
	*/
	ID string

	/* Nodewise.

	   Whether or not to include the breakdown per node. Optional, defaults to false
	*/
	Nodewise *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get input port status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInputPortStatusParams) WithDefaults() *GetInputPortStatusParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get input port status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInputPortStatusParams) SetDefaults() {
	var (
		nodewiseDefault = bool(false)
	)

	val := GetInputPortStatusParams{
		Nodewise: &nodewiseDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get input port status params
func (o *GetInputPortStatusParams) WithTimeout(timeout time.Duration) *GetInputPortStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get input port status params
func (o *GetInputPortStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get input port status params
func (o *GetInputPortStatusParams) WithContext(ctx context.Context) *GetInputPortStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get input port status params
func (o *GetInputPortStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get input port status params
func (o *GetInputPortStatusParams) WithHTTPClient(client *http.Client) *GetInputPortStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get input port status params
func (o *GetInputPortStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterNodeID adds the clusterNodeID to the get input port status params
func (o *GetInputPortStatusParams) WithClusterNodeID(clusterNodeID *string) *GetInputPortStatusParams {
	o.SetClusterNodeID(clusterNodeID)
	return o
}

// SetClusterNodeID adds the clusterNodeId to the get input port status params
func (o *GetInputPortStatusParams) SetClusterNodeID(clusterNodeID *string) {
	o.ClusterNodeID = clusterNodeID
}

// WithID adds the id to the get input port status params
func (o *GetInputPortStatusParams) WithID(id string) *GetInputPortStatusParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get input port status params
func (o *GetInputPortStatusParams) SetID(id string) {
	o.ID = id
}

// WithNodewise adds the nodewise to the get input port status params
func (o *GetInputPortStatusParams) WithNodewise(nodewise *bool) *GetInputPortStatusParams {
	o.SetNodewise(nodewise)
	return o
}

// SetNodewise adds the nodewise to the get input port status params
func (o *GetInputPortStatusParams) SetNodewise(nodewise *bool) {
	o.Nodewise = nodewise
}

// WriteToRequest writes these params to a swagger request
func (o *GetInputPortStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterNodeID != nil {

		// query param clusterNodeId
		var qrClusterNodeID string

		if o.ClusterNodeID != nil {
			qrClusterNodeID = *o.ClusterNodeID
		}
		qClusterNodeID := qrClusterNodeID
		if qClusterNodeID != "" {

			if err := r.SetQueryParam("clusterNodeId", qClusterNodeID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Nodewise != nil {

		// query param nodewise
		var qrNodewise bool

		if o.Nodewise != nil {
			qrNodewise = *o.Nodewise
		}
		qNodewise := swag.FormatBool(qrNodewise)
		if qNodewise != "" {

			if err := r.SetQueryParam("nodewise", qNodewise); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetControllerServicesFromControllerParams creates a new GetControllerServicesFromControllerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetControllerServicesFromControllerParams() *GetControllerServicesFromControllerParams {
	return &GetControllerServicesFromControllerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetControllerServicesFromControllerParamsWithTimeout creates a new GetControllerServicesFromControllerParams object
// with the ability to set a timeout on a request.
func NewGetControllerServicesFromControllerParamsWithTimeout(timeout time.Duration) *GetControllerServicesFromControllerParams {
	return &GetControllerServicesFromControllerParams{
		timeout: timeout,
	}
}

// NewGetControllerServicesFromControllerParamsWithContext creates a new GetControllerServicesFromControllerParams object
// with the ability to set a context for a request.
func NewGetControllerServicesFromControllerParamsWithContext(ctx context.Context) *GetControllerServicesFromControllerParams {
	return &GetControllerServicesFromControllerParams{
		Context: ctx,
	}
}

// NewGetControllerServicesFromControllerParamsWithHTTPClient creates a new GetControllerServicesFromControllerParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetControllerServicesFromControllerParamsWithHTTPClient(client *http.Client) *GetControllerServicesFromControllerParams {
	return &GetControllerServicesFromControllerParams{
		HTTPClient: client,
	}
}

/*
GetControllerServicesFromControllerParams contains all the parameters to send to the API endpoint

	for the get controller services from controller operation.

	Typically these are written to a http.Request.
*/
type GetControllerServicesFromControllerParams struct {

	/* IncludeReferencingComponents.

	   Whether or not to include services' referencing components in the response

	   Default: true
	*/
	IncludeReferencingComponents *bool

	// UIOnly.
	UIOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get controller services from controller params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetControllerServicesFromControllerParams) WithDefaults() *GetControllerServicesFromControllerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get controller services from controller params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetControllerServicesFromControllerParams) SetDefaults() {
	var (
		includeReferencingComponentsDefault = bool(true)

		uIOnlyDefault = bool(false)
	)

	val := GetControllerServicesFromControllerParams{
		IncludeReferencingComponents: &includeReferencingComponentsDefault,
		UIOnly:                       &uIOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) WithTimeout(timeout time.Duration) *GetControllerServicesFromControllerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) WithContext(ctx context.Context) *GetControllerServicesFromControllerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) WithHTTPClient(client *http.Client) *GetControllerServicesFromControllerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeReferencingComponents adds the includeReferencingComponents to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) WithIncludeReferencingComponents(includeReferencingComponents *bool) *GetControllerServicesFromControllerParams {
	o.SetIncludeReferencingComponents(includeReferencingComponents)
	return o
}

// SetIncludeReferencingComponents adds the includeReferencingComponents to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) SetIncludeReferencingComponents(includeReferencingComponents *bool) {
	o.IncludeReferencingComponents = includeReferencingComponents
}

// WithUIOnly adds the uIOnly to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) WithUIOnly(uIOnly *bool) *GetControllerServicesFromControllerParams {
	o.SetUIOnly(uIOnly)
	return o
}

// SetUIOnly adds the uiOnly to the get controller services from controller params
func (o *GetControllerServicesFromControllerParams) SetUIOnly(uIOnly *bool) {
	o.UIOnly = uIOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetControllerServicesFromControllerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeReferencingComponents != nil {

		// query param includeReferencingComponents
		var qrIncludeReferencingComponents bool

		if o.IncludeReferencingComponents != nil {
			qrIncludeReferencingComponents = *o.IncludeReferencingComponents
		}
		qIncludeReferencingComponents := swag.FormatBool(qrIncludeReferencingComponents)
		if qIncludeReferencingComponents != "" {

			if err := r.SetQueryParam("includeReferencingComponents", qIncludeReferencingComponents); err != nil {
				return err
			}
		}
	}

	if o.UIOnly != nil {

		// query param uiOnly
		var qrUIOnly bool

		if o.UIOnly != nil {
			qrUIOnly = *o.UIOnly
		}
		qUIOnly := swag.FormatBool(qrUIOnly)
		if qUIOnly != "" {

			if err := r.SetQueryParam("uiOnly", qUIOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

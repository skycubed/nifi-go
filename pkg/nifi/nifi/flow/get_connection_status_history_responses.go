// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetConnectionStatusHistoryReader is a Reader for the GetConnectionStatusHistory structure.
type GetConnectionStatusHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionStatusHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionStatusHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionStatusHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConnectionStatusHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionStatusHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConnectionStatusHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetConnectionStatusHistoryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /flow/connections/{id}/status/history] getConnectionStatusHistory", response, response.Code())
	}
}

// NewGetConnectionStatusHistoryOK creates a GetConnectionStatusHistoryOK with default headers values
func NewGetConnectionStatusHistoryOK() *GetConnectionStatusHistoryOK {
	return &GetConnectionStatusHistoryOK{}
}

/*
GetConnectionStatusHistoryOK describes a response with status code 200, with default header values.

successful operation
*/
type GetConnectionStatusHistoryOK struct {
	Payload *models.StatusHistoryEntity
}

// IsSuccess returns true when this get connection status history o k response has a 2xx status code
func (o *GetConnectionStatusHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get connection status history o k response has a 3xx status code
func (o *GetConnectionStatusHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status history o k response has a 4xx status code
func (o *GetConnectionStatusHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connection status history o k response has a 5xx status code
func (o *GetConnectionStatusHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status history o k response a status code equal to that given
func (o *GetConnectionStatusHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get connection status history o k response
func (o *GetConnectionStatusHistoryOK) Code() int {
	return 200
}

func (o *GetConnectionStatusHistoryOK) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryOK  %+v", 200, o.Payload)
}

func (o *GetConnectionStatusHistoryOK) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryOK  %+v", 200, o.Payload)
}

func (o *GetConnectionStatusHistoryOK) GetPayload() *models.StatusHistoryEntity {
	return o.Payload
}

func (o *GetConnectionStatusHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusHistoryEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionStatusHistoryBadRequest creates a GetConnectionStatusHistoryBadRequest with default headers values
func NewGetConnectionStatusHistoryBadRequest() *GetConnectionStatusHistoryBadRequest {
	return &GetConnectionStatusHistoryBadRequest{}
}

/*
GetConnectionStatusHistoryBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetConnectionStatusHistoryBadRequest struct {
}

// IsSuccess returns true when this get connection status history bad request response has a 2xx status code
func (o *GetConnectionStatusHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status history bad request response has a 3xx status code
func (o *GetConnectionStatusHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status history bad request response has a 4xx status code
func (o *GetConnectionStatusHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status history bad request response has a 5xx status code
func (o *GetConnectionStatusHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status history bad request response a status code equal to that given
func (o *GetConnectionStatusHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get connection status history bad request response
func (o *GetConnectionStatusHistoryBadRequest) Code() int {
	return 400
}

func (o *GetConnectionStatusHistoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryBadRequest ", 400)
}

func (o *GetConnectionStatusHistoryBadRequest) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryBadRequest ", 400)
}

func (o *GetConnectionStatusHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusHistoryUnauthorized creates a GetConnectionStatusHistoryUnauthorized with default headers values
func NewGetConnectionStatusHistoryUnauthorized() *GetConnectionStatusHistoryUnauthorized {
	return &GetConnectionStatusHistoryUnauthorized{}
}

/*
GetConnectionStatusHistoryUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetConnectionStatusHistoryUnauthorized struct {
}

// IsSuccess returns true when this get connection status history unauthorized response has a 2xx status code
func (o *GetConnectionStatusHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status history unauthorized response has a 3xx status code
func (o *GetConnectionStatusHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status history unauthorized response has a 4xx status code
func (o *GetConnectionStatusHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status history unauthorized response has a 5xx status code
func (o *GetConnectionStatusHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status history unauthorized response a status code equal to that given
func (o *GetConnectionStatusHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get connection status history unauthorized response
func (o *GetConnectionStatusHistoryUnauthorized) Code() int {
	return 401
}

func (o *GetConnectionStatusHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryUnauthorized ", 401)
}

func (o *GetConnectionStatusHistoryUnauthorized) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryUnauthorized ", 401)
}

func (o *GetConnectionStatusHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusHistoryForbidden creates a GetConnectionStatusHistoryForbidden with default headers values
func NewGetConnectionStatusHistoryForbidden() *GetConnectionStatusHistoryForbidden {
	return &GetConnectionStatusHistoryForbidden{}
}

/*
GetConnectionStatusHistoryForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetConnectionStatusHistoryForbidden struct {
}

// IsSuccess returns true when this get connection status history forbidden response has a 2xx status code
func (o *GetConnectionStatusHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status history forbidden response has a 3xx status code
func (o *GetConnectionStatusHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status history forbidden response has a 4xx status code
func (o *GetConnectionStatusHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status history forbidden response has a 5xx status code
func (o *GetConnectionStatusHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status history forbidden response a status code equal to that given
func (o *GetConnectionStatusHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get connection status history forbidden response
func (o *GetConnectionStatusHistoryForbidden) Code() int {
	return 403
}

func (o *GetConnectionStatusHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryForbidden ", 403)
}

func (o *GetConnectionStatusHistoryForbidden) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryForbidden ", 403)
}

func (o *GetConnectionStatusHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusHistoryNotFound creates a GetConnectionStatusHistoryNotFound with default headers values
func NewGetConnectionStatusHistoryNotFound() *GetConnectionStatusHistoryNotFound {
	return &GetConnectionStatusHistoryNotFound{}
}

/*
GetConnectionStatusHistoryNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetConnectionStatusHistoryNotFound struct {
}

// IsSuccess returns true when this get connection status history not found response has a 2xx status code
func (o *GetConnectionStatusHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status history not found response has a 3xx status code
func (o *GetConnectionStatusHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status history not found response has a 4xx status code
func (o *GetConnectionStatusHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status history not found response has a 5xx status code
func (o *GetConnectionStatusHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status history not found response a status code equal to that given
func (o *GetConnectionStatusHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get connection status history not found response
func (o *GetConnectionStatusHistoryNotFound) Code() int {
	return 404
}

func (o *GetConnectionStatusHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryNotFound ", 404)
}

func (o *GetConnectionStatusHistoryNotFound) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryNotFound ", 404)
}

func (o *GetConnectionStatusHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionStatusHistoryConflict creates a GetConnectionStatusHistoryConflict with default headers values
func NewGetConnectionStatusHistoryConflict() *GetConnectionStatusHistoryConflict {
	return &GetConnectionStatusHistoryConflict{}
}

/*
GetConnectionStatusHistoryConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetConnectionStatusHistoryConflict struct {
}

// IsSuccess returns true when this get connection status history conflict response has a 2xx status code
func (o *GetConnectionStatusHistoryConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection status history conflict response has a 3xx status code
func (o *GetConnectionStatusHistoryConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection status history conflict response has a 4xx status code
func (o *GetConnectionStatusHistoryConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection status history conflict response has a 5xx status code
func (o *GetConnectionStatusHistoryConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection status history conflict response a status code equal to that given
func (o *GetConnectionStatusHistoryConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get connection status history conflict response
func (o *GetConnectionStatusHistoryConflict) Code() int {
	return 409
}

func (o *GetConnectionStatusHistoryConflict) Error() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryConflict ", 409)
}

func (o *GetConnectionStatusHistoryConflict) String() string {
	return fmt.Sprintf("[GET /flow/connections/{id}/status/history][%d] getConnectionStatusHistoryConflict ", 409)
}

func (o *GetConnectionStatusHistoryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

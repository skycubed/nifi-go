// Code generated by go-swagger; DO NOT EDIT.

package labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// RemoveLabelReader is a Reader for the RemoveLabel structure.
type RemoveLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveLabelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveLabelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveLabelConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveLabelOK creates a RemoveLabelOK with default headers values
func NewRemoveLabelOK() *RemoveLabelOK {
	return &RemoveLabelOK{}
}

/*
RemoveLabelOK describes a response with status code 200, with default header values.

successful operation
*/
type RemoveLabelOK struct {
	Payload *models.LabelEntity
}

// IsSuccess returns true when this remove label o k response has a 2xx status code
func (o *RemoveLabelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove label o k response has a 3xx status code
func (o *RemoveLabelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove label o k response has a 4xx status code
func (o *RemoveLabelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove label o k response has a 5xx status code
func (o *RemoveLabelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove label o k response a status code equal to that given
func (o *RemoveLabelOK) IsCode(code int) bool {
	return code == 200
}

func (o *RemoveLabelOK) Error() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelOK  %+v", 200, o.Payload)
}

func (o *RemoveLabelOK) String() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelOK  %+v", 200, o.Payload)
}

func (o *RemoveLabelOK) GetPayload() *models.LabelEntity {
	return o.Payload
}

func (o *RemoveLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LabelEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveLabelBadRequest creates a RemoveLabelBadRequest with default headers values
func NewRemoveLabelBadRequest() *RemoveLabelBadRequest {
	return &RemoveLabelBadRequest{}
}

/*
RemoveLabelBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type RemoveLabelBadRequest struct {
}

// IsSuccess returns true when this remove label bad request response has a 2xx status code
func (o *RemoveLabelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove label bad request response has a 3xx status code
func (o *RemoveLabelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove label bad request response has a 4xx status code
func (o *RemoveLabelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove label bad request response has a 5xx status code
func (o *RemoveLabelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove label bad request response a status code equal to that given
func (o *RemoveLabelBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RemoveLabelBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelBadRequest ", 400)
}

func (o *RemoveLabelBadRequest) String() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelBadRequest ", 400)
}

func (o *RemoveLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLabelUnauthorized creates a RemoveLabelUnauthorized with default headers values
func NewRemoveLabelUnauthorized() *RemoveLabelUnauthorized {
	return &RemoveLabelUnauthorized{}
}

/*
RemoveLabelUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type RemoveLabelUnauthorized struct {
}

// IsSuccess returns true when this remove label unauthorized response has a 2xx status code
func (o *RemoveLabelUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove label unauthorized response has a 3xx status code
func (o *RemoveLabelUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove label unauthorized response has a 4xx status code
func (o *RemoveLabelUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove label unauthorized response has a 5xx status code
func (o *RemoveLabelUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remove label unauthorized response a status code equal to that given
func (o *RemoveLabelUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RemoveLabelUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelUnauthorized ", 401)
}

func (o *RemoveLabelUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelUnauthorized ", 401)
}

func (o *RemoveLabelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLabelForbidden creates a RemoveLabelForbidden with default headers values
func NewRemoveLabelForbidden() *RemoveLabelForbidden {
	return &RemoveLabelForbidden{}
}

/*
RemoveLabelForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type RemoveLabelForbidden struct {
}

// IsSuccess returns true when this remove label forbidden response has a 2xx status code
func (o *RemoveLabelForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove label forbidden response has a 3xx status code
func (o *RemoveLabelForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove label forbidden response has a 4xx status code
func (o *RemoveLabelForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove label forbidden response has a 5xx status code
func (o *RemoveLabelForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove label forbidden response a status code equal to that given
func (o *RemoveLabelForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RemoveLabelForbidden) Error() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelForbidden ", 403)
}

func (o *RemoveLabelForbidden) String() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelForbidden ", 403)
}

func (o *RemoveLabelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLabelNotFound creates a RemoveLabelNotFound with default headers values
func NewRemoveLabelNotFound() *RemoveLabelNotFound {
	return &RemoveLabelNotFound{}
}

/*
RemoveLabelNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type RemoveLabelNotFound struct {
}

// IsSuccess returns true when this remove label not found response has a 2xx status code
func (o *RemoveLabelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove label not found response has a 3xx status code
func (o *RemoveLabelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove label not found response has a 4xx status code
func (o *RemoveLabelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove label not found response has a 5xx status code
func (o *RemoveLabelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove label not found response a status code equal to that given
func (o *RemoveLabelNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RemoveLabelNotFound) Error() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelNotFound ", 404)
}

func (o *RemoveLabelNotFound) String() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelNotFound ", 404)
}

func (o *RemoveLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveLabelConflict creates a RemoveLabelConflict with default headers values
func NewRemoveLabelConflict() *RemoveLabelConflict {
	return &RemoveLabelConflict{}
}

/*
RemoveLabelConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type RemoveLabelConflict struct {
}

// IsSuccess returns true when this remove label conflict response has a 2xx status code
func (o *RemoveLabelConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove label conflict response has a 3xx status code
func (o *RemoveLabelConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove label conflict response has a 4xx status code
func (o *RemoveLabelConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove label conflict response has a 5xx status code
func (o *RemoveLabelConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this remove label conflict response a status code equal to that given
func (o *RemoveLabelConflict) IsCode(code int) bool {
	return code == 409
}

func (o *RemoveLabelConflict) Error() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelConflict ", 409)
}

func (o *RemoveLabelConflict) String() string {
	return fmt.Sprintf("[DELETE /labels/{id}][%d] removeLabelConflict ", 409)
}

func (o *RemoveLabelConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

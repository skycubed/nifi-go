// Code generated by go-swagger; DO NOT EDIT.

package flowfile_queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// DownloadFlowFileContentReader is a Reader for the DownloadFlowFileContent structure.
type DownloadFlowFileContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadFlowFileContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadFlowFileContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadFlowFileContentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDownloadFlowFileContentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadFlowFileContentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadFlowFileContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDownloadFlowFileContentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content] downloadFlowFileContent", response, response.Code())
	}
}

// NewDownloadFlowFileContentOK creates a DownloadFlowFileContentOK with default headers values
func NewDownloadFlowFileContentOK() *DownloadFlowFileContentOK {
	return &DownloadFlowFileContentOK{}
}

/*
DownloadFlowFileContentOK describes a response with status code 200, with default header values.

successful operation
*/
type DownloadFlowFileContentOK struct {
	Payload models.StreamingOutput
}

// IsSuccess returns true when this download flow file content o k response has a 2xx status code
func (o *DownloadFlowFileContentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download flow file content o k response has a 3xx status code
func (o *DownloadFlowFileContentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download flow file content o k response has a 4xx status code
func (o *DownloadFlowFileContentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download flow file content o k response has a 5xx status code
func (o *DownloadFlowFileContentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download flow file content o k response a status code equal to that given
func (o *DownloadFlowFileContentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download flow file content o k response
func (o *DownloadFlowFileContentOK) Code() int {
	return 200
}

func (o *DownloadFlowFileContentOK) Error() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentOK  %+v", 200, o.Payload)
}

func (o *DownloadFlowFileContentOK) String() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentOK  %+v", 200, o.Payload)
}

func (o *DownloadFlowFileContentOK) GetPayload() models.StreamingOutput {
	return o.Payload
}

func (o *DownloadFlowFileContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFlowFileContentBadRequest creates a DownloadFlowFileContentBadRequest with default headers values
func NewDownloadFlowFileContentBadRequest() *DownloadFlowFileContentBadRequest {
	return &DownloadFlowFileContentBadRequest{}
}

/*
DownloadFlowFileContentBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type DownloadFlowFileContentBadRequest struct {
}

// IsSuccess returns true when this download flow file content bad request response has a 2xx status code
func (o *DownloadFlowFileContentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download flow file content bad request response has a 3xx status code
func (o *DownloadFlowFileContentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download flow file content bad request response has a 4xx status code
func (o *DownloadFlowFileContentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download flow file content bad request response has a 5xx status code
func (o *DownloadFlowFileContentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download flow file content bad request response a status code equal to that given
func (o *DownloadFlowFileContentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download flow file content bad request response
func (o *DownloadFlowFileContentBadRequest) Code() int {
	return 400
}

func (o *DownloadFlowFileContentBadRequest) Error() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentBadRequest ", 400)
}

func (o *DownloadFlowFileContentBadRequest) String() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentBadRequest ", 400)
}

func (o *DownloadFlowFileContentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadFlowFileContentUnauthorized creates a DownloadFlowFileContentUnauthorized with default headers values
func NewDownloadFlowFileContentUnauthorized() *DownloadFlowFileContentUnauthorized {
	return &DownloadFlowFileContentUnauthorized{}
}

/*
DownloadFlowFileContentUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type DownloadFlowFileContentUnauthorized struct {
}

// IsSuccess returns true when this download flow file content unauthorized response has a 2xx status code
func (o *DownloadFlowFileContentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download flow file content unauthorized response has a 3xx status code
func (o *DownloadFlowFileContentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download flow file content unauthorized response has a 4xx status code
func (o *DownloadFlowFileContentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download flow file content unauthorized response has a 5xx status code
func (o *DownloadFlowFileContentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download flow file content unauthorized response a status code equal to that given
func (o *DownloadFlowFileContentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download flow file content unauthorized response
func (o *DownloadFlowFileContentUnauthorized) Code() int {
	return 401
}

func (o *DownloadFlowFileContentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentUnauthorized ", 401)
}

func (o *DownloadFlowFileContentUnauthorized) String() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentUnauthorized ", 401)
}

func (o *DownloadFlowFileContentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadFlowFileContentForbidden creates a DownloadFlowFileContentForbidden with default headers values
func NewDownloadFlowFileContentForbidden() *DownloadFlowFileContentForbidden {
	return &DownloadFlowFileContentForbidden{}
}

/*
DownloadFlowFileContentForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type DownloadFlowFileContentForbidden struct {
}

// IsSuccess returns true when this download flow file content forbidden response has a 2xx status code
func (o *DownloadFlowFileContentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download flow file content forbidden response has a 3xx status code
func (o *DownloadFlowFileContentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download flow file content forbidden response has a 4xx status code
func (o *DownloadFlowFileContentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download flow file content forbidden response has a 5xx status code
func (o *DownloadFlowFileContentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download flow file content forbidden response a status code equal to that given
func (o *DownloadFlowFileContentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download flow file content forbidden response
func (o *DownloadFlowFileContentForbidden) Code() int {
	return 403
}

func (o *DownloadFlowFileContentForbidden) Error() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentForbidden ", 403)
}

func (o *DownloadFlowFileContentForbidden) String() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentForbidden ", 403)
}

func (o *DownloadFlowFileContentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadFlowFileContentNotFound creates a DownloadFlowFileContentNotFound with default headers values
func NewDownloadFlowFileContentNotFound() *DownloadFlowFileContentNotFound {
	return &DownloadFlowFileContentNotFound{}
}

/*
DownloadFlowFileContentNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type DownloadFlowFileContentNotFound struct {
}

// IsSuccess returns true when this download flow file content not found response has a 2xx status code
func (o *DownloadFlowFileContentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download flow file content not found response has a 3xx status code
func (o *DownloadFlowFileContentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download flow file content not found response has a 4xx status code
func (o *DownloadFlowFileContentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download flow file content not found response has a 5xx status code
func (o *DownloadFlowFileContentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download flow file content not found response a status code equal to that given
func (o *DownloadFlowFileContentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download flow file content not found response
func (o *DownloadFlowFileContentNotFound) Code() int {
	return 404
}

func (o *DownloadFlowFileContentNotFound) Error() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentNotFound ", 404)
}

func (o *DownloadFlowFileContentNotFound) String() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentNotFound ", 404)
}

func (o *DownloadFlowFileContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadFlowFileContentConflict creates a DownloadFlowFileContentConflict with default headers values
func NewDownloadFlowFileContentConflict() *DownloadFlowFileContentConflict {
	return &DownloadFlowFileContentConflict{}
}

/*
DownloadFlowFileContentConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type DownloadFlowFileContentConflict struct {
}

// IsSuccess returns true when this download flow file content conflict response has a 2xx status code
func (o *DownloadFlowFileContentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download flow file content conflict response has a 3xx status code
func (o *DownloadFlowFileContentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download flow file content conflict response has a 4xx status code
func (o *DownloadFlowFileContentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this download flow file content conflict response has a 5xx status code
func (o *DownloadFlowFileContentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this download flow file content conflict response a status code equal to that given
func (o *DownloadFlowFileContentConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the download flow file content conflict response
func (o *DownloadFlowFileContentConflict) Code() int {
	return 409
}

func (o *DownloadFlowFileContentConflict) Error() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentConflict ", 409)
}

func (o *DownloadFlowFileContentConflict) String() string {
	return fmt.Sprintf("[GET /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content][%d] downloadFlowFileContentConflict ", 409)
}

func (o *DownloadFlowFileContentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

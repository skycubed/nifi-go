// Code generated by go-swagger; DO NOT EDIT.

package output_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// RemoveOutputPortReader is a Reader for the RemoveOutputPort structure.
type RemoveOutputPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveOutputPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveOutputPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveOutputPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveOutputPortUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveOutputPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveOutputPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveOutputPortConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveOutputPortOK creates a RemoveOutputPortOK with default headers values
func NewRemoveOutputPortOK() *RemoveOutputPortOK {
	return &RemoveOutputPortOK{}
}

/* RemoveOutputPortOK describes a response with status code 200, with default header values.

successful operation
*/
type RemoveOutputPortOK struct {
	Payload *models.PortEntity
}

func (o *RemoveOutputPortOK) Error() string {
	return fmt.Sprintf("[DELETE /output-ports/{id}][%d] removeOutputPortOK  %+v", 200, o.Payload)
}
func (o *RemoveOutputPortOK) GetPayload() *models.PortEntity {
	return o.Payload
}

func (o *RemoveOutputPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveOutputPortBadRequest creates a RemoveOutputPortBadRequest with default headers values
func NewRemoveOutputPortBadRequest() *RemoveOutputPortBadRequest {
	return &RemoveOutputPortBadRequest{}
}

/* RemoveOutputPortBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type RemoveOutputPortBadRequest struct {
}

func (o *RemoveOutputPortBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /output-ports/{id}][%d] removeOutputPortBadRequest ", 400)
}

func (o *RemoveOutputPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveOutputPortUnauthorized creates a RemoveOutputPortUnauthorized with default headers values
func NewRemoveOutputPortUnauthorized() *RemoveOutputPortUnauthorized {
	return &RemoveOutputPortUnauthorized{}
}

/* RemoveOutputPortUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type RemoveOutputPortUnauthorized struct {
}

func (o *RemoveOutputPortUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /output-ports/{id}][%d] removeOutputPortUnauthorized ", 401)
}

func (o *RemoveOutputPortUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveOutputPortForbidden creates a RemoveOutputPortForbidden with default headers values
func NewRemoveOutputPortForbidden() *RemoveOutputPortForbidden {
	return &RemoveOutputPortForbidden{}
}

/* RemoveOutputPortForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type RemoveOutputPortForbidden struct {
}

func (o *RemoveOutputPortForbidden) Error() string {
	return fmt.Sprintf("[DELETE /output-ports/{id}][%d] removeOutputPortForbidden ", 403)
}

func (o *RemoveOutputPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveOutputPortNotFound creates a RemoveOutputPortNotFound with default headers values
func NewRemoveOutputPortNotFound() *RemoveOutputPortNotFound {
	return &RemoveOutputPortNotFound{}
}

/* RemoveOutputPortNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type RemoveOutputPortNotFound struct {
}

func (o *RemoveOutputPortNotFound) Error() string {
	return fmt.Sprintf("[DELETE /output-ports/{id}][%d] removeOutputPortNotFound ", 404)
}

func (o *RemoveOutputPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveOutputPortConflict creates a RemoveOutputPortConflict with default headers values
func NewRemoveOutputPortConflict() *RemoveOutputPortConflict {
	return &RemoveOutputPortConflict{}
}

/* RemoveOutputPortConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type RemoveOutputPortConflict struct {
}

func (o *RemoveOutputPortConflict) Error() string {
	return fmt.Sprintf("[DELETE /output-ports/{id}][%d] removeOutputPortConflict ", 409)
}

func (o *RemoveOutputPortConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

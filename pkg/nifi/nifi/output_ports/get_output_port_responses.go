// Code generated by go-swagger; DO NOT EDIT.

package output_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetOutputPortReader is a Reader for the GetOutputPort structure.
type GetOutputPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutputPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutputPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutputPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOutputPortUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutputPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutputPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetOutputPortConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOutputPortOK creates a GetOutputPortOK with default headers values
func NewGetOutputPortOK() *GetOutputPortOK {
	return &GetOutputPortOK{}
}

/* GetOutputPortOK describes a response with status code 200, with default header values.

successful operation
*/
type GetOutputPortOK struct {
	Payload *models.PortEntity
}

func (o *GetOutputPortOK) Error() string {
	return fmt.Sprintf("[GET /output-ports/{id}][%d] getOutputPortOK  %+v", 200, o.Payload)
}
func (o *GetOutputPortOK) GetPayload() *models.PortEntity {
	return o.Payload
}

func (o *GetOutputPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutputPortBadRequest creates a GetOutputPortBadRequest with default headers values
func NewGetOutputPortBadRequest() *GetOutputPortBadRequest {
	return &GetOutputPortBadRequest{}
}

/* GetOutputPortBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetOutputPortBadRequest struct {
}

func (o *GetOutputPortBadRequest) Error() string {
	return fmt.Sprintf("[GET /output-ports/{id}][%d] getOutputPortBadRequest ", 400)
}

func (o *GetOutputPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOutputPortUnauthorized creates a GetOutputPortUnauthorized with default headers values
func NewGetOutputPortUnauthorized() *GetOutputPortUnauthorized {
	return &GetOutputPortUnauthorized{}
}

/* GetOutputPortUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetOutputPortUnauthorized struct {
}

func (o *GetOutputPortUnauthorized) Error() string {
	return fmt.Sprintf("[GET /output-ports/{id}][%d] getOutputPortUnauthorized ", 401)
}

func (o *GetOutputPortUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOutputPortForbidden creates a GetOutputPortForbidden with default headers values
func NewGetOutputPortForbidden() *GetOutputPortForbidden {
	return &GetOutputPortForbidden{}
}

/* GetOutputPortForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetOutputPortForbidden struct {
}

func (o *GetOutputPortForbidden) Error() string {
	return fmt.Sprintf("[GET /output-ports/{id}][%d] getOutputPortForbidden ", 403)
}

func (o *GetOutputPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOutputPortNotFound creates a GetOutputPortNotFound with default headers values
func NewGetOutputPortNotFound() *GetOutputPortNotFound {
	return &GetOutputPortNotFound{}
}

/* GetOutputPortNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetOutputPortNotFound struct {
}

func (o *GetOutputPortNotFound) Error() string {
	return fmt.Sprintf("[GET /output-ports/{id}][%d] getOutputPortNotFound ", 404)
}

func (o *GetOutputPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOutputPortConflict creates a GetOutputPortConflict with default headers values
func NewGetOutputPortConflict() *GetOutputPortConflict {
	return &GetOutputPortConflict{}
}

/* GetOutputPortConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetOutputPortConflict struct {
}

func (o *GetOutputPortConflict) Error() string {
	return fmt.Sprintf("[GET /output-ports/{id}][%d] getOutputPortConflict ", 409)
}

func (o *GetOutputPortConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

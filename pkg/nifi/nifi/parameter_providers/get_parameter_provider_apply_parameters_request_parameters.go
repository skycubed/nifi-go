// Code generated by go-swagger; DO NOT EDIT.

package parameter_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetParameterProviderApplyParametersRequestParams creates a new GetParameterProviderApplyParametersRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetParameterProviderApplyParametersRequestParams() *GetParameterProviderApplyParametersRequestParams {
	return &GetParameterProviderApplyParametersRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetParameterProviderApplyParametersRequestParamsWithTimeout creates a new GetParameterProviderApplyParametersRequestParams object
// with the ability to set a timeout on a request.
func NewGetParameterProviderApplyParametersRequestParamsWithTimeout(timeout time.Duration) *GetParameterProviderApplyParametersRequestParams {
	return &GetParameterProviderApplyParametersRequestParams{
		timeout: timeout,
	}
}

// NewGetParameterProviderApplyParametersRequestParamsWithContext creates a new GetParameterProviderApplyParametersRequestParams object
// with the ability to set a context for a request.
func NewGetParameterProviderApplyParametersRequestParamsWithContext(ctx context.Context) *GetParameterProviderApplyParametersRequestParams {
	return &GetParameterProviderApplyParametersRequestParams{
		Context: ctx,
	}
}

// NewGetParameterProviderApplyParametersRequestParamsWithHTTPClient creates a new GetParameterProviderApplyParametersRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetParameterProviderApplyParametersRequestParamsWithHTTPClient(client *http.Client) *GetParameterProviderApplyParametersRequestParams {
	return &GetParameterProviderApplyParametersRequestParams{
		HTTPClient: client,
	}
}

/*
GetParameterProviderApplyParametersRequestParams contains all the parameters to send to the API endpoint

	for the get parameter provider apply parameters request operation.

	Typically these are written to a http.Request.
*/
type GetParameterProviderApplyParametersRequestParams struct {

	/* ProviderID.

	   The ID of the Parameter Provider
	*/
	ProviderID string

	/* RequestID.

	   The ID of the Apply Parameters Request
	*/
	RequestID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get parameter provider apply parameters request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetParameterProviderApplyParametersRequestParams) WithDefaults() *GetParameterProviderApplyParametersRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get parameter provider apply parameters request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetParameterProviderApplyParametersRequestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) WithTimeout(timeout time.Duration) *GetParameterProviderApplyParametersRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) WithContext(ctx context.Context) *GetParameterProviderApplyParametersRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) WithHTTPClient(client *http.Client) *GetParameterProviderApplyParametersRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProviderID adds the providerID to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) WithProviderID(providerID string) *GetParameterProviderApplyParametersRequestParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) SetProviderID(providerID string) {
	o.ProviderID = providerID
}

// WithRequestID adds the requestID to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) WithRequestID(requestID string) *GetParameterProviderApplyParametersRequestParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the get parameter provider apply parameters request params
func (o *GetParameterProviderApplyParametersRequestParams) SetRequestID(requestID string) {
	o.RequestID = requestID
}

// WriteToRequest writes these params to a swagger request
func (o *GetParameterProviderApplyParametersRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param providerId
	if err := r.SetPathParam("providerId", o.ProviderID); err != nil {
		return err
	}

	// path param requestId
	if err := r.SetPathParam("requestId", o.RequestID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package parameter_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new parameter providers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for parameter providers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteApplyParametersRequest(params *DeleteApplyParametersRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteApplyParametersRequestOK, error)

	FetchParameters(params *FetchParametersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FetchParametersOK, error)

	GetParameterProvider(params *GetParameterProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterProviderOK, error)

	GetParameterProviderApplyParametersRequest(params *GetParameterProviderApplyParametersRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterProviderApplyParametersRequestOK, error)

	GetParameterProviderReferences(params *GetParameterProviderReferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterProviderReferencesOK, error)

	RemoveParameterProvider(params *RemoveParameterProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveParameterProviderOK, error)

	SubmitApplyParameters(params *SubmitApplyParametersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitApplyParametersOK, error)

	UpdateParameterProvider(params *UpdateParameterProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateParameterProviderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteApplyParametersRequest deletes the apply parameters request with the given ID

Deletes the Apply Parameters Request with the given ID. After a request is created via a POST to /nifi-api/parameter-providers/apply-parameters-requests, it is expected that the client will properly clean up the request by DELETE'ing it, once the Apply process has completed. If the request is deleted before the request completes, then the Apply Parameters Request will finish the step that it is currently performing and then will cancel any subsequent steps.
*/
func (a *Client) DeleteApplyParametersRequest(params *DeleteApplyParametersRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteApplyParametersRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplyParametersRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApplyParametersRequest",
		Method:             "DELETE",
		PathPattern:        "/parameter-providers/{providerId}/apply-parameters-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteApplyParametersRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplyParametersRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApplyParametersRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FetchParameters fetches and temporarily caches the parameters for a provider
*/
func (a *Client) FetchParameters(params *FetchParametersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FetchParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fetchParameters",
		Method:             "POST",
		PathPattern:        "/parameter-providers/{id}/parameters/fetch-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FetchParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FetchParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fetchParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetParameterProvider gets a parameter provider
*/
func (a *Client) GetParameterProvider(params *GetParameterProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getParameterProvider",
		Method:             "GET",
		PathPattern:        "/parameter-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetParameterProviderApplyParametersRequest returns the apply parameters request with the given ID

Returns the Apply Parameters Request with the given ID. Once an Apply Parameters Request has been created by performing a POST to /nifi-api/parameter-providers, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the state, such as percent complete, the current state of the request, and any failures.
*/
func (a *Client) GetParameterProviderApplyParametersRequest(params *GetParameterProviderApplyParametersRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterProviderApplyParametersRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterProviderApplyParametersRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getParameterProviderApplyParametersRequest",
		Method:             "GET",
		PathPattern:        "/parameter-providers/{providerId}/apply-parameters-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterProviderApplyParametersRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterProviderApplyParametersRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterProviderApplyParametersRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetParameterProviderReferences gets all references to a parameter provider
*/
func (a *Client) GetParameterProviderReferences(params *GetParameterProviderReferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetParameterProviderReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterProviderReferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getParameterProviderReferences",
		Method:             "GET",
		PathPattern:        "/parameter-providers/{id}/references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterProviderReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterProviderReferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterProviderReferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveParameterProvider deletes a parameter provider
*/
func (a *Client) RemoveParameterProvider(params *RemoveParameterProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveParameterProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveParameterProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeParameterProvider",
		Method:             "DELETE",
		PathPattern:        "/parameter-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveParameterProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveParameterProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeParameterProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubmitApplyParameters initiates a request to apply the fetched parameters of a parameter provider

This will initiate the process of applying fetched parameters to all referencing Parameter Contexts. Changing the value of a Parameter may require that one or more components be stopped and restarted, so this action may take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterProviderApplyParametersRequestEntity, and the process of updating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-providers/apply-parameters-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-providers/apply-parameters-requests/{requestId}.
*/
func (a *Client) SubmitApplyParameters(params *SubmitApplyParametersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitApplyParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitApplyParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitApplyParameters",
		Method:             "POST",
		PathPattern:        "/parameter-providers/{providerId}/apply-parameters-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitApplyParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitApplyParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitApplyParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateParameterProvider updates a parameter provider
*/
func (a *Client) UpdateParameterProvider(params *UpdateParameterProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateParameterProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateParameterProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateParameterProvider",
		Method:             "PUT",
		PathPattern:        "/parameter-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateParameterProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateParameterProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateParameterProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package parameter_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteApplyParametersRequestParams creates a new DeleteApplyParametersRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteApplyParametersRequestParams() *DeleteApplyParametersRequestParams {
	return &DeleteApplyParametersRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteApplyParametersRequestParamsWithTimeout creates a new DeleteApplyParametersRequestParams object
// with the ability to set a timeout on a request.
func NewDeleteApplyParametersRequestParamsWithTimeout(timeout time.Duration) *DeleteApplyParametersRequestParams {
	return &DeleteApplyParametersRequestParams{
		timeout: timeout,
	}
}

// NewDeleteApplyParametersRequestParamsWithContext creates a new DeleteApplyParametersRequestParams object
// with the ability to set a context for a request.
func NewDeleteApplyParametersRequestParamsWithContext(ctx context.Context) *DeleteApplyParametersRequestParams {
	return &DeleteApplyParametersRequestParams{
		Context: ctx,
	}
}

// NewDeleteApplyParametersRequestParamsWithHTTPClient creates a new DeleteApplyParametersRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteApplyParametersRequestParamsWithHTTPClient(client *http.Client) *DeleteApplyParametersRequestParams {
	return &DeleteApplyParametersRequestParams{
		HTTPClient: client,
	}
}

/*
DeleteApplyParametersRequestParams contains all the parameters to send to the API endpoint

	for the delete apply parameters request operation.

	Typically these are written to a http.Request.
*/
type DeleteApplyParametersRequestParams struct {

	/* DisconnectedNodeAcknowledged.

	   Acknowledges that this node is disconnected to allow for mutable requests to proceed.
	*/
	DisconnectedNodeAcknowledged *bool

	/* ProviderID.

	   The ID of the Parameter Provider
	*/
	ProviderID string

	/* RequestID.

	   The ID of the Apply Parameters Request
	*/
	RequestID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete apply parameters request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteApplyParametersRequestParams) WithDefaults() *DeleteApplyParametersRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete apply parameters request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteApplyParametersRequestParams) SetDefaults() {
	var (
		disconnectedNodeAcknowledgedDefault = bool(false)
	)

	val := DeleteApplyParametersRequestParams{
		DisconnectedNodeAcknowledged: &disconnectedNodeAcknowledgedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) WithTimeout(timeout time.Duration) *DeleteApplyParametersRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) WithContext(ctx context.Context) *DeleteApplyParametersRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) WithHTTPClient(client *http.Client) *DeleteApplyParametersRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDisconnectedNodeAcknowledged adds the disconnectedNodeAcknowledged to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) WithDisconnectedNodeAcknowledged(disconnectedNodeAcknowledged *bool) *DeleteApplyParametersRequestParams {
	o.SetDisconnectedNodeAcknowledged(disconnectedNodeAcknowledged)
	return o
}

// SetDisconnectedNodeAcknowledged adds the disconnectedNodeAcknowledged to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) SetDisconnectedNodeAcknowledged(disconnectedNodeAcknowledged *bool) {
	o.DisconnectedNodeAcknowledged = disconnectedNodeAcknowledged
}

// WithProviderID adds the providerID to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) WithProviderID(providerID string) *DeleteApplyParametersRequestParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) SetProviderID(providerID string) {
	o.ProviderID = providerID
}

// WithRequestID adds the requestID to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) WithRequestID(requestID string) *DeleteApplyParametersRequestParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the delete apply parameters request params
func (o *DeleteApplyParametersRequestParams) SetRequestID(requestID string) {
	o.RequestID = requestID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteApplyParametersRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DisconnectedNodeAcknowledged != nil {

		// query param disconnectedNodeAcknowledged
		var qrDisconnectedNodeAcknowledged bool

		if o.DisconnectedNodeAcknowledged != nil {
			qrDisconnectedNodeAcknowledged = *o.DisconnectedNodeAcknowledged
		}
		qDisconnectedNodeAcknowledged := swag.FormatBool(qrDisconnectedNodeAcknowledged)
		if qDisconnectedNodeAcknowledged != "" {

			if err := r.SetQueryParam("disconnectedNodeAcknowledged", qDisconnectedNodeAcknowledged); err != nil {
				return err
			}
		}
	}

	// path param providerId
	if err := r.SetPathParam("providerId", o.ProviderID); err != nil {
		return err
	}

	// path param requestId
	if err := r.SetPathParam("requestId", o.RequestID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

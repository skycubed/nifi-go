// Code generated by go-swagger; DO NOT EDIT.

package parameter_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// UpdateParameterProviderReader is a Reader for the UpdateParameterProvider structure.
type UpdateParameterProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateParameterProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateParameterProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateParameterProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateParameterProviderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateParameterProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateParameterProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateParameterProviderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /parameter-providers/{id}] updateParameterProvider", response, response.Code())
	}
}

// NewUpdateParameterProviderOK creates a UpdateParameterProviderOK with default headers values
func NewUpdateParameterProviderOK() *UpdateParameterProviderOK {
	return &UpdateParameterProviderOK{}
}

/*
UpdateParameterProviderOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateParameterProviderOK struct {
	Payload *models.ParameterProviderEntity
}

// IsSuccess returns true when this update parameter provider o k response has a 2xx status code
func (o *UpdateParameterProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update parameter provider o k response has a 3xx status code
func (o *UpdateParameterProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parameter provider o k response has a 4xx status code
func (o *UpdateParameterProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update parameter provider o k response has a 5xx status code
func (o *UpdateParameterProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update parameter provider o k response a status code equal to that given
func (o *UpdateParameterProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update parameter provider o k response
func (o *UpdateParameterProviderOK) Code() int {
	return 200
}

func (o *UpdateParameterProviderOK) Error() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateParameterProviderOK) String() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateParameterProviderOK) GetPayload() *models.ParameterProviderEntity {
	return o.Payload
}

func (o *UpdateParameterProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ParameterProviderEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParameterProviderBadRequest creates a UpdateParameterProviderBadRequest with default headers values
func NewUpdateParameterProviderBadRequest() *UpdateParameterProviderBadRequest {
	return &UpdateParameterProviderBadRequest{}
}

/*
UpdateParameterProviderBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateParameterProviderBadRequest struct {
}

// IsSuccess returns true when this update parameter provider bad request response has a 2xx status code
func (o *UpdateParameterProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parameter provider bad request response has a 3xx status code
func (o *UpdateParameterProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parameter provider bad request response has a 4xx status code
func (o *UpdateParameterProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parameter provider bad request response has a 5xx status code
func (o *UpdateParameterProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update parameter provider bad request response a status code equal to that given
func (o *UpdateParameterProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update parameter provider bad request response
func (o *UpdateParameterProviderBadRequest) Code() int {
	return 400
}

func (o *UpdateParameterProviderBadRequest) Error() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderBadRequest ", 400)
}

func (o *UpdateParameterProviderBadRequest) String() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderBadRequest ", 400)
}

func (o *UpdateParameterProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateParameterProviderUnauthorized creates a UpdateParameterProviderUnauthorized with default headers values
func NewUpdateParameterProviderUnauthorized() *UpdateParameterProviderUnauthorized {
	return &UpdateParameterProviderUnauthorized{}
}

/*
UpdateParameterProviderUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type UpdateParameterProviderUnauthorized struct {
}

// IsSuccess returns true when this update parameter provider unauthorized response has a 2xx status code
func (o *UpdateParameterProviderUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parameter provider unauthorized response has a 3xx status code
func (o *UpdateParameterProviderUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parameter provider unauthorized response has a 4xx status code
func (o *UpdateParameterProviderUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parameter provider unauthorized response has a 5xx status code
func (o *UpdateParameterProviderUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update parameter provider unauthorized response a status code equal to that given
func (o *UpdateParameterProviderUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update parameter provider unauthorized response
func (o *UpdateParameterProviderUnauthorized) Code() int {
	return 401
}

func (o *UpdateParameterProviderUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderUnauthorized ", 401)
}

func (o *UpdateParameterProviderUnauthorized) String() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderUnauthorized ", 401)
}

func (o *UpdateParameterProviderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateParameterProviderForbidden creates a UpdateParameterProviderForbidden with default headers values
func NewUpdateParameterProviderForbidden() *UpdateParameterProviderForbidden {
	return &UpdateParameterProviderForbidden{}
}

/*
UpdateParameterProviderForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type UpdateParameterProviderForbidden struct {
}

// IsSuccess returns true when this update parameter provider forbidden response has a 2xx status code
func (o *UpdateParameterProviderForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parameter provider forbidden response has a 3xx status code
func (o *UpdateParameterProviderForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parameter provider forbidden response has a 4xx status code
func (o *UpdateParameterProviderForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parameter provider forbidden response has a 5xx status code
func (o *UpdateParameterProviderForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update parameter provider forbidden response a status code equal to that given
func (o *UpdateParameterProviderForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update parameter provider forbidden response
func (o *UpdateParameterProviderForbidden) Code() int {
	return 403
}

func (o *UpdateParameterProviderForbidden) Error() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderForbidden ", 403)
}

func (o *UpdateParameterProviderForbidden) String() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderForbidden ", 403)
}

func (o *UpdateParameterProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateParameterProviderNotFound creates a UpdateParameterProviderNotFound with default headers values
func NewUpdateParameterProviderNotFound() *UpdateParameterProviderNotFound {
	return &UpdateParameterProviderNotFound{}
}

/*
UpdateParameterProviderNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type UpdateParameterProviderNotFound struct {
}

// IsSuccess returns true when this update parameter provider not found response has a 2xx status code
func (o *UpdateParameterProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parameter provider not found response has a 3xx status code
func (o *UpdateParameterProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parameter provider not found response has a 4xx status code
func (o *UpdateParameterProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parameter provider not found response has a 5xx status code
func (o *UpdateParameterProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update parameter provider not found response a status code equal to that given
func (o *UpdateParameterProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update parameter provider not found response
func (o *UpdateParameterProviderNotFound) Code() int {
	return 404
}

func (o *UpdateParameterProviderNotFound) Error() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderNotFound ", 404)
}

func (o *UpdateParameterProviderNotFound) String() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderNotFound ", 404)
}

func (o *UpdateParameterProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateParameterProviderConflict creates a UpdateParameterProviderConflict with default headers values
func NewUpdateParameterProviderConflict() *UpdateParameterProviderConflict {
	return &UpdateParameterProviderConflict{}
}

/*
UpdateParameterProviderConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateParameterProviderConflict struct {
}

// IsSuccess returns true when this update parameter provider conflict response has a 2xx status code
func (o *UpdateParameterProviderConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parameter provider conflict response has a 3xx status code
func (o *UpdateParameterProviderConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parameter provider conflict response has a 4xx status code
func (o *UpdateParameterProviderConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parameter provider conflict response has a 5xx status code
func (o *UpdateParameterProviderConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update parameter provider conflict response a status code equal to that given
func (o *UpdateParameterProviderConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update parameter provider conflict response
func (o *UpdateParameterProviderConflict) Code() int {
	return 409
}

func (o *UpdateParameterProviderConflict) Error() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderConflict ", 409)
}

func (o *UpdateParameterProviderConflict) String() string {
	return fmt.Sprintf("[PUT /parameter-providers/{id}][%d] updateParameterProviderConflict ", 409)
}

func (o *UpdateParameterProviderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

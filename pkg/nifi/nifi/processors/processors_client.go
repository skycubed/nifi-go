// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new processors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for processors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProcessor(params *DeleteProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProcessorOK, error)

	DeleteVerificationRequest(params *DeleteVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVerificationRequestOK, error)

	GetProcessor(params *GetProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorOK, error)

	GetProcessorDiagnostics(params *GetProcessorDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorDiagnosticsOK, error)

	GetProcessorRunStatusDetails(params *GetProcessorRunStatusDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorRunStatusDetailsOK, error)

	SubmitProcessorVerificationRequest(params *SubmitProcessorVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitProcessorVerificationRequestOK, error)

	TerminateProcessor(params *TerminateProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerminateProcessorOK, error)

	UpdateProcessor(params *UpdateProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProcessorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteProcessor deletes a processor
*/
func (a *Client) DeleteProcessor(params *DeleteProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProcessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProcessor",
		Method:             "DELETE",
		PathPattern:        "/processors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVerificationRequest deletes the verification request with the given ID

  Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE'ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.
*/
func (a *Client) DeleteVerificationRequest(params *DeleteVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVerificationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVerificationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVerificationRequest",
		Method:             "DELETE",
		PathPattern:        "/processors/{id}/config/verification-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteVerificationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVerificationRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVerificationRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessor gets a processor
*/
func (a *Client) GetProcessor(params *GetProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessor",
		Method:             "GET",
		PathPattern:        "/processors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorDiagnostics gets diagnostics information about a processor

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetProcessorDiagnostics(params *GetProcessorDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessorDiagnostics",
		Method:             "GET",
		PathPattern:        "/processors/{id}/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorDiagnosticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorDiagnostics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorRunStatusDetails submits a query to retrieve the run status details of all processors that are in the given list of processor i ds
*/
func (a *Client) GetProcessorRunStatusDetails(params *GetProcessorRunStatusDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProcessorRunStatusDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorRunStatusDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessorRunStatusDetails",
		Method:             "POST",
		PathPattern:        "/processors/run-status-details/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorRunStatusDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorRunStatusDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorRunStatusDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitProcessorVerificationRequest performs verification of the processor s configuration

  This will initiate the process of verifying a given Processor configuration. This may be a long-running task. As a result, this endpoint will immediately return a ProcessorConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /processors/{processorId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /processors/{processorId}/verification-requests/{requestId}.
*/
func (a *Client) SubmitProcessorVerificationRequest(params *SubmitProcessorVerificationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitProcessorVerificationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitProcessorVerificationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitProcessorVerificationRequest",
		Method:             "POST",
		PathPattern:        "/processors/{id}/config/verification-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitProcessorVerificationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitProcessorVerificationRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitProcessorVerificationRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TerminateProcessor terminates a processor essentially deleting its threads and any active tasks
*/
func (a *Client) TerminateProcessor(params *TerminateProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerminateProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerminateProcessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "terminateProcessor",
		Method:             "DELETE",
		PathPattern:        "/processors/{id}/threads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TerminateProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerminateProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for terminateProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProcessor updates a processor
*/
func (a *Client) UpdateProcessor(params *UpdateProcessorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProcessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProcessor",
		Method:             "PUT",
		PathPattern:        "/processors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

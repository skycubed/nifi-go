// Code generated by go-swagger; DO NOT EDIT.

package versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVersionControlRequest(params *CreateVersionControlRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVersionControlRequestOK, error)

	DeleteRevertRequest(params *DeleteRevertRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRevertRequestOK, error)

	DeleteUpdateRequest(params *DeleteUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUpdateRequestOK, error)

	DeleteVersionControlRequest(params *DeleteVersionControlRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	ExportFlowVersion(params *ExportFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportFlowVersionOK, error)

	GetRevertRequest(params *GetRevertRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevertRequestOK, error)

	GetUpdateRequest(params *GetUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUpdateRequestOK, error)

	GetVersionInformation(params *GetVersionInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionInformationOK, error)

	InitiateRevertFlowVersion(params *InitiateRevertFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateRevertFlowVersionOK, error)

	InitiateVersionControlUpdate(params *InitiateVersionControlUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateVersionControlUpdateOK, error)

	SaveToFlowRegistry(params *SaveToFlowRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveToFlowRegistryOK, error)

	StopVersionControl(params *StopVersionControlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopVersionControlOK, error)

	UpdateFlowVersion(params *UpdateFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFlowVersionOK, error)

	UpdateVersionControlRequest(params *UpdateVersionControlRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVersionControlRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateVersionControlRequest creates a version control request

Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) CreateVersionControlRequest(params *CreateVersionControlRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVersionControlRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVersionControlRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVersionControlRequest",
		Method:             "POST",
		PathPattern:        "/versions/active-requests",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateVersionControlRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVersionControlRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVersionControlRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRevertRequest deletes the revert request with the given ID

Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE'ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteRevertRequest(params *DeleteRevertRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRevertRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRevertRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRevertRequest",
		Method:             "DELETE",
		PathPattern:        "/versions/revert-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRevertRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRevertRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRevertRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUpdateRequest deletes the update request with the given ID

Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE'ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteUpdateRequest(params *DeleteUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUpdateRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUpdateRequest",
		Method:             "DELETE",
		PathPattern:        "/versions/update-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUpdateRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUpdateRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVersionControlRequest deletes the version control request with the given ID

Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteVersionControlRequest(params *DeleteVersionControlRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVersionControlRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVersionControlRequest",
		Method:             "DELETE",
		PathPattern:        "/versions/active-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteVersionControlRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ExportFlowVersion gets the latest version of a process group for download
*/
func (a *Client) ExportFlowVersion(params *ExportFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportFlowVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportFlowVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportFlowVersion",
		Method:             "GET",
		PathPattern:        "/versions/process-groups/{id}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportFlowVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportFlowVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportFlowVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRevertRequest returns the revert request with the given ID

Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetRevertRequest(params *GetRevertRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevertRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRevertRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRevertRequest",
		Method:             "GET",
		PathPattern:        "/versions/revert-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRevertRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRevertRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRevertRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpdateRequest returns the update request with the given ID

Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetUpdateRequest(params *GetUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdateRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpdateRequest",
		Method:             "GET",
		PathPattern:        "/versions/update-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpdateRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpdateRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionInformation gets the version control information for a process group

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetVersionInformation(params *GetVersionInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionInformation",
		Method:             "GET",
		PathPattern:        "/versions/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionInformation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InitiateRevertFlowVersion initiates the revert request of a process group with the given ID

For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) InitiateRevertFlowVersion(params *InitiateRevertFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateRevertFlowVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateRevertFlowVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initiateRevertFlowVersion",
		Method:             "POST",
		PathPattern:        "/versions/revert-requests/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitiateRevertFlowVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitiateRevertFlowVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initiateRevertFlowVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InitiateVersionControlUpdate initiates the update request of a process group with the given ID

For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) InitiateVersionControlUpdate(params *InitiateVersionControlUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateVersionControlUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateVersionControlUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initiateVersionControlUpdate",
		Method:             "POST",
		PathPattern:        "/versions/update-requests/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitiateVersionControlUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitiateVersionControlUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initiateVersionControlUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveToFlowRegistry saves the process group with the given ID

Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SaveToFlowRegistry(params *SaveToFlowRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveToFlowRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveToFlowRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveToFlowRegistry",
		Method:             "POST",
		PathPattern:        "/versions/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SaveToFlowRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveToFlowRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveToFlowRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopVersionControl stops version controlling the process group with the given ID

Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) StopVersionControl(params *StopVersionControlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopVersionControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopVersionControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopVersionControl",
		Method:             "DELETE",
		PathPattern:        "/versions/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopVersionControlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopVersionControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopVersionControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFlowVersion updates the version of a process group with the given ID

For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateFlowVersion(params *UpdateFlowVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFlowVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFlowVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFlowVersion",
		Method:             "PUT",
		PathPattern:        "/versions/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateFlowVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFlowVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFlowVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVersionControlRequest updates the request with the given ID

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateVersionControlRequest(params *UpdateVersionControlRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVersionControlRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVersionControlRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVersionControlRequest",
		Method:             "PUT",
		PathPattern:        "/versions/active-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateVersionControlRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVersionControlRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVersionControlRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

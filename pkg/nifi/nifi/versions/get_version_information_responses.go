// Code generated by go-swagger; DO NOT EDIT.

package versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// GetVersionInformationReader is a Reader for the GetVersionInformation structure.
type GetVersionInformationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionInformationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionInformationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVersionInformationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetVersionInformationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVersionInformationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionInformationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetVersionInformationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /versions/process-groups/{id}] getVersionInformation", response, response.Code())
	}
}

// NewGetVersionInformationOK creates a GetVersionInformationOK with default headers values
func NewGetVersionInformationOK() *GetVersionInformationOK {
	return &GetVersionInformationOK{}
}

/*
GetVersionInformationOK describes a response with status code 200, with default header values.

successful operation
*/
type GetVersionInformationOK struct {
	Payload *models.VersionControlInformationEntity
}

// IsSuccess returns true when this get version information o k response has a 2xx status code
func (o *GetVersionInformationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get version information o k response has a 3xx status code
func (o *GetVersionInformationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version information o k response has a 4xx status code
func (o *GetVersionInformationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get version information o k response has a 5xx status code
func (o *GetVersionInformationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get version information o k response a status code equal to that given
func (o *GetVersionInformationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get version information o k response
func (o *GetVersionInformationOK) Code() int {
	return 200
}

func (o *GetVersionInformationOK) Error() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationOK  %+v", 200, o.Payload)
}

func (o *GetVersionInformationOK) String() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationOK  %+v", 200, o.Payload)
}

func (o *GetVersionInformationOK) GetPayload() *models.VersionControlInformationEntity {
	return o.Payload
}

func (o *GetVersionInformationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VersionControlInformationEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionInformationBadRequest creates a GetVersionInformationBadRequest with default headers values
func NewGetVersionInformationBadRequest() *GetVersionInformationBadRequest {
	return &GetVersionInformationBadRequest{}
}

/*
GetVersionInformationBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetVersionInformationBadRequest struct {
}

// IsSuccess returns true when this get version information bad request response has a 2xx status code
func (o *GetVersionInformationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version information bad request response has a 3xx status code
func (o *GetVersionInformationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version information bad request response has a 4xx status code
func (o *GetVersionInformationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version information bad request response has a 5xx status code
func (o *GetVersionInformationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get version information bad request response a status code equal to that given
func (o *GetVersionInformationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get version information bad request response
func (o *GetVersionInformationBadRequest) Code() int {
	return 400
}

func (o *GetVersionInformationBadRequest) Error() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationBadRequest ", 400)
}

func (o *GetVersionInformationBadRequest) String() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationBadRequest ", 400)
}

func (o *GetVersionInformationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionInformationUnauthorized creates a GetVersionInformationUnauthorized with default headers values
func NewGetVersionInformationUnauthorized() *GetVersionInformationUnauthorized {
	return &GetVersionInformationUnauthorized{}
}

/*
GetVersionInformationUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type GetVersionInformationUnauthorized struct {
}

// IsSuccess returns true when this get version information unauthorized response has a 2xx status code
func (o *GetVersionInformationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version information unauthorized response has a 3xx status code
func (o *GetVersionInformationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version information unauthorized response has a 4xx status code
func (o *GetVersionInformationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version information unauthorized response has a 5xx status code
func (o *GetVersionInformationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get version information unauthorized response a status code equal to that given
func (o *GetVersionInformationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get version information unauthorized response
func (o *GetVersionInformationUnauthorized) Code() int {
	return 401
}

func (o *GetVersionInformationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationUnauthorized ", 401)
}

func (o *GetVersionInformationUnauthorized) String() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationUnauthorized ", 401)
}

func (o *GetVersionInformationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionInformationForbidden creates a GetVersionInformationForbidden with default headers values
func NewGetVersionInformationForbidden() *GetVersionInformationForbidden {
	return &GetVersionInformationForbidden{}
}

/*
GetVersionInformationForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type GetVersionInformationForbidden struct {
}

// IsSuccess returns true when this get version information forbidden response has a 2xx status code
func (o *GetVersionInformationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version information forbidden response has a 3xx status code
func (o *GetVersionInformationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version information forbidden response has a 4xx status code
func (o *GetVersionInformationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version information forbidden response has a 5xx status code
func (o *GetVersionInformationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get version information forbidden response a status code equal to that given
func (o *GetVersionInformationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get version information forbidden response
func (o *GetVersionInformationForbidden) Code() int {
	return 403
}

func (o *GetVersionInformationForbidden) Error() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationForbidden ", 403)
}

func (o *GetVersionInformationForbidden) String() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationForbidden ", 403)
}

func (o *GetVersionInformationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionInformationNotFound creates a GetVersionInformationNotFound with default headers values
func NewGetVersionInformationNotFound() *GetVersionInformationNotFound {
	return &GetVersionInformationNotFound{}
}

/*
GetVersionInformationNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type GetVersionInformationNotFound struct {
}

// IsSuccess returns true when this get version information not found response has a 2xx status code
func (o *GetVersionInformationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version information not found response has a 3xx status code
func (o *GetVersionInformationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version information not found response has a 4xx status code
func (o *GetVersionInformationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version information not found response has a 5xx status code
func (o *GetVersionInformationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get version information not found response a status code equal to that given
func (o *GetVersionInformationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get version information not found response
func (o *GetVersionInformationNotFound) Code() int {
	return 404
}

func (o *GetVersionInformationNotFound) Error() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationNotFound ", 404)
}

func (o *GetVersionInformationNotFound) String() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationNotFound ", 404)
}

func (o *GetVersionInformationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionInformationConflict creates a GetVersionInformationConflict with default headers values
func NewGetVersionInformationConflict() *GetVersionInformationConflict {
	return &GetVersionInformationConflict{}
}

/*
GetVersionInformationConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetVersionInformationConflict struct {
}

// IsSuccess returns true when this get version information conflict response has a 2xx status code
func (o *GetVersionInformationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version information conflict response has a 3xx status code
func (o *GetVersionInformationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version information conflict response has a 4xx status code
func (o *GetVersionInformationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version information conflict response has a 5xx status code
func (o *GetVersionInformationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get version information conflict response a status code equal to that given
func (o *GetVersionInformationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get version information conflict response
func (o *GetVersionInformationConflict) Code() int {
	return 409
}

func (o *GetVersionInformationConflict) Error() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationConflict ", 409)
}

func (o *GetVersionInformationConflict) String() string {
	return fmt.Sprintf("[GET /versions/process-groups/{id}][%d] getVersionInformationConflict ", 409)
}

func (o *GetVersionInformationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

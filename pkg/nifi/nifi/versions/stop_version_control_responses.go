// Code generated by go-swagger; DO NOT EDIT.

package versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skycubed/nifi-go/pkg/nifi/models"
)

// StopVersionControlReader is a Reader for the StopVersionControl structure.
type StopVersionControlReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopVersionControlReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopVersionControlOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopVersionControlBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopVersionControlUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopVersionControlForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopVersionControlNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStopVersionControlConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /versions/process-groups/{id}] stopVersionControl", response, response.Code())
	}
}

// NewStopVersionControlOK creates a StopVersionControlOK with default headers values
func NewStopVersionControlOK() *StopVersionControlOK {
	return &StopVersionControlOK{}
}

/*
StopVersionControlOK describes a response with status code 200, with default header values.

successful operation
*/
type StopVersionControlOK struct {
	Payload *models.VersionControlInformationEntity
}

// IsSuccess returns true when this stop version control o k response has a 2xx status code
func (o *StopVersionControlOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop version control o k response has a 3xx status code
func (o *StopVersionControlOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop version control o k response has a 4xx status code
func (o *StopVersionControlOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop version control o k response has a 5xx status code
func (o *StopVersionControlOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop version control o k response a status code equal to that given
func (o *StopVersionControlOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop version control o k response
func (o *StopVersionControlOK) Code() int {
	return 200
}

func (o *StopVersionControlOK) Error() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlOK  %+v", 200, o.Payload)
}

func (o *StopVersionControlOK) String() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlOK  %+v", 200, o.Payload)
}

func (o *StopVersionControlOK) GetPayload() *models.VersionControlInformationEntity {
	return o.Payload
}

func (o *StopVersionControlOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VersionControlInformationEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopVersionControlBadRequest creates a StopVersionControlBadRequest with default headers values
func NewStopVersionControlBadRequest() *StopVersionControlBadRequest {
	return &StopVersionControlBadRequest{}
}

/*
StopVersionControlBadRequest describes a response with status code 400, with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type StopVersionControlBadRequest struct {
}

// IsSuccess returns true when this stop version control bad request response has a 2xx status code
func (o *StopVersionControlBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop version control bad request response has a 3xx status code
func (o *StopVersionControlBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop version control bad request response has a 4xx status code
func (o *StopVersionControlBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop version control bad request response has a 5xx status code
func (o *StopVersionControlBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop version control bad request response a status code equal to that given
func (o *StopVersionControlBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop version control bad request response
func (o *StopVersionControlBadRequest) Code() int {
	return 400
}

func (o *StopVersionControlBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlBadRequest ", 400)
}

func (o *StopVersionControlBadRequest) String() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlBadRequest ", 400)
}

func (o *StopVersionControlBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopVersionControlUnauthorized creates a StopVersionControlUnauthorized with default headers values
func NewStopVersionControlUnauthorized() *StopVersionControlUnauthorized {
	return &StopVersionControlUnauthorized{}
}

/*
StopVersionControlUnauthorized describes a response with status code 401, with default header values.

Client could not be authenticated.
*/
type StopVersionControlUnauthorized struct {
}

// IsSuccess returns true when this stop version control unauthorized response has a 2xx status code
func (o *StopVersionControlUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop version control unauthorized response has a 3xx status code
func (o *StopVersionControlUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop version control unauthorized response has a 4xx status code
func (o *StopVersionControlUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop version control unauthorized response has a 5xx status code
func (o *StopVersionControlUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop version control unauthorized response a status code equal to that given
func (o *StopVersionControlUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop version control unauthorized response
func (o *StopVersionControlUnauthorized) Code() int {
	return 401
}

func (o *StopVersionControlUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlUnauthorized ", 401)
}

func (o *StopVersionControlUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlUnauthorized ", 401)
}

func (o *StopVersionControlUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopVersionControlForbidden creates a StopVersionControlForbidden with default headers values
func NewStopVersionControlForbidden() *StopVersionControlForbidden {
	return &StopVersionControlForbidden{}
}

/*
StopVersionControlForbidden describes a response with status code 403, with default header values.

Client is not authorized to make this request.
*/
type StopVersionControlForbidden struct {
}

// IsSuccess returns true when this stop version control forbidden response has a 2xx status code
func (o *StopVersionControlForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop version control forbidden response has a 3xx status code
func (o *StopVersionControlForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop version control forbidden response has a 4xx status code
func (o *StopVersionControlForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop version control forbidden response has a 5xx status code
func (o *StopVersionControlForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop version control forbidden response a status code equal to that given
func (o *StopVersionControlForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop version control forbidden response
func (o *StopVersionControlForbidden) Code() int {
	return 403
}

func (o *StopVersionControlForbidden) Error() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlForbidden ", 403)
}

func (o *StopVersionControlForbidden) String() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlForbidden ", 403)
}

func (o *StopVersionControlForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopVersionControlNotFound creates a StopVersionControlNotFound with default headers values
func NewStopVersionControlNotFound() *StopVersionControlNotFound {
	return &StopVersionControlNotFound{}
}

/*
StopVersionControlNotFound describes a response with status code 404, with default header values.

The specified resource could not be found.
*/
type StopVersionControlNotFound struct {
}

// IsSuccess returns true when this stop version control not found response has a 2xx status code
func (o *StopVersionControlNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop version control not found response has a 3xx status code
func (o *StopVersionControlNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop version control not found response has a 4xx status code
func (o *StopVersionControlNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop version control not found response has a 5xx status code
func (o *StopVersionControlNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop version control not found response a status code equal to that given
func (o *StopVersionControlNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop version control not found response
func (o *StopVersionControlNotFound) Code() int {
	return 404
}

func (o *StopVersionControlNotFound) Error() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlNotFound ", 404)
}

func (o *StopVersionControlNotFound) String() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlNotFound ", 404)
}

func (o *StopVersionControlNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopVersionControlConflict creates a StopVersionControlConflict with default headers values
func NewStopVersionControlConflict() *StopVersionControlConflict {
	return &StopVersionControlConflict{}
}

/*
StopVersionControlConflict describes a response with status code 409, with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type StopVersionControlConflict struct {
}

// IsSuccess returns true when this stop version control conflict response has a 2xx status code
func (o *StopVersionControlConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop version control conflict response has a 3xx status code
func (o *StopVersionControlConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop version control conflict response has a 4xx status code
func (o *StopVersionControlConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop version control conflict response has a 5xx status code
func (o *StopVersionControlConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this stop version control conflict response a status code equal to that given
func (o *StopVersionControlConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the stop version control conflict response
func (o *StopVersionControlConflict) Code() int {
	return 409
}

func (o *StopVersionControlConflict) Error() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlConflict ", 409)
}

func (o *StopVersionControlConflict) String() string {
	return fmt.Sprintf("[DELETE /versions/process-groups/{id}][%d] stopVersionControlConflict ", 409)
}

func (o *StopVersionControlConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

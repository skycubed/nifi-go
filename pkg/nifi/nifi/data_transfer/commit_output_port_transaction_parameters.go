// Code generated by go-swagger; DO NOT EDIT.

package data_transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCommitOutputPortTransactionParams creates a new CommitOutputPortTransactionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCommitOutputPortTransactionParams() *CommitOutputPortTransactionParams {
	return &CommitOutputPortTransactionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCommitOutputPortTransactionParamsWithTimeout creates a new CommitOutputPortTransactionParams object
// with the ability to set a timeout on a request.
func NewCommitOutputPortTransactionParamsWithTimeout(timeout time.Duration) *CommitOutputPortTransactionParams {
	return &CommitOutputPortTransactionParams{
		timeout: timeout,
	}
}

// NewCommitOutputPortTransactionParamsWithContext creates a new CommitOutputPortTransactionParams object
// with the ability to set a context for a request.
func NewCommitOutputPortTransactionParamsWithContext(ctx context.Context) *CommitOutputPortTransactionParams {
	return &CommitOutputPortTransactionParams{
		Context: ctx,
	}
}

// NewCommitOutputPortTransactionParamsWithHTTPClient creates a new CommitOutputPortTransactionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCommitOutputPortTransactionParamsWithHTTPClient(client *http.Client) *CommitOutputPortTransactionParams {
	return &CommitOutputPortTransactionParams{
		HTTPClient: client,
	}
}

/* CommitOutputPortTransactionParams contains all the parameters to send to the API endpoint
   for the commit output port transaction operation.

   Typically these are written to a http.Request.
*/
type CommitOutputPortTransactionParams struct {

	/* Checksum.

	   A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.
	*/
	Checksum string

	/* PortID.

	   The output port id.
	*/
	PortID string

	/* ResponseCode.

	   The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).

	   Format: int32
	*/
	ResponseCode int32

	/* TransactionID.

	   The transaction id.
	*/
	TransactionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the commit output port transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CommitOutputPortTransactionParams) WithDefaults() *CommitOutputPortTransactionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the commit output port transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CommitOutputPortTransactionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithTimeout(timeout time.Duration) *CommitOutputPortTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithContext(ctx context.Context) *CommitOutputPortTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithHTTPClient(client *http.Client) *CommitOutputPortTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChecksum adds the checksum to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithChecksum(checksum string) *CommitOutputPortTransactionParams {
	o.SetChecksum(checksum)
	return o
}

// SetChecksum adds the checksum to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetChecksum(checksum string) {
	o.Checksum = checksum
}

// WithPortID adds the portID to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithPortID(portID string) *CommitOutputPortTransactionParams {
	o.SetPortID(portID)
	return o
}

// SetPortID adds the portId to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetPortID(portID string) {
	o.PortID = portID
}

// WithResponseCode adds the responseCode to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithResponseCode(responseCode int32) *CommitOutputPortTransactionParams {
	o.SetResponseCode(responseCode)
	return o
}

// SetResponseCode adds the responseCode to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetResponseCode(responseCode int32) {
	o.ResponseCode = responseCode
}

// WithTransactionID adds the transactionID to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) WithTransactionID(transactionID string) *CommitOutputPortTransactionParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the commit output port transaction params
func (o *CommitOutputPortTransactionParams) SetTransactionID(transactionID string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *CommitOutputPortTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param checksum
	qrChecksum := o.Checksum
	qChecksum := qrChecksum
	if qChecksum != "" {

		if err := r.SetQueryParam("checksum", qChecksum); err != nil {
			return err
		}
	}

	// path param portId
	if err := r.SetPathParam("portId", o.PortID); err != nil {
		return err
	}

	// query param responseCode
	qrResponseCode := o.ResponseCode
	qResponseCode := swag.FormatInt32(qrResponseCode)
	if qResponseCode != "" {

		if err := r.SetQueryParam("responseCode", qResponseCode); err != nil {
			return err
		}
	}

	// path param transactionId
	if err := r.SetPathParam("transactionId", o.TransactionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data_transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCommitInputPortTransactionParams creates a new CommitInputPortTransactionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCommitInputPortTransactionParams() *CommitInputPortTransactionParams {
	return &CommitInputPortTransactionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCommitInputPortTransactionParamsWithTimeout creates a new CommitInputPortTransactionParams object
// with the ability to set a timeout on a request.
func NewCommitInputPortTransactionParamsWithTimeout(timeout time.Duration) *CommitInputPortTransactionParams {
	return &CommitInputPortTransactionParams{
		timeout: timeout,
	}
}

// NewCommitInputPortTransactionParamsWithContext creates a new CommitInputPortTransactionParams object
// with the ability to set a context for a request.
func NewCommitInputPortTransactionParamsWithContext(ctx context.Context) *CommitInputPortTransactionParams {
	return &CommitInputPortTransactionParams{
		Context: ctx,
	}
}

// NewCommitInputPortTransactionParamsWithHTTPClient creates a new CommitInputPortTransactionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCommitInputPortTransactionParamsWithHTTPClient(client *http.Client) *CommitInputPortTransactionParams {
	return &CommitInputPortTransactionParams{
		HTTPClient: client,
	}
}

/*
CommitInputPortTransactionParams contains all the parameters to send to the API endpoint

	for the commit input port transaction operation.

	Typically these are written to a http.Request.
*/
type CommitInputPortTransactionParams struct {

	/* PortID.

	   The input port id.
	*/
	PortID string

	/* ResponseCode.

	   The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).

	   Format: int32
	*/
	ResponseCode int32

	/* TransactionID.

	   The transaction id.
	*/
	TransactionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the commit input port transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CommitInputPortTransactionParams) WithDefaults() *CommitInputPortTransactionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the commit input port transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CommitInputPortTransactionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the commit input port transaction params
func (o *CommitInputPortTransactionParams) WithTimeout(timeout time.Duration) *CommitInputPortTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the commit input port transaction params
func (o *CommitInputPortTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the commit input port transaction params
func (o *CommitInputPortTransactionParams) WithContext(ctx context.Context) *CommitInputPortTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the commit input port transaction params
func (o *CommitInputPortTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the commit input port transaction params
func (o *CommitInputPortTransactionParams) WithHTTPClient(client *http.Client) *CommitInputPortTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the commit input port transaction params
func (o *CommitInputPortTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPortID adds the portID to the commit input port transaction params
func (o *CommitInputPortTransactionParams) WithPortID(portID string) *CommitInputPortTransactionParams {
	o.SetPortID(portID)
	return o
}

// SetPortID adds the portId to the commit input port transaction params
func (o *CommitInputPortTransactionParams) SetPortID(portID string) {
	o.PortID = portID
}

// WithResponseCode adds the responseCode to the commit input port transaction params
func (o *CommitInputPortTransactionParams) WithResponseCode(responseCode int32) *CommitInputPortTransactionParams {
	o.SetResponseCode(responseCode)
	return o
}

// SetResponseCode adds the responseCode to the commit input port transaction params
func (o *CommitInputPortTransactionParams) SetResponseCode(responseCode int32) {
	o.ResponseCode = responseCode
}

// WithTransactionID adds the transactionID to the commit input port transaction params
func (o *CommitInputPortTransactionParams) WithTransactionID(transactionID string) *CommitInputPortTransactionParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the commit input port transaction params
func (o *CommitInputPortTransactionParams) SetTransactionID(transactionID string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *CommitInputPortTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param portId
	if err := r.SetPathParam("portId", o.PortID); err != nil {
		return err
	}

	// query param responseCode
	qrResponseCode := o.ResponseCode
	qResponseCode := swag.FormatInt32(qrResponseCode)
	if qResponseCode != "" {

		if err := r.SetQueryParam("responseCode", qResponseCode); err != nil {
			return err
		}
	}

	// path param transactionId
	if err := r.SetPathParam("transactionId", o.TransactionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

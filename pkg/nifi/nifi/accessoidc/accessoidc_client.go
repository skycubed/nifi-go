// Code generated by go-swagger; DO NOT EDIT.

package accessoidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accessoidc API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accessoidc API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OidcCallback(params *OidcCallbackParams, opts ...ClientOption) error

	OidcExchange(params *OidcExchangeParams, opts ...ClientOption) (*OidcExchangeOK, error)

	OidcLogout(params *OidcLogoutParams, opts ...ClientOption) error

	OidcLogoutCallback(params *OidcLogoutCallbackParams, opts ...ClientOption) error

	OidcRequest(params *OidcRequestParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  OidcCallback redirects callback URI for processing the result of the open Id connect login sequence

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcCallback(params *OidcCallbackParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcCallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "oidcCallback",
		Method:             "GET",
		PathPattern:        "/access/oidc/callback",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  OidcExchange retrieves a j w t following a successful login sequence using the configured open Id connect provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcExchange(params *OidcExchangeParams, opts ...ClientOption) (*OidcExchangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcExchangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "oidcExchange",
		Method:             "POST",
		PathPattern:        "/access/oidc/exchange",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcExchangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OidcExchangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for oidcExchange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OidcLogout performs a logout in the open Id provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcLogout(params *OidcLogoutParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "oidcLogout",
		Method:             "GET",
		PathPattern:        "/access/oidc/logout",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  OidcLogoutCallback redirects callback URI for processing the result of the open Id connect logout sequence

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcLogoutCallback(params *OidcLogoutCallbackParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcLogoutCallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "oidcLogoutCallback",
		Method:             "GET",
		PathPattern:        "/access/oidc/logoutCallback",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcLogoutCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  OidcRequest initiates a request to authenticate through the configured open Id connect provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcRequest(params *OidcRequestParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "oidcRequest",
		Method:             "GET",
		PathPattern:        "/access/oidc/request",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
